# Copyright (c) 2023, DeepLink.
import os
from code_template import CodeTemplate


class FileManager(object):
    def __init__(self, output_dir):
        self.output_dir = output_dir
        self.filenames = set()
        self.outputs_written = False
        self.undeclared_files = []

    def will_write(self, filename):
        if '/' in filename:
            path = os.path.join(self.output_dir, filename.rpartition('/')[0])
            if not os.path.exists(path):
                os.makedirs(path)
        filename = os.path.join(self.output_dir, filename)
        if self.outputs_written:
            raise Exception("'will_write' can only be called before the call "
                            "to write_outputs, refactor so outputs are "
                            "registered before running the generators")
        self.filenames.add(filename)

    def _write_if_changed(self, filename, contents):
        try:
            with open(filename, 'r') as f:
                old_contents = f.read()
        except IOError:
            old_contents = None
        if contents != old_contents:
            with open(filename, 'w') as f:
                f.write(contents)

    def write_outputs(self, filename):
        """Write a file containing the list of all outputs which are
        generated by this script."""
        self._write_if_changed(
            filename,
            ''.join(name + ";" for name in sorted(self.filenames)))
        self.outputs_written = True

    def write(self, filename, s, env=None):
        filename = os.path.join(self.output_dir, filename)
        if isinstance(s, CodeTemplate):
            assert env is not None
            if 'generated_comment' not in env.keys():
                env['generated_comment'] = \
                    "@generated by scripts/codegen/gen.py"
            s = s.substitute(env)
        self._write_if_changed(filename, s)
        if filename not in self.filenames:
            self.undeclared_files.append(filename)
        else:
            self.filenames.remove(filename)

    def check_all_files_written(self):
        if len(self.undeclared_files) > 0:
            raise Exception(
                "trying to write files {} which are not in the "
                "list of outputs this script produces. use "
                "will_write to add them.".format(self.undeclared_files))
        if len(self.filenames) > 0:
            raise Exception("Outputs declared with 'will_write' were " + "never written: {}".format(self.filenames))
