resnet50_8xb32_in1k_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7efe5ed015d0>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 224, 224), (32, 64, 56, 56), (32, 64, 56, 56), (32, 64, 56, 56), (32, 256, 56, 56), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 256, 56, 56), (32, 512, 28, 28), (32, 128, 28, 28), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 256, 14, 14), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 1024, 14, 14), (32, 2048, 7, 7), (32, 512, 7, 7)], [(64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1)], [(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 23],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 64, 112, 112), (32, 64, 56, 56), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 2048, 7, 7)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 12],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 112, 112), (32, 64, 56, 56), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 2048, 7, 7)]], {'inplace': [True, True, True, True, True, True, True, True, True, True, True, True]}, 12],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 112, 112)], [3], [2], [1], [1], [False], [False]], {}, 1],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 256, 56, 56), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 2048, 7, 7)], [(32, 256, 56, 56), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 2048, 7, 7)]], {}, 4],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 2048, 7, 7)], [(1, 1)]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 2048)], [(1000, 2048)], [(1000,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(32, 1000)], [(32,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [32]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (256,), (64, 256, 1, 1), (128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (1000, 2048), (1000,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.1, 'dampening': 0, 'nesterov': False}, 28],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
resnet101_8xb32_in1k_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7f3e03822618>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 224, 224), (32, 64, 56, 56), (32, 64, 56, 56), (32, 64, 56, 56), (32, 256, 56, 56), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 256, 56, 56), (32, 512, 28, 28), (32, 128, 28, 28), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 256, 14, 14), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 1024, 14, 14), (32, 2048, 7, 7), (32, 512, 7, 7)], [(64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1)], [(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 23],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 64, 112, 112), (32, 64, 56, 56), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 2048, 7, 7)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 12],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 112, 112), (32, 64, 56, 56), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 2048, 7, 7)]], {'inplace': [True, True, True, True, True, True, True, True, True, True, True, True]}, 12],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 112, 112)], [3], [2], [1], [1], [False], [False]], {}, 1],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 256, 56, 56), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 2048, 7, 7)], [(32, 256, 56, 56), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 2048, 7, 7)]], {}, 4],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 2048, 7, 7)], [(1, 1)]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 2048)], [(1000, 2048)], [(1000,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(32, 1000)], [(32,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [32]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (256,), (64, 256, 1, 1), (128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (1000, 2048), (1000,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.1, 'dampening': 0, 'nesterov': False}, 28],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
seresnet50_8xb32_in1k_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7fc9041535b8>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 224, 224), (32, 64, 56, 56), (32, 64, 56, 56), (32, 64, 56, 56), (32, 256, 56, 56), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 256, 56, 56), (32, 512, 28, 28), (32, 128, 28, 28), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 256, 14, 14), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 1024, 14, 14), (32, 2048, 7, 7), (32, 512, 7, 7)], [(64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1)], [(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 23],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 64, 112, 112), (32, 64, 56, 56), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 2048, 7, 7)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 12],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 112, 112), (32, 64, 56, 56), (32, 16, 1, 1), (32, 256, 56, 56), (32, 128, 56, 56), (32, 128, 28, 28), (32, 32, 1, 1), (32, 512, 28, 28), (32, 256, 28, 28), (32, 256, 14, 14), (32, 64, 1, 1), (32, 1024, 14, 14), (32, 512, 14, 14), (32, 512, 7, 7), (32, 128, 1, 1), (32, 2048, 7, 7)]], {'inplace': [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]}, 16],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 112, 112)], [3], [2], [1], [1], [False], [False]], {}, 1],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 256, 56, 56), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 2048, 7, 7), (32, 2048, 7, 7)], [1, 1, 1, 1, (1, 1)]], {}, 5],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 256, 1, 1), (32, 16, 1, 1), (32, 512, 1, 1), (32, 32, 1, 1), (32, 1024, 1, 1), (32, 64, 1, 1), (32, 2048, 1, 1), (32, 128, 1, 1)], [(16, 256, 1, 1), (256, 16, 1, 1), (32, 512, 1, 1), (512, 32, 1, 1), (64, 1024, 1, 1), (1024, 64, 1, 1), (128, 2048, 1, 1), (2048, 128, 1, 1)], [(16,), (256,), (32,), (512,), (64,), (1024,), (128,), (2048,)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1]], {}, 8],
['sigmoid', 'torch', ['torch.cuda.FloatTensor'], [[(32, 256, 1, 1), (32, 512, 1, 1), (32, 1024, 1, 1), (32, 2048, 1, 1)]], {}, 4],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 256, 56, 56), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 2048, 7, 7)], [(32, 256, 1, 1), (32, 512, 1, 1), (32, 1024, 1, 1), (32, 2048, 1, 1)]], {}, 4],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 256, 56, 56), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 2048, 7, 7)], [(32, 256, 56, 56), (32, 512, 28, 28), (32, 1024, 14, 14), (32, 2048, 7, 7)]], {}, 4],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 2048)], [(1000, 2048)], [(1000,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(32, 1000)], [(32,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [32]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (256,), (16, 256, 1, 1), (16,), (256, 16, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (32, 512, 1, 1), (32,), (512, 32, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (64, 1024, 1, 1), (1024, 64, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (128, 2048, 1, 1), (2048, 128, 1, 1), (512, 2048, 1, 1), (1000, 2048), (1000,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.1, 'dampening': 0, 'nesterov': False}, 38],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
swin_base_16xb64_in1k_config=[
['linspace', 'torch', [], [[0], [0.5], [24]], {}, 1],
['arange', 'torch', [], [[0, 0], [91, 7], [13, 1]], {}, 2],
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7f832cc22db0>'}, 1],
['one_hot', 'torch.nn.functional', ['torch.cuda.LongTensor'], [[(64,)]], {'num_classes': 1000}, 1],
['randperm', 'torch', [], [[64]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.LongTensor'], [[(64, 1000), (64, 1000)], [0.5864556760204082, 0.41354432397959184]], {}, 2],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 1000), (4096, 4, 49, 49), (64, 3136, 128), (64, 64, 4, 49, 49), (1024, 8, 49, 49), (64, 784, 256), (64, 16, 8, 49, 49), (256, 16, 49, 49), (64, 196, 512), (64, 4, 16, 49, 49), (64, 32, 49, 49), (64, 49, 1024)], [(64, 1000), (1, 4, 49, 49), (64, 3136, 128), (1, 64, 1, 49, 49), (1, 8, 49, 49), (64, 784, 256), (1, 16, 1, 49, 49), (1, 16, 49, 49), (64, 196, 512), (1, 4, 1, 49, 49), (1, 32, 49, 49), (64, 49, 1024)]], {}, 12],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3, 224, 224)], [(128, 3, 4, 4)], [(128,)], [(4, 4)], [(0, 0)], [(1, 1)], [1]], {}, 1],
['transpose', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 128, 3136), (4096, 4, 49, 32), (4096, 4, 49, 32), (64, 512, 784), (1024, 8, 49, 32), (1024, 8, 49, 32), (64, 1024, 196), (256, 16, 49, 32), (256, 16, 49, 32), (64, 2048, 49), (64, 32, 49, 32), (64, 32, 49, 32)], [1, -2, 1, 1, -2, 1, 1, -2, 1, 1, -2, 1], [2, -1, 2, 2, -1, 2, 2, -1, 2, 2, -1, 2]], {}, 12],
['layer_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3136, 128), (64, 784, 512), (64, 784, 256), (64, 196, 1024), (64, 196, 512), (64, 49, 2048), (64, 49, 1024)], [(128,), (512,), (256,), (1024,), (512,), (2048,), (1024,)], [(128,), (512,), (256,), (1024,), (512,), (2048,), (1024,)], [(128,), (512,), (256,), (1024,), (512,), (2048,), (1024,)], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 7],
['dropout', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 3136, 128), (4096, 4, 49, 49), (4096, 49, 128), (64, 3136, 512), (1024, 8, 49, 49), (1024, 49, 256), (64, 784, 1024), (64, 784, 256), (256, 16, 49, 49), (256, 49, 512), (64, 196, 2048), (64, 196, 512), (64, 32, 49, 49), (64, 49, 1024), (64, 49, 4096)], [0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]], {}, 15],
['pad', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 56, 56, 128), (64, 28, 28, 256), (64, 14, 14, 512), (64, 7, 7, 1024)], [(0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)]], {}, 4],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 8, 7, 8, 7, 128), (64, 8, 8, 7, 7, 128), (1, 8, 7, 8, 7, 1), (64, 4, 7, 4, 7, 256), (64, 4, 4, 7, 7, 256), (1, 4, 7, 4, 7, 1), (64, 2, 7, 2, 7, 512), (64, 2, 2, 7, 7, 512), (1, 2, 7, 2, 7, 1), (64, 1, 7, 1, 7, 1024), (64, 1, 1, 7, 7, 1024)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], {}, 11],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(4096, 49, 128), (4096, 49, 128), (64, 3136, 128), (64, 3136, 512), (1024, 49, 256), (1024, 49, 256), (64, 784, 256), (64, 784, 1024), (256, 49, 512), (256, 49, 512), (64, 196, 512), (64, 196, 2048), (64, 49, 1024), (64, 49, 1024), (64, 49, 1024), (64, 49, 4096), (64, 1024)], [(384, 128), (128, 128), (512, 128), (128, 512), (768, 256), (256, 256), (1024, 256), (256, 1024), (1536, 512), (512, 512), (2048, 512), (512, 2048), (3072, 1024), (1024, 1024), (4096, 1024), (1024, 4096), (1000, 1024)], [(384,), (128,), (512,), (128,), (768,), (256,), (1024,), (256,), (1536,), (512,), (2048,), (512,), (3072,), (1024,), (4096,), (1024,), (1000,)]], {}, 17],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(4096, 49, 3, 4, 32), (1024, 49, 3, 8, 32), (256, 49, 3, 16, 32), (64, 49, 3, 32, 32)], [2, 2, 2, 2], [0, 0, 0, 0], [3, 3, 3, 3], [1, 1, 1, 1], [4, 4, 4, 4]], {}, 4],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(4096, 4, 49, 32), (1024, 8, 49, 32), (256, 16, 49, 32), (64, 32, 49, 32), (64, 1000), ()], [0.1767766952966369, 0.1767766952966369, 0.1767766952966369, 0.1767766952966369, 0.9, 5.0]], {}, 6],
['matmul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(4096, 4, 49, 32), (4096, 4, 49, 49), (1024, 8, 49, 32), (1024, 8, 49, 49), (256, 16, 49, 32), (256, 16, 49, 49), (64, 32, 49, 32), (64, 32, 49, 49)], [(4096, 4, 32, 49), (4096, 4, 49, 32), (1024, 8, 32, 49), (1024, 8, 49, 32), (256, 16, 32, 49), (256, 16, 49, 32), (64, 32, 32, 49), (64, 32, 49, 32)]], {}, 8],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(49, 49, 4), (49, 49, 8), (49, 49, 16), (49, 49, 32)], [2, 2, 2, 2], [0, 0, 0, 0], [1, 1, 1, 1]], {}, 4],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(4096, 4, 49, 49), (1024, 8, 49, 49), (256, 16, 49, 49), (64, 32, 49, 49)], [-1, -1, -1, -1]], {'_stacklevel': [5, 5, 5, 5]}, 4],
['gelu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 3136, 512), (64, 784, 1024), (64, 196, 2048), (64, 49, 4096)]], {}, 4],
['roll', 'torch', ['torch.cuda.FloatTensor'], [[(64, 56, 56, 128), (64, 56, 56, 128), (64, 28, 28, 256), (64, 28, 28, 256), (64, 14, 14, 512), (64, 14, 14, 512), (64, 7, 7, 1024)]], {'shifts': [(-3, -3), (3, 3), (-3, -3), (3, 3), (-3, -3), (3, 3), (0, 0)], 'dims': [(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]}, 7],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 1, 49), (16, 1, 49), (4, 1, 49)], [(64, 49, 1), (16, 49, 1), (4, 49, 1)]], {}, 3],
['ne', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 49, 49), (16, 49, 49), (4, 49, 49)], [0, 0, 0]], {}, 3],
['masked_fill', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.BoolTensor'], [[(64, 49, 49), (64, 49, 49), (16, 49, 49), (16, 49, 49), (4, 49, 49), (4, 49, 49)], [(64, 49, 49), (64, 49, 49), (16, 49, 49), (16, 49, 49), (4, 49, 49), (4, 49, 49)], [-100.0, 0.0, -100.0, 0.0, -100.0, 0.0]], {}, 6],
['eq', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 49, 49), (16, 49, 49), (4, 49, 49)], [0, 0, 0]], {}, 3],
['rand', 'torch', [], [[(64, 1, 1)]], {'dtype': ['torch.float32'], 'device': ['cuda:0']}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), ()], [0.9782608691602945, 0.9565217383205891, 0.9347826093435287, 0.9130434766411781, 0.8913043439388275, 0.8695652186870575, 0.8478260785341263, 0.8260869532823563, 0.8043478280305862, 0.782608687877655, 0.760869562625885, 0.739130437374115, 0.717391312122345, 0.695652186870575, 0.6739130318164825, 0.6521739065647125, 0.6304347813129425, 0.6086956560611725, 0.5869565308094025, 0.5652174055576324, 0.54347825050354, 0.52173912525177, 0.5, 0]], {}, 24],
['div', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 3136, 128), (64, 784, 256), (64, 784, 256), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 196, 512), (64, 49, 1024), (64, 49, 1024)], [0.9782608691602945, 0.9565217383205891, 0.9347826093435287, 0.9130434766411781, 0.8913043439388275, 0.8695652186870575, 0.8478260785341263, 0.8260869532823563, 0.8043478280305862, 0.782608687877655, 0.760869562625885, 0.739130437374115, 0.717391312122345, 0.695652186870575, 0.6739130318164825, 0.6521739065647125, 0.6304347813129425, 0.6086956560611725, 0.5869565308094025, 0.5652174055576324, 0.54347825050354, 0.52173912525177, 0.5]], {}, 23],
['floor', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1, 1)]], {}, 1],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3136, 128), (64, 784, 256), (64, 196, 512), (64, 49, 1024), (64, 1000)], [(64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1, 1), (64, 1000)]], {}, 5],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 56, 56, 128), (64, 28, 28, 256), (64, 14, 14, 512)], [[0, 3, 1, 2], [0, 3, 1, 2], [0, 3, 1, 2]]], {}, 3],
['unfold', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 128, 56, 56), (64, 256, 28, 28), (64, 512, 14, 14)], [(2, 2), (2, 2), (2, 2)], [(1, 1), (1, 1), (1, 1)], [(0, 0), (0, 0), (0, 0)], [(2, 2), (2, 2), (2, 2)]], {}, 3],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 784, 512), (64, 196, 1024), (64, 49, 2048)], [(256, 512), (512, 1024), (1024, 2048)], [None, None, None]], {}, 3],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 7, 7, 1024)], [0], [3], [1], [2]], {}, 1],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 1024, 7, 7)], [(1, 1)]], {}, 1],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1000)], [0.0001]], {}, 1],
['neg', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1000)]], {}, 1],
['log_softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 1000)]], {'dim': -1}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1000)]], {'dim': -1}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [64]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['norm', 'torch', ['torch.cuda.FloatTensor'], [[(128, 3, 4, 4), (128,), (169, 4), (384, 128), (384,), (128, 128), (512, 128), (512,), (128, 512), (256, 512), (256,), (169, 8), (768, 256), (768,), (256, 256), (1024, 256), (1024,), (256, 1024), (512, 1024), (169, 16), (1536, 512), (1536,), (512, 512), (2048, 512), (2048,), (512, 2048), (1024, 2048), (169, 32), (3072, 1024), (3072,), (1024, 1024), (4096, 1024), (4096,), (1024, 4096), (1000, 1024), (1000,), (329,)], [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]], {}, 37],
['stack', 'torch', ['torch.cuda.FloatTensor'], [[((), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ())]], {}, 1],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1e-06]], {}, 1],
['rtruediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [5.0]], {}, 1],
['reciprocal', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['clamp', 'torch', ['torch.cuda.FloatTensor'], [[()]], {'max': 1.0}, 1],
['mul_', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(128, 3, 4, 4), (128,), (169, 4), (384, 128), (384,), (128, 128), (512, 128), (512,), (128, 512), (256, 512), (256,), (169, 8), (768, 256), (768,), (256, 256), (1024, 256), (1024,), (256, 1024), (512, 1024), (169, 16), (1536, 512), (1536,), (512, 512), (2048, 512), (2048,), (512, 2048), (1024, 2048), (169, 32), (3072, 1024), (3072,), (1024, 1024), (4096, 1024), (4096,), (1024, 4096), (1000, 1024), (1000,)], [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()]], {}, 36],
['adamw', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(128, 3, 4, 4), (384, 128), (128, 128), (512, 128), (128, 512), (256, 512), (768, 256), (256, 256), (1024, 256), (256, 1024), (512, 1024), (1536, 512), (512, 512), (2048, 512), (512, 2048), (1024, 2048), (3072, 1024), (1024, 1024), (4096, 1024), (1024, 4096), (1000, 1024)]], {'amsgrad': False, 'beta1': 0.9, 'beta2': 0.999, 'lr': 1.000000000000001e-06, 'weight_decay': 0.05, 'eps': 1e-08}, 21],
['adamw', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(128,), (169, 4), (384,), (512,), (256,), (169, 8), (768,), (1024,), (169, 16), (1536,), (2048,), (169, 32), (3072,), (4096,), (1000,)]], {'amsgrad': False, 'beta1': 0.9, 'beta2': 0.999, 'lr': 1.000000000000001e-06, 'weight_decay': 0.0, 'eps': 1e-08}, 15],
]
efficientnet_b2_8xb32_in1k_config=[
['linspace', 'torch', [], [[0], [0.0], [23]], {}, 1],
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7f00bcafc720>'}, 1],
['pad', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 3, 260, 260), (32, 32, 130, 130), (32, 16, 130, 130), (32, 96, 130, 130), (32, 144, 65, 65), (32, 144, 65, 65), (32, 288, 33, 33), (32, 288, 33, 33), (32, 528, 17, 17), (32, 528, 17, 17), (32, 720, 17, 17), (32, 1248, 9, 9), (32, 1248, 9, 9), (32, 2112, 9, 9)], [[0, 1, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 1, 1], [2, 2, 2, 2], [2, 2, 2, 2], [1, 1, 1, 1], [1, 1, 1, 1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2], [1, 1, 1, 1], [1, 1, 1, 1]]], {}, 14],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 261, 261), (32, 32, 132, 132), (32, 32, 130, 130), (32, 16, 132, 132), (32, 16, 130, 130), (32, 16, 130, 130), (32, 96, 131, 131), (32, 96, 65, 65), (32, 24, 65, 65), (32, 144, 67, 67), (32, 144, 65, 65), (32, 144, 69, 69), (32, 144, 33, 33), (32, 48, 33, 33), (32, 288, 37, 37), (32, 288, 33, 33), (32, 288, 35, 35), (32, 288, 17, 17), (32, 88, 17, 17), (32, 528, 19, 19), (32, 528, 17, 17), (32, 528, 21, 21), (32, 528, 17, 17), (32, 120, 17, 17), (32, 720, 21, 21), (32, 720, 17, 17), (32, 720, 21, 21), (32, 720, 9, 9), (32, 208, 9, 9), (32, 1248, 13, 13), (32, 1248, 9, 9), (32, 1248, 11, 11), (32, 1248, 9, 9), (32, 352, 9, 9), (32, 2112, 11, 11), (32, 2112, 9, 9), (32, 352, 9, 9)], [(32, 3, 3, 3), (32, 1, 3, 3), (16, 32, 1, 1), (16, 1, 3, 3), (16, 16, 1, 1), (96, 16, 1, 1), (96, 1, 3, 3), (24, 96, 1, 1), (144, 24, 1, 1), (144, 1, 3, 3), (24, 144, 1, 1), (144, 1, 5, 5), (48, 144, 1, 1), (288, 48, 1, 1), (288, 1, 5, 5), (48, 288, 1, 1), (288, 1, 3, 3), (88, 288, 1, 1), (528, 88, 1, 1), (528, 1, 3, 3), (88, 528, 1, 1), (528, 1, 5, 5), (120, 528, 1, 1), (720, 120, 1, 1), (720, 1, 5, 5), (120, 720, 1, 1), (720, 1, 5, 5), (208, 720, 1, 1), (1248, 208, 1, 1), (1248, 1, 5, 5), (208, 1248, 1, 1), (1248, 1, 3, 3), (352, 1248, 1, 1), (2112, 352, 1, 1), (2112, 1, 3, 3), (352, 2112, 1, 1), (1408, 352, 1, 1)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 32, 1, 16, 1, 1, 96, 1, 1, 144, 1, 144, 1, 1, 288, 1, 288, 1, 1, 528, 1, 528, 1, 1, 720, 1, 720, 1, 1, 1248, 1, 1248, 1, 1, 2112, 1, 1]], {}, 37],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 32, 130, 130), (32, 16, 130, 130), (32, 96, 130, 130), (32, 96, 65, 65), (32, 24, 65, 65), (32, 144, 65, 65), (32, 144, 33, 33), (32, 48, 33, 33), (32, 288, 33, 33), (32, 288, 17, 17), (32, 88, 17, 17), (32, 528, 17, 17), (32, 120, 17, 17), (32, 720, 17, 17), (32, 720, 9, 9), (32, 208, 9, 9), (32, 1248, 9, 9), (32, 352, 9, 9), (32, 2112, 9, 9), (32, 1408, 9, 9)], [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (48,), (288,), (288,), (88,), (528,), (120,), (720,), (720,), (208,), (1248,), (352,), (2112,), (1408,)], [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (48,), (288,), (288,), (88,), (528,), (120,), (720,), (720,), (208,), (1248,), (352,), (2112,), (1408,)], [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (48,), (288,), (288,), (88,), (528,), (120,), (720,), (720,), (208,), (1248,), (352,), (2112,), (1408,)], [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (48,), (288,), (288,), (88,), (528,), (120,), (720,), (720,), (208,), (1248,), (352,), (2112,), (1408,)], [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001]], {}, 20],
['sigmoid', 'torch', ['torch.cuda.FloatTensor'], [[(32, 32, 130, 130), (32, 8, 1, 1), (32, 32, 1, 1), (32, 16, 130, 130), (32, 4, 1, 1), (32, 16, 1, 1), (32, 96, 130, 130), (32, 96, 65, 65), (32, 96, 1, 1), (32, 144, 65, 65), (32, 6, 1, 1), (32, 144, 1, 1), (32, 144, 33, 33), (32, 288, 33, 33), (32, 12, 1, 1), (32, 288, 1, 1), (32, 288, 17, 17), (32, 528, 17, 17), (32, 22, 1, 1), (32, 528, 1, 1), (32, 720, 17, 17), (32, 30, 1, 1), (32, 720, 1, 1), (32, 720, 9, 9), (32, 1248, 9, 9), (32, 52, 1, 1), (32, 1248, 1, 1), (32, 2112, 9, 9), (32, 88, 1, 1), (32, 2112, 1, 1), (32, 1408, 9, 9)]], {}, 31],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 32, 130, 130), (32, 8, 1, 1), (32, 32, 130, 130), (32, 16, 130, 130), (32, 4, 1, 1), (32, 16, 130, 130), (32, 96, 130, 130), (32, 96, 65, 65), (32, 96, 65, 65), (32, 144, 65, 65), (32, 6, 1, 1), (32, 144, 65, 65), (32, 144, 33, 33), (32, 144, 33, 33), (32, 288, 33, 33), (32, 12, 1, 1), (32, 288, 33, 33), (32, 288, 17, 17), (32, 288, 17, 17), (32, 528, 17, 17), (32, 22, 1, 1), (32, 528, 17, 17), (32, 720, 17, 17), (32, 30, 1, 1), (32, 720, 17, 17), (32, 720, 9, 9), (32, 720, 9, 9), (32, 1248, 9, 9), (32, 52, 1, 1), (32, 1248, 9, 9), (32, 2112, 9, 9), (32, 88, 1, 1), (32, 2112, 9, 9), (32, 1408, 9, 9)], [(32, 32, 130, 130), (32, 8, 1, 1), (32, 32, 1, 1), (32, 16, 130, 130), (32, 4, 1, 1), (32, 16, 1, 1), (32, 96, 130, 130), (32, 96, 65, 65), (32, 96, 1, 1), (32, 144, 65, 65), (32, 6, 1, 1), (32, 144, 1, 1), (32, 144, 33, 33), (32, 144, 1, 1), (32, 288, 33, 33), (32, 12, 1, 1), (32, 288, 1, 1), (32, 288, 17, 17), (32, 288, 1, 1), (32, 528, 17, 17), (32, 22, 1, 1), (32, 528, 1, 1), (32, 720, 17, 17), (32, 30, 1, 1), (32, 720, 1, 1), (32, 720, 9, 9), (32, 720, 1, 1), (32, 1248, 9, 9), (32, 52, 1, 1), (32, 1248, 1, 1), (32, 2112, 9, 9), (32, 88, 1, 1), (32, 2112, 1, 1), (32, 1408, 9, 9)]], {}, 34],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 32, 130, 130), (32, 16, 130, 130), (32, 96, 65, 65), (32, 144, 65, 65), (32, 144, 33, 33), (32, 288, 33, 33), (32, 288, 17, 17), (32, 528, 17, 17), (32, 720, 17, 17), (32, 720, 9, 9), (32, 1248, 9, 9), (32, 2112, 9, 9), (32, 1408, 9, 9)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (1, 1)]], {}, 13],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 32, 1, 1), (32, 8, 1, 1), (32, 16, 1, 1), (32, 4, 1, 1), (32, 96, 1, 1), (32, 4, 1, 1), (32, 144, 1, 1), (32, 6, 1, 1), (32, 288, 1, 1), (32, 12, 1, 1), (32, 528, 1, 1), (32, 22, 1, 1), (32, 720, 1, 1), (32, 30, 1, 1), (32, 1248, 1, 1), (32, 52, 1, 1), (32, 2112, 1, 1), (32, 88, 1, 1)], [(8, 32, 1, 1), (32, 8, 1, 1), (4, 16, 1, 1), (16, 4, 1, 1), (4, 96, 1, 1), (96, 4, 1, 1), (6, 144, 1, 1), (144, 6, 1, 1), (12, 288, 1, 1), (288, 12, 1, 1), (22, 528, 1, 1), (528, 22, 1, 1), (30, 720, 1, 1), (720, 30, 1, 1), (52, 1248, 1, 1), (1248, 52, 1, 1), (88, 2112, 1, 1), (2112, 88, 1, 1)], [(8,), (32,), (4,), (16,), (4,), (96,), (6,), (144,), (12,), (288,), (22,), (528,), (30,), (720,), (52,), (1248,), (88,), (2112,)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 18],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 16, 130, 130), (32, 24, 65, 65), (32, 48, 33, 33), (32, 88, 17, 17), (32, 120, 17, 17), (32, 208, 9, 9), (32, 352, 9, 9)], [(32, 16, 130, 130), (32, 24, 65, 65), (32, 48, 33, 33), (32, 88, 17, 17), (32, 120, 17, 17), (32, 208, 9, 9), (32, 352, 9, 9)]], {}, 7],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 1408)], [(1000, 1408)], [(1000,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(32, 1000)], [(32,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [32]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32,), (32, 1, 3, 3), (8, 32, 1, 1), (8,), (32, 8, 1, 1), (16, 32, 1, 1), (16,), (16, 1, 3, 3), (4, 16, 1, 1), (4,), (16, 4, 1, 1), (16, 16, 1, 1), (96, 16, 1, 1), (96,), (96, 1, 3, 3), (4, 96, 1, 1), (96, 4, 1, 1), (24, 96, 1, 1), (24,), (144, 24, 1, 1), (144,), (144, 1, 3, 3), (6, 144, 1, 1), (6,), (144, 6, 1, 1), (24, 144, 1, 1), (144, 1, 5, 5), (48, 144, 1, 1), (48,), (288, 48, 1, 1), (288,), (288, 1, 5, 5), (12, 288, 1, 1), (12,), (288, 12, 1, 1), (48, 288, 1, 1), (288, 1, 3, 3), (88, 288, 1, 1), (88,), (528, 88, 1, 1), (528,), (528, 1, 3, 3), (22, 528, 1, 1), (22,), (528, 22, 1, 1), (88, 528, 1, 1), (528, 1, 5, 5), (120, 528, 1, 1), (120,), (720, 120, 1, 1), (720,), (720, 1, 5, 5), (30, 720, 1, 1), (30,), (720, 30, 1, 1), (120, 720, 1, 1), (208, 720, 1, 1), (208,), (1248, 208, 1, 1), (1248,), (1248, 1, 5, 5), (52, 1248, 1, 1), (52,), (1248, 52, 1, 1), (208, 1248, 1, 1), (1248, 1, 3, 3), (352, 1248, 1, 1), (352,), (2112, 352, 1, 1), (2112,), (2112, 1, 3, 3), (88, 2112, 1, 1), (2112, 88, 1, 1), (352, 2112, 1, 1), (1408, 352, 1, 1), (1408,), (1000, 1408), (1000,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.1, 'dampening': 0, 'nesterov': False}, 79],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
mobilenet_v2_8xb32_in1k_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7f74f9966618>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 224, 224), (32, 32, 112, 112), (32, 32, 112, 112), (32, 16, 112, 112), (32, 96, 112, 112), (32, 96, 56, 56), (32, 24, 56, 56), (32, 144, 56, 56), (32, 144, 56, 56), (32, 144, 56, 56), (32, 144, 28, 28), (32, 32, 28, 28), (32, 192, 28, 28), (32, 192, 28, 28), (32, 192, 28, 28), (32, 192, 14, 14), (32, 64, 14, 14), (32, 384, 14, 14), (32, 384, 14, 14), (32, 384, 14, 14), (32, 96, 14, 14), (32, 576, 14, 14), (32, 576, 14, 14), (32, 576, 14, 14), (32, 576, 7, 7), (32, 160, 7, 7), (32, 960, 7, 7), (32, 960, 7, 7), (32, 960, 7, 7), (32, 320, 7, 7)], [(32, 3, 3, 3), (32, 1, 3, 3), (16, 32, 1, 1), (96, 16, 1, 1), (96, 1, 3, 3), (24, 96, 1, 1), (144, 24, 1, 1), (144, 1, 3, 3), (24, 144, 1, 1), (144, 1, 3, 3), (32, 144, 1, 1), (192, 32, 1, 1), (192, 1, 3, 3), (32, 192, 1, 1), (192, 1, 3, 3), (64, 192, 1, 1), (384, 64, 1, 1), (384, 1, 3, 3), (64, 384, 1, 1), (96, 384, 1, 1), (576, 96, 1, 1), (576, 1, 3, 3), (96, 576, 1, 1), (576, 1, 3, 3), (160, 576, 1, 1), (960, 160, 1, 1), (960, 1, 3, 3), (160, 960, 1, 1), (320, 960, 1, 1), (1280, 320, 1, 1)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 32, 1, 1, 96, 1, 1, 144, 1, 144, 1, 1, 192, 1, 192, 1, 1, 384, 1, 1, 1, 576, 1, 576, 1, 1, 960, 1, 1, 1]], {}, 30],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 32, 112, 112), (32, 16, 112, 112), (32, 96, 112, 112), (32, 96, 56, 56), (32, 24, 56, 56), (32, 144, 56, 56), (32, 144, 28, 28), (32, 32, 28, 28), (32, 192, 28, 28), (32, 192, 14, 14), (32, 64, 14, 14), (32, 384, 14, 14), (32, 96, 14, 14), (32, 576, 14, 14), (32, 576, 7, 7), (32, 160, 7, 7), (32, 960, 7, 7), (32, 320, 7, 7), (32, 1280, 7, 7)], [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (32,), (192,), (192,), (64,), (384,), (96,), (576,), (576,), (160,), (960,), (320,), (1280,)], [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (32,), (192,), (192,), (64,), (384,), (96,), (576,), (576,), (160,), (960,), (320,), (1280,)], [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (32,), (192,), (192,), (64,), (384,), (96,), (576,), (576,), (160,), (960,), (320,), (1280,)], [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (32,), (192,), (192,), (64,), (384,), (96,), (576,), (576,), (160,), (960,), (320,), (1280,)], [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 19],
['hardtanh', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 32, 112, 112), (32, 96, 112, 112), (32, 96, 56, 56), (32, 144, 56, 56), (32, 144, 28, 28), (32, 192, 28, 28), (32, 192, 14, 14), (32, 384, 14, 14), (32, 576, 14, 14), (32, 576, 7, 7), (32, 960, 7, 7), (32, 1280, 7, 7)], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0], [True, True, True, True, True, True, True, True, True, True, True, True]], {}, 12],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 24, 56, 56), (32, 32, 28, 28), (32, 64, 14, 14), (32, 96, 14, 14), (32, 160, 7, 7)], [(32, 24, 56, 56), (32, 32, 28, 28), (32, 64, 14, 14), (32, 96, 14, 14), (32, 160, 7, 7)]], {}, 5],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 1280, 7, 7)], [(1, 1)]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 1280)], [(1000, 1280)], [(1000,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(32, 1000)], [(32,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [32]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32,), (32, 1, 3, 3), (16, 32, 1, 1), (16,), (96, 16, 1, 1), (96,), (96, 1, 3, 3), (24, 96, 1, 1), (24,), (144, 24, 1, 1), (144,), (144, 1, 3, 3), (24, 144, 1, 1), (32, 144, 1, 1), (192, 32, 1, 1), (192,), (192, 1, 3, 3), (32, 192, 1, 1), (64, 192, 1, 1), (64,), (384, 64, 1, 1), (384,), (384, 1, 3, 3), (64, 384, 1, 1), (96, 384, 1, 1), (576, 96, 1, 1), (576,), (576, 1, 3, 3), (96, 576, 1, 1), (160, 576, 1, 1), (160,), (960, 160, 1, 1), (960,), (960, 1, 3, 3), (160, 960, 1, 1), (320, 960, 1, 1), (320,), (1280, 320, 1, 1), (1280,), (1000, 1280), (1000,)]], {'weight_decay': 4e-05, 'momentum': 0.9, 'lr': 0.045, 'dampening': 0, 'nesterov': False}, 42],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
vgg16_8xb32_in1k_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7f968010d600>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 224, 224), (32, 64, 224, 224), (32, 64, 112, 112), (32, 128, 112, 112), (32, 128, 56, 56), (32, 256, 56, 56), (32, 256, 28, 28), (32, 512, 28, 28), (32, 512, 14, 14)], [(64, 3, 3, 3), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 3, 3)], [(64,), (64,), (128,), (128,), (256,), (256,), (512,), (512,), (512,)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 9],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 224, 224), (32, 128, 112, 112), (32, 256, 56, 56), (32, 512, 28, 28), (32, 512, 14, 14), (32, 4096)]], {'inplace': [True, True, True, True, True, True]}, 6],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 224, 224), (32, 128, 112, 112), (32, 256, 56, 56), (32, 512, 28, 28), (32, 512, 14, 14)], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [False, False, False, False, False], [False, False, False, False, False]], {}, 5],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 25088), (32, 4096), (32, 4096)], [(4096, 25088), (4096, 4096), (1000, 4096)], [(4096,), (4096,), (1000,)]], {}, 3],
['dropout', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 4096)], [0.5], [True], [False]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(32, 1000)], [(32,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [32]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 3, 3), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (4096, 25088), (4096,), (4096, 4096), (1000, 4096), (1000,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.01, 'dampening': 0, 'nesterov': False}, 17],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
shufflenet_v2_1x_16xb64_in1k_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7f51a67cb300>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3, 224, 224), (64, 24, 56, 56), (64, 24, 28, 28), (64, 24, 56, 56), (64, 58, 56, 56), (64, 58, 28, 28), (64, 58, 28, 28), (64, 116, 28, 28), (64, 116, 14, 14), (64, 116, 28, 28), (64, 116, 14, 14), (64, 232, 14, 14), (64, 232, 7, 7), (64, 232, 14, 14), (64, 232, 7, 7), (64, 464, 7, 7)], [(24, 3, 3, 3), (24, 1, 3, 3), (58, 24, 1, 1), (58, 24, 1, 1), (58, 1, 3, 3), (58, 58, 1, 1), (58, 1, 3, 3), (116, 1, 3, 3), (116, 116, 1, 1), (116, 116, 1, 1), (116, 1, 3, 3), (232, 1, 3, 3), (232, 232, 1, 1), (232, 232, 1, 1), (232, 1, 3, 3), (1024, 464, 1, 1)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (0, 0), (1, 1), (1, 1), (0, 0), (0, 0), (1, 1), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 24, 1, 1, 58, 1, 58, 116, 1, 1, 116, 232, 1, 1, 232, 1]], {}, 16],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 24, 112, 112), (64, 24, 28, 28), (64, 58, 28, 28), (64, 58, 56, 56), (64, 116, 14, 14), (64, 116, 28, 28), (64, 232, 7, 7), (64, 232, 14, 14), (64, 1024, 7, 7)], [(24,), (24,), (58,), (58,), (116,), (116,), (232,), (232,), (1024,)], [(24,), (24,), (58,), (58,), (116,), (116,), (232,), (232,), (1024,)], [(24,), (24,), (58,), (58,), (116,), (116,), (232,), (232,), (1024,)], [(24,), (24,), (58,), (58,), (116,), (116,), (232,), (232,), (1024,)], [True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 9],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 24, 112, 112), (64, 58, 28, 28), (64, 58, 56, 56), (64, 116, 14, 14), (64, 116, 28, 28), (64, 232, 7, 7), (64, 232, 14, 14), (64, 1024, 7, 7)]], {'inplace': [True, True, True, True, True, True, True, True]}, 8],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 24, 112, 112)], [3], [2], [1], [1], [False], [False]], {}, 1],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((64, 58, 28, 28), (64, 58, 28, 28)), ((64, 116, 14, 14), (64, 116, 14, 14)), ((64, 232, 7, 7), (64, 232, 7, 7))]], {'dim': [1, 1, 1]}, 3],
['transpose', 'torch', ['torch.cuda.FloatTensor'], [[(64, 2, 58, 28, 28), (64, 2, 116, 14, 14), (64, 2, 232, 7, 7)], [1, 1, 1], [2, 2, 2]], {}, 3],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 1024, 7, 7)], [(1, 1)]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 1024)], [(1000, 1024)], [(1000,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(64, 1000)], [(64,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [64]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(24, 3, 3, 3), (24, 1, 3, 3), (58, 24, 1, 1), (58, 1, 3, 3), (58, 58, 1, 1), (116, 1, 3, 3), (116, 116, 1, 1), (232, 1, 3, 3), (232, 232, 1, 1), (1024, 464, 1, 1), (1000, 1024), (1000,)]], {'weight_decay': 4e-05, 'momentum': 0.9, 'lr': 0.05, 'dampening': 0, 'nesterov': False}, 12],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(24,), (58,), (116,), (232,), (1024,)]], {'weight_decay': 0.0, 'momentum': 0.9, 'lr': 0.05, 'dampening': 0, 'nesterov': False}, 5],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
repvgg_A0_4xb64_coslr_120e_in1k_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7f2130643600>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3, 224, 224), (64, 3, 224, 224), (64, 48, 112, 112), (64, 48, 112, 112), (64, 48, 56, 56), (64, 48, 56, 56), (64, 48, 56, 56), (64, 48, 56, 56), (64, 96, 28, 28), (64, 96, 28, 28), (64, 96, 28, 28), (64, 96, 28, 28), (64, 192, 14, 14), (64, 192, 14, 14), (64, 192, 14, 14), (64, 192, 14, 14)], [(48, 3, 3, 3), (48, 3, 1, 1), (48, 48, 3, 3), (48, 48, 1, 1), (48, 48, 3, 3), (48, 48, 1, 1), (96, 48, 3, 3), (96, 48, 1, 1), (96, 96, 3, 3), (96, 96, 1, 1), (192, 96, 3, 3), (192, 96, 1, 1), (192, 192, 3, 3), (192, 192, 1, 1), (1280, 192, 3, 3), (1280, 192, 1, 1)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (2, 2), (2, 2), (2, 2), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (2, 2), (2, 2)], [(1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 16],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 48, 112, 112), (64, 48, 56, 56), (64, 96, 28, 28), (64, 192, 14, 14), (64, 1280, 7, 7)], [(48,), (48,), (96,), (192,), (1280,)], [(48,), (48,), (96,), (192,), (1280,)], [(48,), (48,), (96,), (192,), (1280,)], [(48,), (48,), (96,), (192,), (1280,)], [True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 5],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 48, 112, 112), (64, 48, 56, 56), (64, 96, 28, 28), (64, 192, 14, 14), (64, 1280, 7, 7)], [(64, 48, 112, 112), (64, 48, 56, 56), (64, 96, 28, 28), (64, 192, 14, 14), (64, 1280, 7, 7)]], {}, 5],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 48, 112, 112), (64, 48, 56, 56), (64, 96, 28, 28), (64, 192, 14, 14), (64, 1280, 7, 7)], [0, 0, 0, 0, 0]], {}, 5],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 48, 112, 112), (64, 48, 56, 56), (64, 96, 28, 28), (64, 192, 14, 14), (64, 1280, 7, 7)]], {'inplace': [False, False, False, False, False]}, 5],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 1280, 7, 7)], [(1, 1)]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 1280)], [(1000, 1280)], [(1000,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(64, 1000)], [(64,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [64]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(48, 3, 3, 3), (48,), (48, 3, 1, 1), (48, 48, 3, 3), (48, 48, 1, 1), (96, 48, 3, 3), (96,), (96, 48, 1, 1), (96, 96, 3, 3), (96, 96, 1, 1), (192, 96, 3, 3), (192,), (192, 96, 1, 1), (192, 192, 3, 3), (192, 192, 1, 1), (1280, 192, 3, 3), (1280,), (1280, 192, 1, 1), (1000, 1280), (1000,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.1, 'dampening': 0, 'nesterov': False}, 20],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
densenet121_4xb256_in1k_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7fd411bcdaf8>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(256, 3, 224, 224), (256, 64, 56, 56), (256, 128, 56, 56), (256, 96, 56, 56), (256, 128, 56, 56), (256, 160, 56, 56), (256, 192, 56, 56), (256, 224, 56, 56), (256, 256, 56, 56), (256, 128, 28, 28), (256, 128, 28, 28), (256, 160, 28, 28), (256, 192, 28, 28), (256, 224, 28, 28), (256, 256, 28, 28), (256, 288, 28, 28), (256, 320, 28, 28), (256, 352, 28, 28), (256, 384, 28, 28), (256, 416, 28, 28), (256, 448, 28, 28), (256, 480, 28, 28), (256, 512, 28, 28), (256, 256, 14, 14), (256, 128, 14, 14), (256, 288, 14, 14), (256, 320, 14, 14), (256, 352, 14, 14), (256, 384, 14, 14), (256, 416, 14, 14), (256, 448, 14, 14), (256, 480, 14, 14), (256, 512, 14, 14), (256, 544, 14, 14), (256, 576, 14, 14), (256, 608, 14, 14), (256, 640, 14, 14), (256, 672, 14, 14), (256, 704, 14, 14), (256, 736, 14, 14), (256, 768, 14, 14), (256, 800, 14, 14), (256, 832, 14, 14), (256, 864, 14, 14), (256, 896, 14, 14), (256, 928, 14, 14), (256, 960, 14, 14), (256, 992, 14, 14), (256, 1024, 14, 14), (256, 512, 7, 7), (256, 128, 7, 7), (256, 544, 7, 7), (256, 576, 7, 7), (256, 608, 7, 7), (256, 640, 7, 7), (256, 672, 7, 7)], [(64, 3, 7, 7), (128, 64, 1, 1), (32, 128, 3, 3), (128, 96, 1, 1), (128, 128, 1, 1), (128, 160, 1, 1), (128, 192, 1, 1), (128, 224, 1, 1), (128, 256, 1, 1), (128, 128, 1, 1), (32, 128, 3, 3), (128, 160, 1, 1), (128, 192, 1, 1), (128, 224, 1, 1), (128, 256, 1, 1), (128, 288, 1, 1), (128, 320, 1, 1), (128, 352, 1, 1), (128, 384, 1, 1), (128, 416, 1, 1), (128, 448, 1, 1), (128, 480, 1, 1), (256, 512, 1, 1), (128, 256, 1, 1), (32, 128, 3, 3), (128, 288, 1, 1), (128, 320, 1, 1), (128, 352, 1, 1), (128, 384, 1, 1), (128, 416, 1, 1), (128, 448, 1, 1), (128, 480, 1, 1), (128, 512, 1, 1), (128, 544, 1, 1), (128, 576, 1, 1), (128, 608, 1, 1), (128, 640, 1, 1), (128, 672, 1, 1), (128, 704, 1, 1), (128, 736, 1, 1), (128, 768, 1, 1), (128, 800, 1, 1), (128, 832, 1, 1), (128, 864, 1, 1), (128, 896, 1, 1), (128, 928, 1, 1), (128, 960, 1, 1), (128, 992, 1, 1), (512, 1024, 1, 1), (128, 512, 1, 1), (32, 128, 3, 3), (128, 544, 1, 1), (128, 576, 1, 1), (128, 608, 1, 1), (128, 640, 1, 1), (128, 672, 1, 1)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 56],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(256, 64, 112, 112), (256, 64, 56, 56), (256, 128, 56, 56), (256, 96, 56, 56), (256, 160, 56, 56), (256, 192, 56, 56), (256, 224, 56, 56), (256, 256, 56, 56), (256, 128, 28, 28), (256, 160, 28, 28), (256, 192, 28, 28), (256, 224, 28, 28), (256, 256, 28, 28), (256, 288, 28, 28), (256, 320, 28, 28), (256, 352, 28, 28), (256, 384, 28, 28), (256, 416, 28, 28), (256, 448, 28, 28), (256, 480, 28, 28), (256, 512, 28, 28), (256, 256, 14, 14), (256, 128, 14, 14), (256, 288, 14, 14), (256, 320, 14, 14), (256, 352, 14, 14), (256, 384, 14, 14), (256, 416, 14, 14), (256, 448, 14, 14), (256, 480, 14, 14), (256, 512, 14, 14), (256, 544, 14, 14), (256, 576, 14, 14), (256, 608, 14, 14), (256, 640, 14, 14), (256, 672, 14, 14), (256, 704, 14, 14), (256, 736, 14, 14), (256, 768, 14, 14), (256, 800, 14, 14), (256, 832, 14, 14), (256, 864, 14, 14), (256, 896, 14, 14), (256, 928, 14, 14), (256, 960, 14, 14), (256, 992, 14, 14), (256, 1024, 14, 14), (256, 512, 7, 7), (256, 128, 7, 7), (256, 544, 7, 7), (256, 576, 7, 7), (256, 608, 7, 7), (256, 640, 7, 7), (256, 672, 7, 7), (256, 704, 7, 7)], [(64,), (64,), (128,), (96,), (160,), (192,), (224,), (256,), (128,), (160,), (192,), (224,), (256,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (256,), (128,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,), (512,), (128,), (544,), (576,), (608,), (640,), (672,), (704,)], [(64,), (64,), (128,), (96,), (160,), (192,), (224,), (256,), (128,), (160,), (192,), (224,), (256,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (256,), (128,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,), (512,), (128,), (544,), (576,), (608,), (640,), (672,), (704,)], [(64,), (64,), (128,), (96,), (160,), (192,), (224,), (256,), (128,), (160,), (192,), (224,), (256,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (256,), (128,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,), (512,), (128,), (544,), (576,), (608,), (640,), (672,), (704,)], [(64,), (64,), (128,), (96,), (160,), (192,), (224,), (256,), (128,), (160,), (192,), (224,), (256,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (256,), (128,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,), (512,), (128,), (544,), (576,), (608,), (640,), (672,), (704,)], [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 55],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(256, 64, 112, 112), (256, 64, 56, 56), (256, 128, 56, 56), (256, 96, 56, 56), (256, 160, 56, 56), (256, 192, 56, 56), (256, 224, 56, 56), (256, 256, 56, 56), (256, 128, 28, 28), (256, 160, 28, 28), (256, 192, 28, 28), (256, 224, 28, 28), (256, 256, 28, 28), (256, 288, 28, 28), (256, 320, 28, 28), (256, 352, 28, 28), (256, 384, 28, 28), (256, 416, 28, 28), (256, 448, 28, 28), (256, 480, 28, 28), (256, 512, 28, 28), (256, 256, 14, 14), (256, 128, 14, 14), (256, 288, 14, 14), (256, 320, 14, 14), (256, 352, 14, 14), (256, 384, 14, 14), (256, 416, 14, 14), (256, 448, 14, 14), (256, 480, 14, 14), (256, 512, 14, 14), (256, 544, 14, 14), (256, 576, 14, 14), (256, 608, 14, 14), (256, 640, 14, 14), (256, 672, 14, 14), (256, 704, 14, 14), (256, 736, 14, 14), (256, 768, 14, 14), (256, 800, 14, 14), (256, 832, 14, 14), (256, 864, 14, 14), (256, 896, 14, 14), (256, 928, 14, 14), (256, 960, 14, 14), (256, 992, 14, 14), (256, 1024, 14, 14), (256, 512, 7, 7), (256, 128, 7, 7), (256, 544, 7, 7), (256, 576, 7, 7), (256, 608, 7, 7), (256, 640, 7, 7), (256, 672, 7, 7), (256, 704, 7, 7)]], {'inplace': [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]}, 55],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(256, 64, 112, 112)], [3], [2], [1], [1], [False], [False]], {}, 1],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((256, 64, 56, 56),), ((256, 64, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 128, 28, 28),), ((256, 128, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 256, 14, 14),), ((256, 256, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 512, 7, 7),), ((256, 512, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7))], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 52],
['avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(256, 128, 56, 56), (256, 256, 28, 28), (256, 512, 14, 14)], [2, 2, 2], [2, 2, 2], [0, 0, 0], [False, False, False], [True, True, True], [None, None, None]], {}, 3],
]
vit_base_p16_pt_64xb64_in1k_224_config=[
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7fb76fc237f8>'}, 1],
['one_hot', 'torch.nn.functional', ['torch.cuda.LongTensor'], [[(64,)]], {'num_classes': 1000}, 1],
['randperm', 'torch', [], [[64]], {}, 1],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 3, 224, 224), (64, 3, 224, 224), ()], [4.184777508273928e-07, 0.9999995815222492, 1.0]], {}, 3],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3, 224, 224), (64, 1000), (64, 197, 768), (64, 197, 768)], [(64, 3, 224, 224), (64, 1000), (1, 197, 768), (64, 197, 768)]], {}, 4],
['rmul', 'torch.Tensor', ['torch.cuda.LongTensor'], [[(64, 1000), (64, 1000)], [4.184777508273928e-07, 0.9999995815222492]], {}, 2],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3, 224, 224)], [(768, 3, 16, 16)], [(768,)], [(16, 16)], [(0, 0)], [(1, 1)], [1]], {}, 1],
['transpose', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 768, 196), (64, 12, 197, 64), (64, 12, 197, 64)], [1, -2, 1], [2, -1, 2]], {}, 3],
['expand', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1, 1, 768)], [64], [-1], [-1]], {}, 1],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((64, 1, 768), (64, 196, 768))]], {'dim': 1}, 1],
['dropout', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 197, 768), (64, 12, 197, 197), (64, 197, 3072)], [0.1, 0.0, 0.1], [True, True, True], [False, False, False]], {}, 3],
['layer_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 197, 768)], [(768,)], [(768,)], [(768,)], [1e-06]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 197, 768), (64, 197, 768), (64, 197, 768), (64, 197, 3072), (64, 768), (64, 3072)], [(2304, 768), (768, 768), (3072, 768), (768, 3072), (3072, 768), (1000, 3072)], [(2304,), (768,), (3072,), (768,), (3072,), (1000,)]], {}, 6],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 197, 3, 12, 64)], [2], [0], [3], [1], [4]], {}, 1],
['matmul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 12, 197, 64), (64, 12, 197, 197)], [(64, 12, 64, 197), (64, 12, 197, 64)]], {}, 2],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 12, 197, 197), (64, 1000), ()], [0.125, 0.9090909090909091, 1.0]], {}, 3],
['gelu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 197, 3072)]], {}, 1],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 14, 14, 768)], [0], [3], [1], [2]], {}, 1],
['tanh', 'torch', ['torch.cuda.FloatTensor'], [[(64, 3072)]], {}, 1],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1000)], [9.090909090909092e-05]], {}, 1],
['neg', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1000)]], {}, 1],
['log_softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 1000)]], {'dim': -1}, 1],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 1000)], [(64, 1000)]], {}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1000)]], {'dim': -1}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [64]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['norm', 'torch', ['torch.cuda.FloatTensor'], [[(1, 1, 768), (1, 197, 768), (768, 3, 16, 16), (768,), (2304, 768), (2304,), (768, 768), (3072, 768), (3072,), (768, 3072), (1000, 3072), (1000,), (154,)], [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]], {}, 13],
['stack', 'torch', ['torch.cuda.FloatTensor{}, 1],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1e-06]], {}, 1],
['rtruediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['reciprocal', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['clamp', 'torch', ['torch.cuda.FloatTensor'], [[()]], {'max': 1.0}, 1],
['mul_', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(1, 1, 768), (1, 197, 768), (768, 3, 16, 16), (768,), (2304, 768), (2304,), (768, 768), (3072, 768), (3072,), (768, 3072), (1000, 3072), (1000,)], [(), (), (), (), (), (), (), (), (), (), (), ()]], {}, 12],
['adamw', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(1, 1, 768), (1, 197, 768)]], {'amsgrad': False, 'beta1': 0.9, 'beta2': 0.999, 'lr': 2.9999999999996695e-07, 'weight_decay': 0.0, 'eps': 1e-08}, 2],
['adamw', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(768, 3, 16, 16), (768,), (2304, 768), (2304,), (768, 768), (3072, 768), (3072,), (768, 3072), (1000, 3072), (1000,)]], {'amsgrad': False, 'beta1': 0.9, 'beta2': 0.999, 'lr': 2.9999999999996695e-07, 'weight_decay': 0.3, 'eps': 1e-08}, 10],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
]
densenet121_4xb256_in1k_config=[
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (128, 64, 1, 1), (128,), (32, 128, 3, 3), (96,), (128, 96, 1, 1), (128, 128, 1, 1), (160,), (128, 160, 1, 1), (192,), (128, 192, 1, 1), (224,), (128, 224, 1, 1), (256,), (128, 256, 1, 1), (288,), (128, 288, 1, 1), (320,), (128, 320, 1, 1), (352,), (128, 352, 1, 1), (384,), (128, 384, 1, 1), (416,), (128, 416, 1, 1), (448,), (128, 448, 1, 1), (480,), (128, 480, 1, 1), (512,), (128, 512, 1, 1), (544,), (128, 544, 1, 1), (576,), (128, 576, 1, 1), (608,), (128, 608, 1, 1), (640,), (128, 640, 1, 1), (672,), (128, 672, 1, 1), (704,), (128, 704, 1, 1), (736,), (128, 736, 1, 1), (768,), (128, 768, 1, 1), (800,), (128, 800, 1, 1), (832,), (128, 832, 1, 1), (864,), (128, 864, 1, 1), (896,), (128, 896, 1, 1), (928,), (128, 928, 1, 1), (960,), (128, 960, 1, 1), (992,), (128, 992, 1, 1), (256, 512, 1, 1), (1024,), (512, 1024, 1, 1), (1000, 1024), (1000,), ()]], {}, 68],
['normal_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1000, 1024)], [0], [0.01]], {}, 1],
['fill_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1000,)], [0]], {}, 1],
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7fdcbde5c6a8>'}, 1],
['flip', 'torch.Tensor', ['torch.cuda.ByteTensor'], [[(256, 3, 224, 224)], [(1,)]], {}, 1],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(256, 3, 224, 224)], [(3, 1, 1)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(256, 3, 224, 224)], [(3, 1, 1)]], {}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(256, 3, 224, 224), (256, 64, 56, 56), (256, 128, 56, 56), (256, 96, 56, 56), (256, 128, 56, 56), (256, 160, 56, 56), (256, 192, 56, 56), (256, 224, 56, 56), (256, 256, 56, 56), (256, 128, 28, 28), (256, 128, 28, 28), (256, 160, 28, 28), (256, 192, 28, 28), (256, 224, 28, 28), (256, 256, 28, 28), (256, 288, 28, 28), (256, 320, 28, 28), (256, 352, 28, 28), (256, 384, 28, 28), (256, 416, 28, 28), (256, 448, 28, 28), (256, 480, 28, 28), (256, 512, 28, 28), (256, 256, 14, 14), (256, 128, 14, 14), (256, 288, 14, 14), (256, 320, 14, 14), (256, 352, 14, 14), (256, 384, 14, 14), (256, 416, 14, 14), (256, 448, 14, 14), (256, 480, 14, 14), (256, 512, 14, 14), (256, 544, 14, 14), (256, 576, 14, 14), (256, 608, 14, 14), (256, 640, 14, 14), (256, 672, 14, 14), (256, 704, 14, 14), (256, 736, 14, 14), (256, 768, 14, 14), (256, 800, 14, 14), (256, 832, 14, 14), (256, 864, 14, 14), (256, 896, 14, 14), (256, 928, 14, 14), (256, 960, 14, 14), (256, 992, 14, 14), (256, 1024, 14, 14), (256, 512, 7, 7), (256, 128, 7, 7), (256, 544, 7, 7), (256, 576, 7, 7), (256, 608, 7, 7), (256, 640, 7, 7), (256, 672, 7, 7), (256, 704, 7, 7), (256, 736, 7, 7), (256, 768, 7, 7), (256, 800, 7, 7), (256, 832, 7, 7), (256, 864, 7, 7), (256, 896, 7, 7), (256, 928, 7, 7), (256, 960, 7, 7), (256, 992, 7, 7)], [(64, 3, 7, 7), (128, 64, 1, 1), (32, 128, 3, 3), (128, 96, 1, 1), (128, 128, 1, 1), (128, 160, 1, 1), (128, 192, 1, 1), (128, 224, 1, 1), (128, 256, 1, 1), (128, 128, 1, 1), (32, 128, 3, 3), (128, 160, 1, 1), (128, 192, 1, 1), (128, 224, 1, 1), (128, 256, 1, 1), (128, 288, 1, 1), (128, 320, 1, 1), (128, 352, 1, 1), (128, 384, 1, 1), (128, 416, 1, 1), (128, 448, 1, 1), (128, 480, 1, 1), (256, 512, 1, 1), (128, 256, 1, 1), (32, 128, 3, 3), (128, 288, 1, 1), (128, 320, 1, 1), (128, 352, 1, 1), (128, 384, 1, 1), (128, 416, 1, 1), (128, 448, 1, 1), (128, 480, 1, 1), (128, 512, 1, 1), (128, 544, 1, 1), (128, 576, 1, 1), (128, 608, 1, 1), (128, 640, 1, 1), (128, 672, 1, 1), (128, 704, 1, 1), (128, 736, 1, 1), (128, 768, 1, 1), (128, 800, 1, 1), (128, 832, 1, 1), (128, 864, 1, 1), (128, 896, 1, 1), (128, 928, 1, 1), (128, 960, 1, 1), (128, 992, 1, 1), (512, 1024, 1, 1), (128, 512, 1, 1), (32, 128, 3, 3), (128, 544, 1, 1), (128, 576, 1, 1), (128, 608, 1, 1), (128, 640, 1, 1), (128, 672, 1, 1), (128, 704, 1, 1), (128, 736, 1, 1), (128, 768, 1, 1), (128, 800, 1, 1), (128, 832, 1, 1), (128, 864, 1, 1), (128, 896, 1, 1), (128, 928, 1, 1), (128, 960, 1, 1), (128, 992, 1, 1)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 66],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(256, 64, 112, 112), (256, 64, 56, 56), (256, 128, 56, 56), (256, 96, 56, 56), (256, 160, 56, 56), (256, 192, 56, 56), (256, 224, 56, 56), (256, 256, 56, 56), (256, 128, 28, 28), (256, 160, 28, 28), (256, 192, 28, 28), (256, 224, 28, 28), (256, 256, 28, 28), (256, 288, 28, 28), (256, 320, 28, 28), (256, 352, 28, 28), (256, 384, 28, 28), (256, 416, 28, 28), (256, 448, 28, 28), (256, 480, 28, 28), (256, 512, 28, 28), (256, 256, 14, 14), (256, 128, 14, 14), (256, 288, 14, 14), (256, 320, 14, 14), (256, 352, 14, 14), (256, 384, 14, 14), (256, 416, 14, 14), (256, 448, 14, 14), (256, 480, 14, 14), (256, 512, 14, 14), (256, 544, 14, 14), (256, 576, 14, 14), (256, 608, 14, 14), (256, 640, 14, 14), (256, 672, 14, 14), (256, 704, 14, 14), (256, 736, 14, 14), (256, 768, 14, 14), (256, 800, 14, 14), (256, 832, 14, 14), (256, 864, 14, 14), (256, 896, 14, 14), (256, 928, 14, 14), (256, 960, 14, 14), (256, 992, 14, 14), (256, 1024, 14, 14), (256, 512, 7, 7), (256, 128, 7, 7), (256, 544, 7, 7), (256, 576, 7, 7), (256, 608, 7, 7), (256, 640, 7, 7), (256, 672, 7, 7), (256, 704, 7, 7), (256, 736, 7, 7), (256, 768, 7, 7), (256, 800, 7, 7), (256, 832, 7, 7), (256, 864, 7, 7), (256, 896, 7, 7), (256, 928, 7, 7), (256, 960, 7, 7), (256, 992, 7, 7), (256, 1024, 7, 7)], [(64,), (64,), (128,), (96,), (160,), (192,), (224,), (256,), (128,), (160,), (192,), (224,), (256,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (256,), (128,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,), (512,), (128,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,)], [(64,), (64,), (128,), (96,), (160,), (192,), (224,), (256,), (128,), (160,), (192,), (224,), (256,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (256,), (128,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,), (512,), (128,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,)], [(64,), (64,), (128,), (96,), (160,), (192,), (224,), (256,), (128,), (160,), (192,), (224,), (256,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (256,), (128,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,), (512,), (128,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,)], [(64,), (64,), (128,), (96,), (160,), (192,), (224,), (256,), (128,), (160,), (192,), (224,), (256,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (256,), (128,), (288,), (320,), (352,), (384,), (416,), (448,), (480,), (512,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,), (512,), (128,), (544,), (576,), (608,), (640,), (672,), (704,), (736,), (768,), (800,), (832,), (864,), (896,), (928,), (960,), (992,), (1024,)], [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 65],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(256, 64, 112, 112), (256, 64, 56, 56), (256, 128, 56, 56), (256, 96, 56, 56), (256, 160, 56, 56), (256, 192, 56, 56), (256, 224, 56, 56), (256, 256, 56, 56), (256, 128, 28, 28), (256, 160, 28, 28), (256, 192, 28, 28), (256, 224, 28, 28), (256, 256, 28, 28), (256, 288, 28, 28), (256, 320, 28, 28), (256, 352, 28, 28), (256, 384, 28, 28), (256, 416, 28, 28), (256, 448, 28, 28), (256, 480, 28, 28), (256, 512, 28, 28), (256, 256, 14, 14), (256, 128, 14, 14), (256, 288, 14, 14), (256, 320, 14, 14), (256, 352, 14, 14), (256, 384, 14, 14), (256, 416, 14, 14), (256, 448, 14, 14), (256, 480, 14, 14), (256, 512, 14, 14), (256, 544, 14, 14), (256, 576, 14, 14), (256, 608, 14, 14), (256, 640, 14, 14), (256, 672, 14, 14), (256, 704, 14, 14), (256, 736, 14, 14), (256, 768, 14, 14), (256, 800, 14, 14), (256, 832, 14, 14), (256, 864, 14, 14), (256, 896, 14, 14), (256, 928, 14, 14), (256, 960, 14, 14), (256, 992, 14, 14), (256, 1024, 14, 14), (256, 512, 7, 7), (256, 128, 7, 7), (256, 544, 7, 7), (256, 576, 7, 7), (256, 608, 7, 7), (256, 640, 7, 7), (256, 672, 7, 7), (256, 704, 7, 7), (256, 736, 7, 7), (256, 768, 7, 7), (256, 800, 7, 7), (256, 832, 7, 7), (256, 864, 7, 7), (256, 896, 7, 7), (256, 928, 7, 7), (256, 960, 7, 7), (256, 992, 7, 7), (256, 1024, 7, 7)]], {'inplace': [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]}, 65],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(256, 64, 112, 112)], [3], [2], [1], [1], [False], [False]], {}, 1],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((256, 64, 56, 56),), ((256, 64, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 64, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56), (256, 32, 56, 56)), ((256, 128, 28, 28),), ((256, 128, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 128, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28), (256, 32, 28, 28)), ((256, 256, 14, 14),), ((256, 256, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 256, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14), (256, 32, 14, 14)), ((256, 512, 7, 7),), ((256, 512, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7)), ((256, 512, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7), (256, 32, 7, 7))], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 62],
['avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(256, 128, 56, 56), (256, 256, 28, 28), (256, 512, 14, 14)], [2, 2, 2], [2, 2, 2], [0, 0, 0], [False, False, False], [True, True, True], [None, None, None]], {}, 3],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(256, 1024, 7, 7)], [(1, 1)]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(256, 1024)], [(1000, 1024)], [(1000,)]], {}, 1],
['cat', 'torch', ['torch.cuda.LongTensor{}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(256, 1000)], [(256,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(256,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(), ()], [256, 1]], {}, 2],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (128, 64, 1, 1), (128,), (32, 128, 3, 3), (96,), (128, 96, 1, 1), (128, 128, 1, 1), (160,), (128, 160, 1, 1), (192,), (128, 192, 1, 1), (224,), (128, 224, 1, 1), (256,), (128, 256, 1, 1), (288,), (128, 288, 1, 1), (320,), (128, 320, 1, 1), (352,), (128, 352, 1, 1), (384,), (128, 384, 1, 1), (416,), (128, 416, 1, 1), (448,), (128, 448, 1, 1), (480,), (128, 480, 1, 1), (512,), (128, 512, 1, 1), (544,), (128, 544, 1, 1), (576,), (128, 576, 1, 1), (608,), (128, 608, 1, 1), (640,), (128, 640, 1, 1), (672,), (128, 672, 1, 1), (704,), (128, 704, 1, 1), (736,), (128, 736, 1, 1), (768,), (128, 768, 1, 1), (800,), (128, 800, 1, 1), (832,), (128, 832, 1, 1), (864,), (128, 864, 1, 1), (896,), (128, 896, 1, 1), (928,), (128, 928, 1, 1), (960,), (128, 960, 1, 1), (992,), (128, 992, 1, 1), (256, 512, 1, 1), (1024,), (512, 1024, 1, 1), (1000, 1024), (1000,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.1, 'dampening': 0, 'nesterov': False}, 67],
['arange', 'torch', [], [[50000]], {}, 1],
]
inception_v3_8xb32_in1k_config=[
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32,), (32, 32, 3, 3), (64, 32, 3, 3), (64,), (80, 64, 1, 1), (80,), (192, 80, 3, 3), (192,), (64, 192, 1, 1), (48, 192, 1, 1), (48,), (64, 48, 5, 5), (96, 64, 3, 3), (96,), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (384,), (192, 768, 1, 1), (128, 768, 1, 1), (128,), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160,), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (320,), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (448,), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048), (1000,), ()]], {}, 56],
['uniform_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], {}, 43],
['erfinv_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)]], {}, 43],
['mul_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)], [0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953]], {}, 43],
['add_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], {}, 43],
['clamp_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)]], {'min': [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2], 'max': [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}, 43],
['fill_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1000,), (32,), (32,), (64,), (64,), (80,), (80,), (192,), (192,), (48,), (48,), (96,), (96,), (384,), (384,), (128,), (128,), (160,), (160,), (320,), (320,), (448,), (448,)], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]], {}, 23],
['randperm', 'torch', [], [[1281167]], {'generator': '<torch._C.Generator object at 0x7f3c9c67dd50>'}, 1],
['flip', 'torch.Tensor', ['torch.cuda.ByteTensor'], [[(32, 3, 299, 299)], [(1,)]], {}, 1],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 299, 299)], [(3, 1, 1)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 299, 299)], [(3, 1, 1)]], {}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 299, 299), (32, 32, 149, 149), (32, 32, 147, 147), (32, 64, 73, 73), (32, 80, 73, 73), (32, 192, 35, 35), (32, 192, 35, 35), (32, 48, 35, 35), (32, 64, 35, 35), (32, 96, 35, 35), (32, 192, 35, 35), (32, 256, 35, 35), (32, 256, 35, 35), (32, 288, 35, 35), (32, 288, 35, 35), (32, 288, 35, 35), (32, 96, 35, 35), (32, 768, 17, 17), (32, 768, 17, 17), (32, 128, 17, 17), (32, 128, 17, 17), (32, 128, 17, 17), (32, 128, 17, 17), (32, 768, 17, 17), (32, 160, 17, 17), (32, 160, 17, 17), (32, 160, 17, 17), (32, 160, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17), (32, 1280, 8, 8), (32, 1280, 8, 8), (32, 384, 8, 8), (32, 384, 8, 8), (32, 1280, 8, 8), (32, 448, 8, 8), (32, 1280, 8, 8), (32, 2048, 8, 8), (32, 2048, 8, 8), (32, 2048, 8, 8), (32, 2048, 8, 8)], [(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (96, 96, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (2, 2), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 3), (3, 0), (3, 0), (0, 3), (0, 0), (0, 3), (3, 0), (3, 0), (0, 3), (0, 3), (3, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 1), (1, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 43],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 32, 149, 149), (32, 32, 147, 147), (32, 64, 147, 147), (32, 80, 73, 73), (32, 192, 71, 71), (32, 64, 35, 35), (32, 48, 35, 35), (32, 96, 35, 35), (32, 32, 35, 35), (32, 384, 17, 17), (32, 96, 17, 17), (32, 192, 17, 17), (32, 128, 17, 17), (32, 160, 17, 17), (32, 320, 8, 8), (32, 192, 8, 8), (32, 384, 8, 8), (32, 448, 8, 8)], [(32,), (32,), (64,), (80,), (192,), (64,), (48,), (96,), (32,), (384,), (96,), (192,), (128,), (160,), (320,), (192,), (384,), (448,)], [(32,), (32,), (64,), (80,), (192,), (64,), (48,), (96,), (32,), (384,), (96,), (192,), (128,), (160,), (320,), (192,), (384,), (448,)], [(32,), (32,), (64,), (80,), (192,), (64,), (48,), (96,), (32,), (384,), (96,), (192,), (128,), (160,), (320,), (192,), (384,), (448,)], [(32,), (32,), (64,), (80,), (192,), (64,), (48,), (96,), (32,), (384,), (96,), (192,), (128,), (160,), (320,), (192,), (384,), (448,)], [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001]], {}, 18],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 32, 149, 149), (32, 32, 147, 147), (32, 64, 147, 147), (32, 80, 73, 73), (32, 192, 71, 71), (32, 64, 35, 35), (32, 48, 35, 35), (32, 96, 35, 35), (32, 32, 35, 35), (32, 384, 17, 17), (32, 96, 17, 17), (32, 192, 17, 17), (32, 128, 17, 17), (32, 160, 17, 17), (32, 320, 8, 8), (32, 192, 8, 8), (32, 384, 8, 8), (32, 448, 8, 8)]], {'inplace': [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]}, 18],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 147, 147), (32, 192, 71, 71), (32, 288, 35, 35), (32, 768, 17, 17)], [3, 3, 3, 3], [2, 2, 2, 2], [0, 0, 0, 0], [1, 1, 1, 1], [False, False, False, False], [False, False, False, False]], {}, 4],
['avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 192, 35, 35), (32, 256, 35, 35), (32, 288, 35, 35), (32, 768, 17, 17), (32, 1280, 8, 8), (32, 2048, 8, 8)], [3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [False, False, False, False, False, False], [True, True, True, True, True, True], [None, None, None, None, None, None]], {}, 6],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((32, 64, 35, 35), (32, 64, 35, 35), (32, 96, 35, 35), (32, 32, 35, 35)), ((32, 64, 35, 35), (32, 64, 35, 35), (32, 96, 35, 35), (32, 64, 35, 35)), ((32, 384, 17, 17), (32, 96, 17, 17), (32, 288, 17, 17)), ((32, 192, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17)), ((32, 320, 8, 8), (32, 192, 8, 8), (32, 768, 8, 8)), ((32, 384, 8, 8), (32, 384, 8, 8)), ((32, 320, 8, 8), (32, 768, 8, 8), (32, 768, 8, 8), (32, 192, 8, 8))], [1, 1, 1, 1, 1, 1, 1]], {}, 7],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 2048, 8, 8)], [(1, 1)]], {}, 1],
['dropout', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 2048, 1, 1)], [0.5], [True], [False]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 2048)], [(1000, 2048)], [(1000,)]], {}, 1],
['cat', 'torch', ['torch.cuda.LongTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(32, 1000)], [(32,)]], {'weight': None, 'reduction': 'none'}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32,)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(), ()], [32, 1]], {}, 2],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(32, 3, 3, 3), (32,), (32, 32, 3, 3), (64, 32, 3, 3), (64,), (80, 64, 1, 1), (80,), (192, 80, 3, 3), (192,), (64, 192, 1, 1), (48, 192, 1, 1), (48,), (64, 48, 5, 5), (96, 64, 3, 3), (96,), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (384,), (192, 768, 1, 1), (128, 768, 1, 1), (128,), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160,), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (320,), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (448,), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048), (1000,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.1, 'dampening': 0, 'nesterov': False}, 55],
['arange', 'torch', [], [[50000]], {}, 1],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 1000), (16, 1000)]], {'dim': [1, 1]}, 2],
['argmax', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32, 1000), (16, 1000)]], {'dim': [1, 1], 'keepdim': [True, True]}, 2],
]
