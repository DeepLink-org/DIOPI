import torch
stgcn_80e_ntu60_xsub_keypoint_config=[
['get_rank', 'torch.distributed', [], [], {}, 5],
['get_world_size', 'torch.distributed', [], [], {}, 10028],
['randperm', 'torch', [], [[40090]], {'generator': '<torch._C.Generator object at 0x7f9c9f03f9f0>'}, 1],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 3, 300, 17, 2), (16, 2, 17, 3, 300), (10, 3, 300, 17, 2), (10, 2, 17, 3, 300)], [0, 0, 0, 0], [4, 1, 4, 1], [3, 3, 3, 3], [1, 4, 1, 4], [2, 2, 2, 2]], {}, 4],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 51, 300), (32, 64, 300, 17), (32, 128, 150, 17), (32, 128, 300, 17), (32, 256, 75, 17), (32, 256, 150, 17), (20, 51, 300), (20, 64, 300, 17), (20, 128, 150, 17), (20, 128, 300, 17), (20, 256, 75, 17), (20, 256, 150, 17)], [(51,), (64,), (128,), (128,), (256,), (256,), (51,), (64,), (128,), (128,), (256,), (256,)], [(51,), (64,), (128,), (128,), (256,), (256,), (51,), (64,), (128,), (128,), (256,), (256,)], [(51,), (64,), (128,), (128,), (256,), (256,), (51,), (64,), (128,), (128,), (256,), (256,)], [(51,), (64,), (128,), (128,), (256,), (256,), (51,), (64,), (128,), (128,), (256,), (256,)], [True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 12],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(3, 17, 17)], [(3, 17, 17)]], {}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 3, 300, 17), (32, 64, 300, 17), (32, 64, 300, 17), (32, 64, 300, 17), (32, 64, 300, 17), (32, 128, 300, 17), (32, 128, 150, 17), (32, 128, 150, 17), (32, 128, 150, 17), (32, 128, 150, 17), (32, 256, 150, 17), (32, 256, 75, 17), (32, 256, 75, 17), (16, 256, 1, 1), (20, 3, 300, 17), (20, 64, 300, 17), (20, 64, 300, 17), (20, 64, 300, 17), (20, 64, 300, 17), (20, 128, 300, 17), (20, 128, 150, 17), (20, 128, 150, 17), (20, 128, 150, 17), (20, 128, 150, 17), (20, 256, 150, 17), (20, 256, 75, 17), (20, 256, 75, 17), (10, 256, 1, 1)], [(192, 3, 1, 1), (64, 64, 9, 1), (192, 64, 1, 1), (128, 64, 1, 1), (384, 64, 1, 1), (128, 128, 9, 1), (384, 128, 1, 1), (128, 128, 9, 1), (256, 128, 1, 1), (768, 128, 1, 1), (256, 256, 9, 1), (768, 256, 1, 1), (256, 256, 9, 1), (60, 256, 1, 1), (192, 3, 1, 1), (64, 64, 9, 1), (192, 64, 1, 1), (128, 64, 1, 1), (384, 64, 1, 1), (128, 128, 9, 1), (384, 128, 1, 1), (128, 128, 9, 1), (256, 128, 1, 1), (768, 128, 1, 1), (256, 256, 9, 1), (768, 256, 1, 1), (256, 256, 9, 1), (60, 256, 1, 1)], [(192,), (64,), (192,), (128,), (384,), (128,), (384,), (128,), (256,), (768,), (256,), (768,), (256,), (60,), (192,), (64,), (192,), (128,), (384,), (128,), (384,), (128,), (256,), (768,), (256,), (768,), (256,), (60,)], [(1, 1), (1, 1), (1, 1), (2, 1), (1, 1), (2, 1), (1, 1), (1, 1), (2, 1), (1, 1), (2, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 1), (1, 1), (2, 1), (1, 1), (1, 1), (2, 1), (1, 1), (2, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (4, 0), (0, 0), (0, 0), (0, 0), (4, 0), (0, 0), (4, 0), (0, 0), (0, 0), (4, 0), (0, 0), (4, 0), (0, 0), (0, 0), (4, 0), (0, 0), (0, 0), (0, 0), (4, 0), (0, 0), (4, 0), (0, 0), (0, 0), (4, 0), (0, 0), (4, 0), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 28],
['einsum', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [['nkctv,kvw->nctw', 'nkctv,kvw->nctw', 'nkctv,kvw->nctw', 'nkctv,kvw->nctw', 'nkctv,kvw->nctw', 'nkctv,kvw->nctw', 'nkctv,kvw->nctw', 'nkctv,kvw->nctw', 'nkctv,kvw->nctw', 'nkctv,kvw->nctw'], [((32, 3, 64, 300, 17), (3, 17, 17)), ((32, 3, 128, 300, 17), (3, 17, 17)), ((32, 3, 128, 150, 17), (3, 17, 17)), ((32, 3, 256, 150, 17), (3, 17, 17)), ((32, 3, 256, 75, 17), (3, 17, 17)), ((20, 3, 64, 300, 17), (3, 17, 17)), ((20, 3, 128, 300, 17), (3, 17, 17)), ((20, 3, 128, 150, 17), (3, 17, 17)), ((20, 3, 256, 150, 17), (3, 17, 17)), ((20, 3, 256, 75, 17), (3, 17, 17))]], {}, 10],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 300, 17), (32, 128, 300, 17), (32, 128, 150, 17), (32, 256, 150, 17), (32, 256, 75, 17), (20, 64, 300, 17), (20, 128, 300, 17), (20, 128, 150, 17), (20, 256, 150, 17), (20, 256, 75, 17)]], {'inplace': [True, True, True, True, True, True, True, True, True, True]}, 10],
['relu_', 'torch', ['torch.cuda.FloatTensor'], [[(32, 64, 300, 17), (32, 128, 300, 17), (32, 128, 150, 17), (32, 256, 150, 17), (32, 256, 75, 17), (20, 64, 300, 17), (20, 128, 300, 17), (20, 128, 150, 17), (20, 256, 150, 17), (20, 256, 75, 17)]], {}, 10],
['dropout', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 64, 300, 17), (32, 128, 150, 17), (32, 256, 75, 17), (20, 64, 300, 17), (20, 128, 150, 17), (20, 256, 75, 17)], [0, 0, 0, 0, 0, 0], [True, True, True, True, True, True], [True, True, True, True, True, True]], {}, 6],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(32, 64, 300, 17), (20, 64, 300, 17)], [0, 0]], {}, 2],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(32, 64, 300, 17), (32, 128, 150, 17), (32, 256, 75, 17), (20, 64, 300, 17), (20, 128, 150, 17), (20, 256, 75, 17)], [(32, 64, 300, 17), (32, 128, 150, 17), (32, 256, 75, 17), (20, 64, 300, 17), (20, 128, 150, 17), (20, 256, 75, 17)]], {}, 6],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(32, 256, 75, 17), (20, 256, 75, 17)], [(1, 1), (1, 1)]], {}, 2],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 2, 256, 1, 1), (10, 2, 256, 1, 1)]], {'dim': [1, 1]}, 2],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(16, 60), (10, 60)], [(16,), (10,)]], {}, 2],
['imul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.DoubleTensor'], [[()]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['div_', 'torch.Tensor', ['torch.cuda.DoubleTensor'], [[()], [1]], {}, 1],
['all_reduce', 'torch.distributed', ['torch.cuda.DoubleTensor'], [[()]], {}, 1],
['div_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1]], {}, 1],
['all_reduce', 'torch.distributed', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(51,), (192, 3, 1, 1), (192,), (64,), (64, 64, 9, 1), (192, 64, 1, 1), (384, 64, 1, 1), (384,), (128,), (128, 128, 9, 1), (128, 64, 1, 1), (384, 128, 1, 1), (768, 128, 1, 1), (768,), (256,), (256, 256, 9, 1), (256, 128, 1, 1), (768, 256, 1, 1), (3, 17, 17), (60, 256, 1, 1), (60,)], [(51,), (192, 3, 1, 1), (192,), (64,), (64, 64, 9, 1), (192, 64, 1, 1), (384, 64, 1, 1), (384,), (128,), (128, 128, 9, 1), (128, 64, 1, 1), (384, 128, 1, 1), (768, 128, 1, 1), (768,), (256,), (256, 256, 9, 1), (256, 128, 1, 1), (768, 256, 1, 1), (3, 17, 17), (60, 256, 1, 1), (60,)], [(51,), (192, 3, 1, 1), (192,), (64,), (64, 64, 9, 1), (192, 64, 1, 1), (384, 64, 1, 1), (384,), (128,), (128, 128, 9, 1), (128, 64, 1, 1), (384, 128, 1, 1), (768, 128, 1, 1), (768,), (256,), (256, 256, 9, 1), (256, 128, 1, 1), (768, 256, 1, 1), (3, 17, 17), (60, 256, 1, 1), (60,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.1, 'dampening': 0, 'nesterov': True}, 1],
['mul_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(51,), (192, 3, 1, 1), (192,), (64,), (64, 64, 9, 1), (192, 64, 1, 1), (384, 64, 1, 1), (384,), (128,), (128, 128, 9, 1), (128, 64, 1, 1), (384, 128, 1, 1), (768, 128, 1, 1), (768,), (256,), (256, 256, 9, 1), (256, 128, 1, 1), (768, 256, 1, 1), (3, 17, 17), (60, 256, 1, 1), (60,)], [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]], {}, 21],
['barrier', 'torch.distributed', [], [], {}, 1],
]
res50_coco_256x192_rle_config=[
['eye', 'torch', [], [[2]], {}, 1],
['get_rank', 'torch.distributed', [], [], {}, 7],
['get_world_size', 'torch.distributed', [], [], {}, 9],
['randperm', 'torch', [], [[149813]], {'generator': '<torch._C.Generator object at 0x7f68d0ff0048>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3, 256, 192), (64, 64, 64, 48), (64, 64, 64, 48), (64, 64, 64, 48), (64, 256, 64, 48), (64, 256, 64, 48), (64, 128, 64, 48), (64, 128, 32, 24), (64, 256, 64, 48), (64, 512, 32, 24), (64, 128, 32, 24), (64, 512, 32, 24), (64, 256, 32, 24), (64, 256, 16, 12), (64, 512, 32, 24), (64, 1024, 16, 12), (64, 256, 16, 12), (64, 1024, 16, 12), (64, 512, 16, 12), (64, 512, 8, 6), (64, 1024, 16, 12), (64, 2048, 8, 6), (64, 512, 8, 6)], [(64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1)], [(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 23],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 64, 128, 96), (64, 64, 64, 48), (64, 256, 64, 48), (64, 128, 64, 48), (64, 128, 32, 24), (64, 512, 32, 24), (64, 256, 32, 24), (64, 256, 16, 12), (64, 1024, 16, 12), (64, 512, 16, 12), (64, 512, 8, 6), (64, 2048, 8, 6)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 12],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 64, 128, 96), (64, 64, 64, 48), (64, 256, 64, 48), (64, 128, 64, 48), (64, 128, 32, 24), (64, 512, 32, 24), (64, 256, 32, 24), (64, 256, 16, 12), (64, 1024, 16, 12), (64, 512, 16, 12), (64, 512, 8, 6), (64, 2048, 8, 6)]], {'inplace': [True, True, True, True, True, True, True, True, True, True, True, True]}, 12],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 64, 128, 96)], [3], [2], [1], [1], [False], [False]], {}, 1],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 256, 64, 48), (64, 512, 32, 24), (64, 1024, 16, 12), (64, 2048, 8, 6)], [(64, 256, 64, 48), (64, 512, 32, 24), (64, 1024, 16, 12), (64, 2048, 8, 6)]], {}, 4],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 2048, 8, 6)], [(1, 1)]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 2048), (1088, 2), (1088, 64), (1088, 64)], [(68, 2048), (64, 2), (64, 64), (2, 64)], [(68,), (64,), (64,), (2,)]], {}, 4],
['sigmoid', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 17, 2)]], {}, 1],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 17, 2), (1088, 2), (1088, 2), (1088,), (64, 17, 2)], [(64, 17, 2), (1088, 2), (2,), (), (64, 17, 1)]], {}, 5],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 17, 2)], [1e-09]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 17, 2)], [(64, 17, 2)]], {}, 1],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(2,), (1088, 2), (1088, 2)], [(1088, 2), (2,), (1088, 2)]], {}, 3],
['leaky_relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(1088, 64)], [0.01], [False]], {}, 1],
['tanh', 'torch', ['torch.cuda.FloatTensor'], [[(1088, 2)]], {}, 1],
['rsub', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(2,)], [1]], {}, 1],
['neg', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1088, 2)]], {}, 1],
['exp', 'torch', ['torch.cuda.FloatTensor'], [[(1088, 2)]], {}, 1],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(1088, 2), (1088,), (64, 17, 2)], [(1088, 2), (1088,), (64, 17, 2)]], {}, 3],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1088, 2)]], {'dim': [1]}, 1],
['isub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(1088,)], [(1088,)]], {}, 1],
['expand', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(2, 2), (2,)], [(-1, -1), (-1,)]], {}, 2],
['eq', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(2,), (1088, 2)], [(2,), (1088, 2)]], {}, 2],
['all', 'torch.Tensor', ['torch.cuda.BoolTensor'], [[(2,), (1088, 2)], [-1, -1]], {}, 2],
['all', 'torch.Tensor', ['torch.cuda.BoolTensor'], [[(), (1,), (1088,)]], {}, 3],
['cholesky_ex', 'torch.linalg', ['torch.cuda.FloatTensor'], [[(2, 2)]], {}, 1],
['eq', 'torch.Tensor', ['torch.cuda.IntTensor'], [[()], [0]], {}, 1],
['cholesky', 'torch.linalg', ['torch.cuda.FloatTensor'], [[(2, 2)]], {}, 1],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1088, 2), (1088,)], [[0, 1], [0]]], {}, 2],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1088, 1, 2)], [1], [2], [0]], {}, 1],
['triangular_solve', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(1, 2, 1088)], [(1, 2, 2)]], {'upper': False}, 1],
['pow', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1, 2, 1088)], [2]], {}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1, 2, 1088), (2,)], [-2, -1]], {}, 2],
['t', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1, 1088)]], {}, 1],
['diagonal', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(2, 2)]], {'dim1': -2, 'dim2': -1}, 1],
['log', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(2,), (64, 17, 2)]], {}, 2],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1088,), ()], [3.6757541328186907, 0]], {}, 2],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(1088,)], [-0.5]], {}, 1],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 17, 2)], [2]], {}, 1],
['abs', 'torch', ['torch.cuda.FloatTensor'], [[(64, 17, 2)]], {}, 1],
['imul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 17, 2)], [(64, 17, 2)]], {}, 1],
['itruediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 17, 2)], [64]], {}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 17, 2)]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['div_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1]], {}, 1],
['all_reduce', 'torch.distributed', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['adam', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (256,), (64, 256, 1, 1), (128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (64, 2), (64, 64), (2, 64), (2,), (68, 2048), (68,)]], {'amsgrad': False, 'beta1': 0.9, 'beta2': 0.999, 'lr': 1.000000000000001e-06, 'weight_decay': 0, 'eps': 1e-08}, 32],
]
hrnet_w32_coco_wholebody_512x512_config=[
['randperm', 'torch', [], [[64115]], {'generator': '<torch._C.Generator object at 0x7fed13709738>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(24, 3, 512, 512), (24, 64, 256, 256), (24, 64, 128, 128), (24, 64, 128, 128), (24, 64, 128, 128), (24, 256, 128, 128), (24, 256, 128, 128), (24, 256, 128, 128), (24, 32, 128, 128), (24, 64, 64, 64), (24, 64, 64, 64), (24, 32, 128, 128), (24, 64, 64, 64), (24, 128, 32, 32), (24, 128, 32, 32), (24, 128, 32, 32), (24, 32, 128, 128), (24, 32, 64, 64), (24, 128, 32, 32), (24, 256, 16, 16), (24, 256, 16, 16), (24, 256, 16, 16), (24, 256, 16, 16), (24, 32, 64, 64), (24, 32, 32, 32), (24, 64, 64, 64), (24, 64, 32, 32)], [(64, 3, 3, 3), (64, 64, 3, 3), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (32, 256, 3, 3), (64, 256, 3, 3), (32, 32, 3, 3), (64, 64, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (32, 128, 1, 1), (64, 128, 1, 1), (32, 32, 3, 3), (128, 32, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (32, 256, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (32, 32, 3, 3), (256, 32, 3, 3), (64, 64, 3, 3), (256, 64, 3, 3)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (2, 2), (2, 2)], [(1, 1), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 27],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(24, 64, 256, 256), (24, 64, 128, 128), (24, 256, 128, 128), (24, 32, 128, 128), (24, 64, 64, 64), (24, 32, 64, 64), (24, 128, 32, 32), (24, 32, 32, 32), (24, 64, 32, 32), (24, 256, 16, 16), (24, 32, 16, 16), (24, 64, 16, 16), (24, 128, 16, 16)], [(64,), (64,), (256,), (32,), (64,), (32,), (128,), (32,), (64,), (256,), (32,), (64,), (128,)], [(64,), (64,), (256,), (32,), (64,), (32,), (128,), (32,), (64,), (256,), (32,), (64,), (128,)], [(64,), (64,), (256,), (32,), (64,), (32,), (128,), (32,), (64,), (256,), (32,), (64,), (128,)], [(64,), (64,), (256,), (32,), (64,), (32,), (128,), (32,), (64,), (256,), (32,), (64,), (128,)], [True, True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 13],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(24, 64, 256, 256), (24, 64, 128, 128), (24, 256, 128, 128), (24, 32, 128, 128), (24, 64, 64, 64), (24, 128, 32, 32), (24, 32, 64, 64), (24, 256, 16, 16), (24, 32, 32, 32), (24, 64, 32, 32)]], {'inplace': [True, True, True, True, True, True, True, True, True, True]}, 10],
['relu_', 'torch', ['torch.cuda.FloatTensor'], [[(24, 64, 256, 256), (24, 64, 128, 128), (24, 256, 128, 128), (24, 32, 128, 128), (24, 64, 64, 64), (24, 128, 32, 32), (24, 32, 64, 64), (24, 256, 16, 16), (24, 32, 32, 32), (24, 64, 32, 32)]], {}, 10],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(24, 256, 128, 128), (24, 32, 128, 128), (24, 64, 64, 64), (24, 128, 32, 32), (24, 256, 16, 16)], [(24, 256, 128, 128), (24, 32, 128, 128), (24, 64, 64, 64), (24, 128, 32, 32), (24, 256, 16, 16)]], {}, 5],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(24, 32, 128, 128), (24, 64, 64, 64), (24, 128, 32, 32), (24, 256, 16, 16), ()], [0, 0, 0, 0, 0]], {}, 5],
['interpolate', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(24, 32, 64, 64), (24, 32, 32, 32), (24, 64, 32, 32), (24, 32, 16, 16), (24, 64, 16, 16), (24, 128, 16, 16)], [None, None, None, None, None, None], [2.0, 4.0, 2.0, 8.0, 4.0, 2.0], ['nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest'], [None, None, None, None, None, None]], {}, 6],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(24, 32, 128, 128)], [(266, 32, 1, 1)], [(266,)], [(1, 1)], [(0, 0)], [(1, 1)], [1]], {}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(24, 133, 128, 128)]], {'dim': (2, 3), 'keepdim': True}, 1],
['gt', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(24, 133, 1, 1)], [0]], {}, 1],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(24, 133, 128, 128), (96, 1), (2, 1), (2, 2), (17, 1), (11, 1), (112, 1), (54, 1), (9, 1), (7, 1), (3, 3), (4, 1), (28, 1), (3, 1), (81, 1), (16, 1), (84, 1), (85, 1), (8, 1), (9, 9), (1, 1), (126, 1), (83, 1), (14, 1), (131, 1), (49, 1), (98, 1), (97, 1), (93, 1), (77, 1), (73, 1), (6, 6), (79, 1), (102, 1), (76, 1), (33, 1)], [(24, 133, 128, 128), (96, 1), (2, 1), (2, 2), (17, 1), (11, 1), (112, 1), (54, 1), (9, 1), (7, 1), (3, 3), (4, 1), (28, 1), (3, 1), (81, 1), (16, 1), (84, 1), (85, 1), (8, 1), (9, 9), (1, 1), (126, 1), (83, 1), (14, 1), (131, 1), (49, 1), (98, 1), (97, 1), (93, 1), (77, 1), (73, 1), (6, 6), (79, 1), (102, 1), (76, 1), (33, 1)]], {}, 36],
['pow', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(24, 133, 128, 128), (96, 1), (2, 1), (2, 2), (17, 1), (11, 1), (112, 1), (54, 1), (9, 1), (7, 1), (3, 3), (4, 1), (28, 1), (3, 1), (81, 1), (16, 1), (84, 1), (85, 1), (8, 1), (9, 9), (1, 1), (126, 1), (83, 1), (14, 1), (131, 1), (49, 1), (98, 1), (97, 1), (93, 1), (77, 1), (73, 1), (6, 6), (79, 1), (102, 1), (76, 1), (33, 1)], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], {}, 36],
['expand_as', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(24, 133, 1, 1), (24, 1, 128, 128), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,)], [(24, 133, 128, 128), (24, 133, 128, 128), (96, 1), (2, 1), (17, 1), (11, 1), (112, 1), (54, 1), (9, 1), (7, 1), (4, 1), (28, 1), (3, 1), (81, 1), (16, 1), (84, 1), (85, 1), (8, 1), (1, 1), (126, 1), (83, 1), (14, 1), (131, 1), (49, 1), (98, 1), (97, 1), (93, 1), (77, 1), (73, 1), (79, 1), (102, 1), (76, 1), (33, 1)]], {}, 33],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(24, 133, 128, 128)], [(24, 133, 128, 128)]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(24, 133, 128, 128), (24, 133, 128), (24, 133), (96, 1), (2, 1), (17, 1), (11, 1), (112, 1), (54, 1), (9, 1), (7, 1), (4, 1), (28, 1), (3, 1), (81, 1), (16, 1), (84, 1), (85, 1), (8, 1), (1, 1), (126, 1), (83, 1), (14, 1), (131, 1), (49, 1), (98, 1), (97, 1), (93, 1), (77, 1), (73, 1), (79, 1), (102, 1), (76, 1), (33, 1), (24,)]], {'dim': [3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, 35],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(24,), (), (24,)], [1.0, 0.5, 0.001]], {}, 3],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['mean', 'torch', ['torch.cuda.FloatTensor'], [[(96, 1), (2, 1), (17, 1), (11, 1), (112, 1), (54, 1), (9, 1), (7, 1), (4, 1), (28, 1), (3, 1), (81, 1), (16, 1), (84, 1), (85, 1), (8, 1), (1, 1), (126, 1), (83, 1), (14, 1), (131, 1), (49, 1), (98, 1), (97, 1), (93, 1), (77, 1), (73, 1), (79, 1), (102, 1), (76, 1), (33, 1), ()]], {}, 32],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,))]], {}, 1],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[()], [()]], {}, 1],
['expand', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(2, 1), (3, 1), (9, 1), (6, 1)], [2, 3, 9, 6], [2, 3, 9, 6]], {}, 4],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(2, 2), (3, 3), (9, 9), (6, 6)], [1, 1, 1, 1], [0, 0, 0, 0]], {}, 4],
['neg', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(2, 2), (3, 3), (9, 9), (6, 6)]], {}, 4],
['exp', 'torch', ['torch.cuda.FloatTensor'], [[(2, 2), (3, 3), (9, 9), (6, 6)]], {}, 4],
['sum', 'torch', ['torch.cuda.FloatTensor'], [[(2, 2), (3, 3), (9, 9), (6, 6)]], {}, 4],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(), (), (), ()], [2, 3, 9, 6]], {}, 4],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(), (), (), (), (), (), (64, 3, 3, 3), (64,), (64, 64, 3, 3), (64, 64, 1, 1), (256, 64, 1, 1), (256,), (64, 256, 1, 1), (32, 256, 3, 3), (32,), (64, 256, 3, 3), (32, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (32, 128, 1, 1), (64, 128, 1, 1), (128, 32, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (32, 256, 1, 1), (128, 256, 1, 1), (256, 32, 3, 3), (256, 64, 3, 3), (266, 32, 1, 1), (266,)], [2, 6, 3, 72, 9, 30, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805, 0.031622776601683805]], {}, 33],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor'], [[((1,),)]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor{}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[((), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ())]], {}, 1],
['div_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1]], {}, 1],
['all_reduce', 'torch.distributed', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['adam', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 3, 3), (64,), (64, 64, 3, 3), (64, 64, 1, 1), (256, 64, 1, 1), (256,), (64, 256, 1, 1), (32, 256, 3, 3), (32,), (64, 256, 3, 3), (32, 32, 3, 3), (32, 64, 1, 1), (64, 32, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (32, 128, 1, 1), (64, 128, 1, 1), (128, 32, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (32, 256, 1, 1), (128, 256, 1, 1), (256, 32, 3, 3), (256, 64, 3, 3), (266, 32, 1, 1), (266,)]], {'amsgrad': False, 'beta1': 0.9, 'beta2': 0.999, 'lr': 1.5000000000000013e-06, 'weight_decay': 0, 'eps': 1e-08}, 1],
]
sar_resnet31_parallel_decoder_5e_st_sub_mj_sub_sa_real_config=[
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 3, 3, 3), (64,), (128, 64, 3, 3), (128,), (256, 128, 3, 3), (256, 256, 3, 3), (256,), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512,), (512, 256, 1, 1), (2048, 512), (2048,), (512, 512), (1, 512), (1,), (93, 512), (93, 1536), (93,), ()]], {}, 21],
['normal_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 3, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1)], [0, 0, 0, 0, 0, 0, 0, 0], [0.05892556509887897, 0.04166666666666667, 0.029462782549439483, 0.029462782549439483, 0.08838834764831845, 0.020833333333333336, 0.020833333333333336, 0.0625]], {}, 8],
['fill_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64,), (128,), (256,), (512,)], [0, 0, 0, 0]], {}, 4],
['uniform_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64,), (128,), (256,), (512,)], [0, 0, 0, 0], [1, 1, 1, 1]], {}, 4],
['randperm', 'torch', [], [[93828]], {'generator': '<torch._C.Generator object at 0x7faf18647f78>'}, 1],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(3, 48, 160)], [(3, 1, 1)]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(3, 48, 160)], [(3, 1, 1)]], {}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor{}, 2],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(384, 3, 48, 160), (384, 64, 48, 160), (384, 256, 24, 80), (384, 256, 12, 40), (384, 512, 6, 40), (1, 3, 48, 160), (1, 64, 48, 160), (1, 256, 24, 80), (1, 256, 12, 40), (1, 512, 6, 40)], [(64, 3, 3, 3), (128, 64, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (512, 512, 3, 3), (64, 3, 3, 3), (128, 64, 3, 3), (256, 256, 3, 3), (256, 256, 3, 3), (512, 512, 3, 3)], [(64,), (128,), (256,), (256,), (512,), (64,), (128,), (256,), (256,), (512,)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 10],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(384, 64, 48, 160), (384, 128, 48, 160), (384, 256, 24, 80), (384, 256, 12, 40), (384, 512, 6, 40), (1, 64, 48, 160), (1, 128, 48, 160), (1, 256, 24, 80), (1, 256, 12, 40), (1, 512, 6, 40)], [(64,), (128,), (256,), (256,), (512,), (64,), (128,), (256,), (256,), (512,)], [(64,), (128,), (256,), (256,), (512,), (64,), (128,), (256,), (256,), (512,)], [(64,), (128,), (256,), (256,), (512,), (64,), (128,), (256,), (256,), (512,)], [(64,), (128,), (256,), (256,), (512,), (64,), (128,), (256,), (256,), (512,)], [True, True, True, True, True, False, False, False, False, False], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 10],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(384, 64, 48, 160), (384, 128, 48, 160), (384, 256, 24, 80), (384, 256, 12, 40), (384, 512, 6, 40), (1, 64, 48, 160), (1, 128, 48, 160), (1, 256, 24, 80), (1, 256, 12, 40), (1, 512, 6, 40)]], {'inplace': [True, True, True, True, True, True, True, True, True, True]}, 10],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(384, 128, 48, 160), (384, 256, 24, 80), (384, 256, 12, 40), (1, 128, 48, 160), (1, 256, 24, 80), (1, 256, 12, 40)], [2, 2, (2, 1), 2, 2, (2, 1)], [2, 2, (2, 1), 2, 2, (2, 1)], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1], [True, True, True, True, True, True], [False, False, False, False, False, False]], {}, 6],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(384, 128, 24, 80), (384, 256, 24, 80), (384, 128, 24, 80), (384, 256, 12, 40), (384, 256, 6, 40), (384, 512, 6, 40), (384, 256, 6, 40), (1, 128, 24, 80), (1, 256, 24, 80), (1, 128, 24, 80), (1, 256, 12, 40), (1, 256, 6, 40), (1, 512, 6, 40), (1, 256, 6, 40)], [(256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 14],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(384, 256, 24, 80), (384, 256, 12, 40), (384, 512, 6, 40), (1, 256, 24, 80), (1, 256, 12, 40), (1, 512, 6, 40)], [(384, 256, 24, 80), (384, 256, 12, 40), (384, 512, 6, 40), (1, 256, 24, 80), (1, 256, 12, 40), (1, 512, 6, 40)]], {}, 6],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(384, 512, 6, 40), (1, 512, 6, 40)]], {'kernel_size': [(6, 1), (6, 1)], 'stride': [1, 1], 'padding': [0, 0]}, 2],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(384, 512, 40), (384, 29, 93), (1, 512, 40)], [0, 0, 0], [2, 2, 2], [1, 1, 1]], {}, 3],
['stack', 'torch', ['torch.cuda.FloatTensor{'dim': [0, 0]}, 2],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(384, 512), (384, 31, 512), (384, 31, 6, 40, 512), (384, 31, 1536), (1, 512), (1, 31, 512), (1, 31, 6, 40, 512), (1, 31, 1536)], [(512, 512), (512, 512), (1, 512), (93, 1536), (512, 512), (512, 512), (1, 512), (93, 1536)], [(512,), (512,), (1,), (93,), (512,), (512,), (1,), (93,)]], {}, 8],
['embedding', 'torch.nn.functional', ['torch.cuda.LongTensor', 'torch.cuda.FloatTensor'], [[(384, 30), (1,)], [(93, 512), (93, 512)], [91, 91], [None, None], [2.0, 2.0], [False, False], [False, False]], {}, 2],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((384, 1, 512), (384, 30, 512)), ((1, 1, 512), (1, 30, 512))]], {'dim': [1, 1]}, 2],
['add', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(384, 1, 512, 6, 40), (1, 1, 512, 6, 40)], [(384, 31, 512, 1, 1), (1, 31, 512, 1, 1)]], {'alpha': [1, 1]}, 2],
['tanh', 'torch', ['torch.cuda.FloatTensor'], [[(384, 31, 512, 6, 40), (1, 31, 512, 6, 40)]], {}, 2],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(384, 31, 512, 6, 40), (384, 31, 6, 40, 1), (1, 31, 512, 6, 40), (1, 31, 6, 40, 1)], [0, 0, 0, 0], [1, 1, 1, 1], [3, 4, 3, 4], [4, 2, 4, 2], [2, 3, 2, 3]], {}, 4],
['masked_fill', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.BoolTensor'], [[(384, 31, 6, 40, 1), (1, 31, 6, 40, 1)], [(384, 31, 6, 40, 1), (1, 31, 6, 40, 1)], [float("-inf"), float("-inf")]], {}, 2],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(384, 31, 240), (1, 31, 240)]], {'dim': [-1, -1]}, 2],
['mul', 'torch', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(384, 1, 512, 6, 40), (1, 1, 512, 6, 40)], [(384, 31, 1, 6, 40), (1, 31, 1, 6, 40)]], {}, 2],
['sum', 'torch', ['torch.cuda.FloatTensor'], [[(384, 31, 512, 6, 40), (1, 31, 512, 6, 40)], [(3, 4), (3, 4)]], {'keepdim': [False, False]}, 2],
['expand', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(384, 1, 512), (1, 1, 512), (1, 1, 512)], [384, -1, 1], [31, 30, 31], [512, -1, 512]], {}, 3],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((384, 31, 512), (384, 31, 512), (384, 31, 512)), ((1, 31, 512), (1, 31, 512), (1, 31, 512))], [2, 2]], {}, 2],
['dropout', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(384, 31, 93), (1, 31, 93)], [0.1, 0.1], [True, False], [False, False]], {}, 2],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(384, 93, 29)], [(384, 29)]], {'weight': None, 'ignore_index': 91, 'reduction': 'mean', 'label_smoothing': 0.0}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1]], {}, 1],
['adam', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 3, 3), (64,), (128, 64, 3, 3), (128,), (256, 128, 3, 3), (256, 256, 3, 3), (256,), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512,), (512, 256, 1, 1), (2048, 512), (2048,), (512, 512), (1, 512), (1,), (93, 512), (93, 1536), (93,)]], {'amsgrad': False, 'beta1': 0.9, 'beta2': 0.999, 'lr': 0.001, 'weight_decay': 0, 'eps': 1e-08}, 20],
['arange', 'torch', [], [[2077]], {}, 1],
['max', 'torch', ['torch.cuda.FloatTensor'], [[(1, 93)]], {'dim': [1], 'keepdim': [False]}, 1],
['stack', 'torch', ['torch.cuda.FloatTensor'], [[((1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93), (1, 93))], [1]], {}, 1],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(1, 30, 93)], [-1]], {'_stacklevel': [5]}, 1],
['max', 'torch', ['torch.cuda.FloatTensor'], [[(30, 93)], [-1]], {}, 1],
]
crnn_mini_vgg_5e_mj_config=[
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1, 3, 3), (64,), (128, 64, 3, 3), (128,), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 512, 2, 2), (1024, 512), (1024, 256), (1024,), (256, 512), (37, 512), (37,), ()]], {}, 18],
['normal_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2)], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.05847053462046861, 0.034020690871988585, 0.024056261216234408, 0.020833333333333332, 0.017010345435994292, 0.01473139127471974, 0.02209708691207961]], {}, 7],
['fill_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64,), (128,), (256,), (512,)], [0, 0, 0, 0]], {}, 4],
['uniform_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(256,), (512,)], [0, 0], [1, 1]], {}, 2],
['randperm', 'torch', [], [[2077]], {'generator': '<torch._C.Generator object at 0x7fda700aef60>'}, 1],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(1, 32, 100), (1, 32, 112), (1, 32, 48), (1, 32, 64), (1, 32, 80), (1, 32, 96), (1, 32, 32), (1, 32, 128), (1, 32, 144), (1, 32, 192), (1, 32, 160), (1, 32, 224), (1, 32, 176), (1, 32, 272), (1, 32, 208), (1, 32, 288), (1, 32, 240)], [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]], {}, 17],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(1, 32, 100), (1, 32, 112), (1, 32, 48), (1, 32, 64), (1, 32, 80), (1, 32, 96), (1, 32, 32), (1, 32, 128), (1, 32, 144), (1, 32, 192), (1, 32, 160), (1, 32, 224), (1, 32, 176), (1, 32, 272), (1, 32, 208), (1, 32, 288), (1, 32, 240)], [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]], {}, 17],
['stack', 'torch', ['torch.cuda.FloatTensor{}, 17],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 1, 32, 100), (64, 64, 16, 50), (64, 128, 8, 25), (64, 256, 8, 25), (64, 256, 4, 26), (64, 512, 4, 26), (64, 512, 2, 27), (1, 1, 32, 112), (1, 64, 16, 56), (1, 128, 8, 28), (1, 256, 8, 28), (1, 256, 4, 29), (1, 512, 4, 29), (1, 512, 2, 30), (1, 1, 32, 48), (1, 64, 16, 24), (1, 128, 8, 12), (1, 256, 8, 12), (1, 256, 4, 13), (1, 512, 4, 13), (1, 512, 2, 14), (1, 1, 32, 64), (1, 64, 16, 32), (1, 128, 8, 16), (1, 256, 8, 16), (1, 256, 4, 17), (1, 512, 4, 17), (1, 512, 2, 18), (1, 1, 32, 80), (1, 64, 16, 40), (1, 128, 8, 20), (1, 256, 8, 20), (1, 256, 4, 21), (1, 512, 4, 21), (1, 512, 2, 22), (1, 1, 32, 96), (1, 64, 16, 48), (1, 128, 8, 24), (1, 256, 8, 24), (1, 256, 4, 25), (1, 512, 4, 25), (1, 512, 2, 26), (1, 1, 32, 32), (1, 64, 16, 16), (1, 128, 8, 8), (1, 256, 8, 8), (1, 256, 4, 9), (1, 512, 4, 9), (1, 512, 2, 10), (1, 1, 32, 128), (1, 64, 16, 64), (1, 128, 8, 32), (1, 256, 8, 32), (1, 256, 4, 33), (1, 512, 4, 33), (1, 512, 2, 34), (1, 1, 32, 144), (1, 64, 16, 72), (1, 128, 8, 36), (1, 256, 8, 36), (1, 256, 4, 37), (1, 512, 4, 37), (1, 512, 2, 38), (1, 1, 32, 192), (1, 64, 16, 96), (1, 128, 8, 48), (1, 256, 8, 48), (1, 256, 4, 49), (1, 512, 4, 49), (1, 512, 2, 50), (1, 1, 32, 160), (1, 64, 16, 80), (1, 128, 8, 40), (1, 256, 8, 40), (1, 256, 4, 41), (1, 512, 4, 41), (1, 512, 2, 42), (1, 1, 32, 224), (1, 64, 16, 112), (1, 128, 8, 56), (1, 256, 8, 56), (1, 256, 4, 57), (1, 512, 4, 57), (1, 512, 2, 58), (1, 1, 32, 176), (1, 64, 16, 88), (1, 128, 8, 44), (1, 256, 8, 44), (1, 256, 4, 45), (1, 512, 4, 45), (1, 512, 2, 46), (1, 1, 32, 272), (1, 64, 16, 136), (1, 128, 8, 68), (1, 256, 8, 68), (1, 256, 4, 69), (1, 512, 4, 69), (1, 512, 2, 70), (1, 1, 32, 208), (1, 64, 16, 104), (1, 128, 8, 52), (1, 256, 8, 52), (1, 256, 4, 53), (1, 512, 4, 53), (1, 512, 2, 54), (1, 1, 32, 288), (1, 64, 16, 144), (1, 128, 8, 72), (1, 256, 8, 72), (1, 256, 4, 73), (1, 512, 4, 73), (1, 512, 2, 74), (1, 1, 32, 240), (1, 64, 16, 120), (1, 128, 8, 60), (1, 256, 8, 60), (1, 256, 4, 61), (1, 512, 4, 61), (1, 512, 2, 62)], [(64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2)], [(64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 119],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 64, 32, 100), (64, 128, 16, 50), (64, 256, 8, 25), (64, 512, 4, 26), (64, 512, 1, 26), (1, 64, 32, 112), (1, 128, 16, 56), (1, 256, 8, 28), (1, 512, 4, 29), (1, 512, 1, 29), (1, 64, 32, 48), (1, 128, 16, 24), (1, 256, 8, 12), (1, 512, 4, 13), (1, 512, 1, 13), (1, 64, 32, 64), (1, 128, 16, 32), (1, 256, 8, 16), (1, 512, 4, 17), (1, 512, 1, 17), (1, 64, 32, 80), (1, 128, 16, 40), (1, 256, 8, 20), (1, 512, 4, 21), (1, 512, 1, 21), (1, 64, 32, 96), (1, 128, 16, 48), (1, 256, 8, 24), (1, 512, 4, 25), (1, 512, 1, 25), (1, 64, 32, 32), (1, 128, 16, 16), (1, 256, 8, 8), (1, 512, 4, 9), (1, 512, 1, 9), (1, 64, 32, 128), (1, 128, 16, 64), (1, 256, 8, 32), (1, 512, 4, 33), (1, 512, 1, 33), (1, 64, 32, 144), (1, 128, 16, 72), (1, 256, 8, 36), (1, 512, 4, 37), (1, 512, 1, 37), (1, 64, 32, 192), (1, 128, 16, 96), (1, 256, 8, 48), (1, 512, 4, 49), (1, 512, 1, 49), (1, 64, 32, 160), (1, 128, 16, 80), (1, 256, 8, 40), (1, 512, 4, 41), (1, 512, 1, 41), (1, 64, 32, 224), (1, 128, 16, 112), (1, 256, 8, 56), (1, 512, 4, 57), (1, 512, 1, 57), (1, 64, 32, 176), (1, 128, 16, 88), (1, 256, 8, 44), (1, 512, 4, 45), (1, 512, 1, 45), (1, 64, 32, 272), (1, 128, 16, 136), (1, 256, 8, 68), (1, 512, 4, 69), (1, 512, 1, 69), (1, 64, 32, 208), (1, 128, 16, 104), (1, 256, 8, 52), (1, 512, 4, 53), (1, 512, 1, 53), (1, 64, 32, 288), (1, 128, 16, 144), (1, 256, 8, 72), (1, 512, 4, 73), (1, 512, 1, 73), (1, 64, 32, 240), (1, 128, 16, 120), (1, 256, 8, 60), (1, 512, 4, 61), (1, 512, 1, 61)]], {'inplace': [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]}, 85],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(64, 64, 32, 100), (64, 128, 16, 50), (64, 256, 8, 25), (64, 512, 4, 26), (1, 64, 32, 112), (1, 128, 16, 56), (1, 256, 8, 28), (1, 512, 4, 29), (1, 64, 32, 48), (1, 128, 16, 24), (1, 256, 8, 12), (1, 512, 4, 13), (1, 64, 32, 64), (1, 128, 16, 32), (1, 256, 8, 16), (1, 512, 4, 17), (1, 64, 32, 80), (1, 128, 16, 40), (1, 256, 8, 20), (1, 512, 4, 21), (1, 64, 32, 96), (1, 128, 16, 48), (1, 256, 8, 24), (1, 512, 4, 25), (1, 64, 32, 32), (1, 128, 16, 16), (1, 256, 8, 8), (1, 512, 4, 9), (1, 64, 32, 128), (1, 128, 16, 64), (1, 256, 8, 32), (1, 512, 4, 33), (1, 64, 32, 144), (1, 128, 16, 72), (1, 256, 8, 36), (1, 512, 4, 37), (1, 64, 32, 192), (1, 128, 16, 96), (1, 256, 8, 48), (1, 512, 4, 49), (1, 64, 32, 160), (1, 128, 16, 80), (1, 256, 8, 40), (1, 512, 4, 41), (1, 64, 32, 224), (1, 128, 16, 112), (1, 256, 8, 56), (1, 512, 4, 57), (1, 64, 32, 176), (1, 128, 16, 88), (1, 256, 8, 44), (1, 512, 4, 45), (1, 64, 32, 272), (1, 128, 16, 136), (1, 256, 8, 68), (1, 512, 4, 69), (1, 64, 32, 208), (1, 128, 16, 104), (1, 256, 8, 52), (1, 512, 4, 53), (1, 64, 32, 288), (1, 128, 16, 144), (1, 256, 8, 72), (1, 512, 4, 73), (1, 64, 32, 240), (1, 128, 16, 120), (1, 256, 8, 60), (1, 512, 4, 61)], [2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2)], [2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1)], [0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]], {}, 68],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 256, 8, 25), (64, 512, 4, 26), (64, 512, 1, 26), (1, 256, 8, 28), (1, 512, 4, 29), (1, 512, 1, 29), (1, 256, 8, 12), (1, 512, 4, 13), (1, 512, 1, 13), (1, 256, 8, 16), (1, 512, 4, 17), (1, 512, 1, 17), (1, 256, 8, 20), (1, 512, 4, 21), (1, 512, 1, 21), (1, 256, 8, 24), (1, 512, 4, 25), (1, 512, 1, 25), (1, 256, 8, 8), (1, 512, 4, 9), (1, 512, 1, 9), (1, 256, 8, 32), (1, 512, 4, 33), (1, 512, 1, 33), (1, 256, 8, 36), (1, 512, 4, 37), (1, 512, 1, 37), (1, 256, 8, 48), (1, 512, 4, 49), (1, 512, 1, 49), (1, 256, 8, 40), (1, 512, 4, 41), (1, 512, 1, 41), (1, 256, 8, 56), (1, 512, 4, 57), (1, 512, 1, 57), (1, 256, 8, 44), (1, 512, 4, 45), (1, 512, 1, 45), (1, 256, 8, 68), (1, 512, 4, 69), (1, 512, 1, 69), (1, 256, 8, 52), (1, 512, 4, 53), (1, 512, 1, 53), (1, 256, 8, 72), (1, 512, 4, 73), (1, 512, 1, 73), (1, 256, 8, 60), (1, 512, 4, 61), (1, 512, 1, 61)], [(256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,)], [(256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,)], [(256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,)], [(256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,)], [True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 51],
['permute', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 512, 26), (26, 64, 37), (64, 26, 37), (1, 512, 29), (29, 1, 37), (1, 512, 13), (13, 1, 37), (1, 512, 17), (17, 1, 37), (1, 512, 21), (21, 1, 37), (1, 512, 25), (25, 1, 37), (1, 512, 9), (9, 1, 37), (1, 512, 33), (33, 1, 37), (1, 512, 37), (37, 1, 37), (1, 512, 49), (49, 1, 37), (1, 512, 41), (41, 1, 37), (1, 512, 57), (57, 1, 37), (1, 512, 45), (45, 1, 37), (1, 512, 69), (69, 1, 37), (1, 512, 53), (53, 1, 37), (1, 512, 73), (73, 1, 37), (1, 512, 61), (61, 1, 37)], [2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]], {}, 35],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(1664, 512), (1664, 512), (29, 512), (29, 512), (13, 512), (13, 512), (17, 512), (17, 512), (21, 512), (21, 512), (25, 512), (25, 512), (9, 512), (9, 512), (33, 512), (33, 512), (37, 512), (37, 512), (49, 512), (49, 512), (41, 512), (41, 512), (57, 512), (57, 512), (45, 512), (45, 512), (69, 512), (69, 512), (53, 512), (53, 512), (73, 512), (73, 512), (61, 512), (61, 512)], [(256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512)], [(256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,)]], {}, 34],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1]], {}, 1],
['adadelta', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 1, 3, 3), (64,), (128, 64, 3, 3), (128,), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 512, 2, 2), (1024, 512), (1024, 256), (1024,), (256, 512), (37, 512), (37,)]], {'lr': 1.0, 'rho': 0.9, 'eps': 1e-06, 'weight_decay': 0}, 17],
['arange', 'torch', [], [[2077]], {}, 1],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(1, 29, 37), (1, 13, 37), (1, 17, 37), (1, 21, 37), (1, 25, 37), (1, 9, 37), (1, 33, 37), (1, 37, 37), (1, 49, 37), (1, 41, 37), (1, 57, 37), (1, 45, 37), (1, 69, 37), (1, 53, 37), (1, 73, 37), (1, 61, 37)], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], {'_stacklevel': [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]}, 16],
]
dbnet_resnet18_fpnc_1200e_icdar2015_config=[
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,), ()]], {}, 23],
['load', 'torch', [], [['/mnt/lustre/linkun/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth']], {'map_location': 'cpu'}, 1],
['normal_', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(256, 64, 1, 1), (256, 128, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3)], [0, 0, 0, 0, 0], [0.08838834764831845, 0.08838834764831845, 0.08838834764831845, 0.08838834764831845, 0.05892556509887897]], {}, 5],
['randperm', 'torch', [], [[1000]], {'generator': '<torch._C.Generator object at 0x7f276527d270>'}, 1],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(3, 640, 640), (16, 640, 640)], [(3, 1, 1), (16, 640, 640)]], {}, 2],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(3, 640, 640), ()], [(3, 1, 1), ()]], {}, 2],
['stack', 'torch', ['torch.cuda.FloatTensor'], [[((3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640), (3, 640, 640))]], {}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 3, 640, 640), (16, 64, 160, 160), (16, 64, 160, 160), (16, 128, 80, 80), (16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20), (16, 256, 40, 40), (16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20), (16, 256, 160, 160), (16, 256, 80, 80), (16, 256, 40, 40), (16, 256, 20, 20)], [(64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 128, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 256, 3, 3), (64, 256, 3, 3), (64, 256, 3, 3)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 19],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 64, 320, 320), (16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20)], [(64,), (64,), (128,), (256,), (512,)], [(64,), (64,), (128,), (256,), (512,)], [(64,), (64,), (128,), (256,), (512,)], [(64,), (64,), (128,), (256,), (512,)], [True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 5],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(16, 64, 320, 320), (16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20)]], {'inplace': [True, True, True, True, True]}, 5],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(16, 64, 320, 320)], [3], [2], [1], [1], [False], [False]], {}, 1],
['iadd', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20)], [(16, 64, 160, 160), (16, 128, 80, 80), (16, 256, 40, 40), (16, 512, 20, 20)]], {}, 4],
['interpolate', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(16, 256, 20, 20), (16, 256, 40, 40), (16, 256, 80, 80), (16, 64, 160, 160), (16, 64, 80, 80), (16, 64, 40, 40), (16, 64, 20, 20)]], {'size': [(40, 40), (80, 80), (160, 160), (160, 160), (160, 160), (160, 160), (160, 160)], 'mode': ['nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest', 'nearest']}, 7],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 256, 40, 40), (16, 256, 80, 80), (16, 256, 160, 160), ()], [(16, 256, 40, 40), (16, 256, 80, 80), (16, 256, 160, 160), ()]], {}, 4],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((16, 64, 160, 160), (16, 64, 160, 160), (16, 64, 160, 160), (16, 64, 160, 160))]], {'dim': 1}, 1],
['conv_transpose2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 64, 160, 160), (16, 64, 320, 320)], [(64, 64, 2, 2), (64, 1, 2, 2)], [(64,), (1,)], [(2, 2), (2, 2)], [(0, 0), (0, 0)], [(0, 0), (0, 0)], [1, 1], [(1, 1), (1, 1)]], {}, 2],
['sigmoid', 'torch', ['torch.cuda.FloatTensor'], [[(16, 640, 640), (16, 1, 640, 640)]], {}, 2],
['rmul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 640, 640), (), (), ()], [-50, 2, 5.0, 10.0]], {}, 4],
['exp', 'torch', ['torch.cuda.FloatTensor'], [[(16, 640, 640)]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 640, 640), ()], [1.0, 0]], {}, 2],
['reciprocal', 'torch', ['torch.cuda.FloatTensor'], [[(16, 640, 640)]], {}, 1],
['nonzero', 'torch', ['torch.cuda.BoolTensor'], [[(14,), (2,), (5,), (3,), (8,), (7,), (13,), (4,), (79,), (9,)]], {}, 10],
['invert', 'torch.Tensor', ['torch.cuda.BoolTensor'], [[(14,), (2,), (5,), (3,), (8,), (7,), (13,), (4,), (79,), (9,)]], {}, 10],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 640, 640), (16, 409600)], [(16, 640, 640), (16, 409600)]], {}, 2],
['rsub', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 640, 640), ()], [1, 1]], {}, 2],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 640, 640), (79842,), (16, 409600)]], {}, 3],
['max', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 640, 640)]], {}, 1],
['le', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1]], {}, 1],
['min', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 640, 640)]], {}, 1],
['ge', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['binary_cross_entropy_with_logits', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 640, 640)], [(16, 640, 640)], [None]], {'pos_weight': None, 'reduction': 'none'}, 1],
['topk', 'torch', ['torch.cuda.FloatTensor'], [[(6553600,)], [79842]], {}, 1],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(), ()], [106456.000001, 1]], {}, 2],
['smooth_l1_loss', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 640, 640)], [(16, 640, 640)]], {'reduction': 'none', 'beta': 0}, 1],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1e-06]], {}, 1],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 64, 1, 1), (256, 256, 1, 1), (256, 512, 1, 1), (64, 256, 3, 3), (64, 64, 2, 2), (64, 1, 2, 2), (1,)]], {'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.007, 'dampening': 0, 'nesterov': False}, 22],
]
tsn_r50_1x1x8_50e_sthv1_rgb_config=[
['randperm', 'torch', [], [[86017]], {'generator': '<torch._C.Generator object at 0x7f57ef0f2ae0>'}, 1],
['conv2d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(128, 3, 224, 224), (128, 64, 56, 56), (128, 64, 56, 56), (128, 64, 56, 56), (128, 256, 56, 56), (128, 256, 56, 56), (128, 128, 56, 56), (128, 128, 28, 28), (128, 256, 56, 56), (128, 512, 28, 28), (128, 128, 28, 28), (128, 512, 28, 28), (128, 256, 28, 28), (128, 256, 14, 14), (128, 512, 28, 28), (128, 1024, 14, 14), (128, 256, 14, 14), (128, 1024, 14, 14), (128, 512, 14, 14), (128, 512, 7, 7), (128, 1024, 14, 14), (128, 2048, 7, 7), (128, 512, 7, 7)], [(64, 3, 7, 7), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (64, 256, 1, 1), (128, 256, 1, 1), (128, 128, 3, 3), (512, 128, 1, 1), (512, 256, 1, 1), (128, 512, 1, 1), (128, 128, 3, 3), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024, 512, 1, 1), (256, 1024, 1, 1), (256, 256, 3, 3), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048, 1024, 1, 1), (512, 2048, 1, 1), (512, 512, 3, 3)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1)], [(3, 3), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (1, 1)], [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 23],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(128, 64, 112, 112), (128, 64, 56, 56), (128, 256, 56, 56), (128, 128, 56, 56), (128, 128, 28, 28), (128, 512, 28, 28), (128, 256, 28, 28), (128, 256, 14, 14), (128, 1024, 14, 14), (128, 512, 14, 14), (128, 512, 7, 7), (128, 2048, 7, 7)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [(64,), (64,), (256,), (128,), (128,), (512,), (256,), (256,), (1024,), (512,), (512,), (2048,)], [False, False, False, False, False, False, False, False, False, False, False, False], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 12],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(128, 64, 112, 112), (128, 64, 56, 56), (128, 256, 56, 56), (128, 128, 56, 56), (128, 128, 28, 28), (128, 512, 28, 28), (128, 256, 28, 28), (128, 256, 14, 14), (128, 1024, 14, 14), (128, 512, 14, 14), (128, 512, 7, 7), (128, 2048, 7, 7)]], {'inplace': [True, True, True, True, True, True, True, True, True, True, True, True]}, 12],
['max_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(128, 64, 112, 112)], [3], [2], [1], [1], [False], [False]], {}, 1],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(128, 256, 56, 56), (128, 512, 28, 28), (128, 1024, 14, 14), (128, 2048, 7, 7)], [(128, 256, 56, 56), (128, 512, 28, 28), (128, 1024, 14, 14), (128, 2048, 7, 7)]], {}, 4],
['adaptive_avg_pool2d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(128, 2048, 7, 7)], [(1, 1)]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(16, 8, 2048, 1, 1)]], {'dim': 1, 'keepdim': True}, 1],
['dropout', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(16, 2048, 1, 1)], [0.5], [True], [False]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(16, 2048)], [(174, 2048)], [(174,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(16, 174)], [(16,)]], {}, 1],
['imul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.DoubleTensor'], [[()]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['norm', 'torch', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (256,), (64, 256, 1, 1), (128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (174, 2048), (174,), (161,)], [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]], {}, 29],
['stack', 'torch', ['torch.cuda.FloatTensor{}, 1],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1e-06]], {}, 1],
['rtruediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [20.0]], {}, 1],
['reciprocal', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [20.0]], {}, 1],
['clamp', 'torch', ['torch.cuda.FloatTensor'], [[()]], {'max': 1.0}, 1],
['mul_', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (256,), (64, 256, 1, 1), (128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (174, 2048), (174,)], [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()]], {}, 28],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 7, 7), (64,), (64, 64, 1, 1), (64, 64, 3, 3), (256, 64, 1, 1), (256,), (64, 256, 1, 1), (128, 256, 1, 1), (128,), (128, 128, 3, 3), (512, 128, 1, 1), (512,), (512, 256, 1, 1), (128, 512, 1, 1), (256, 512, 1, 1), (256, 256, 3, 3), (1024, 256, 1, 1), (1024,), (1024, 512, 1, 1), (256, 1024, 1, 1), (512, 1024, 1, 1), (512, 512, 3, 3), (2048, 512, 1, 1), (2048,), (2048, 1024, 1, 1), (512, 2048, 1, 1), (174, 2048), (174,)]], {'weight_decay': 0.0005, 'momentum': 0.9, 'lr': 0.02, 'dampening': 0, 'nesterov': False}, 28],
]
slowfast_r50_16x8x1_22e_sthv1_rgb_config=[
['randperm', 'torch', [], [[86017]], {'generator': '<torch._C.Generator object at 0x7fb5ed5fdcd8>'}, 1],
['interpolate', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(4, 3, 64, 224, 224), (4, 3, 64, 224, 224)]], {'mode': ['nearest', 'nearest'], 'scale_factor': [(0.25, 1.0, 1.0), (1.0, 1.0, 1.0)]}, 2],
['conv3d', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(4, 3, 16, 224, 224), (4, 3, 64, 224, 224), (4, 8, 64, 56, 56), (4, 80, 16, 56, 56), (4, 64, 16, 56, 56), (4, 64, 16, 56, 56), (4, 80, 16, 56, 56), (4, 256, 16, 56, 56), (4, 8, 64, 56, 56), (4, 8, 64, 56, 56), (4, 8, 64, 56, 56), (4, 32, 64, 56, 56), (4, 32, 64, 56, 56), (4, 320, 16, 56, 56), (4, 128, 16, 56, 56), (4, 128, 16, 28, 28), (4, 320, 16, 56, 56), (4, 512, 16, 28, 28), (4, 128, 16, 28, 28), (4, 32, 64, 56, 56), (4, 16, 64, 56, 56), (4, 16, 64, 28, 28), (4, 32, 64, 56, 56), (4, 64, 64, 28, 28), (4, 16, 64, 28, 28), (4, 64, 64, 28, 28), (4, 640, 16, 28, 28), (4, 256, 16, 28, 28), (4, 256, 16, 14, 14), (4, 640, 16, 28, 28), (4, 1024, 16, 14, 14), (4, 256, 16, 14, 14), (4, 64, 64, 28, 28), (4, 32, 64, 28, 28), (4, 32, 64, 14, 14), (4, 64, 64, 28, 28), (4, 128, 64, 14, 14), (4, 32, 64, 14, 14), (4, 128, 64, 14, 14), (4, 1280, 16, 14, 14), (4, 512, 16, 14, 14), (4, 512, 16, 7, 7), (4, 1280, 16, 14, 14), (4, 2048, 16, 7, 7), (4, 512, 16, 7, 7), (4, 128, 64, 14, 14), (4, 64, 64, 14, 14), (4, 64, 64, 7, 7), (4, 128, 64, 14, 14), (4, 256, 64, 7, 7), (4, 64, 64, 7, 7)], [(64, 3, 1, 7, 7), (8, 3, 5, 7, 7), (16, 8, 7, 1, 1), (64, 80, 1, 1, 1), (64, 64, 1, 3, 3), (256, 64, 1, 1, 1), (256, 80, 1, 1, 1), (64, 256, 1, 1, 1), (8, 8, 3, 1, 1), (8, 8, 1, 3, 3), (32, 8, 1, 1, 1), (8, 32, 3, 1, 1), (64, 32, 7, 1, 1), (128, 320, 1, 1, 1), (128, 128, 1, 3, 3), (512, 128, 1, 1, 1), (512, 320, 1, 1, 1), (128, 512, 1, 1, 1), (128, 128, 1, 3, 3), (16, 32, 3, 1, 1), (16, 16, 1, 3, 3), (64, 16, 1, 1, 1), (64, 32, 1, 1, 1), (16, 64, 3, 1, 1), (16, 16, 1, 3, 3), (128, 64, 7, 1, 1), (256, 640, 3, 1, 1), (256, 256, 1, 3, 3), (1024, 256, 1, 1, 1), (1024, 640, 1, 1, 1), (256, 1024, 3, 1, 1), (256, 256, 1, 3, 3), (32, 64, 3, 1, 1), (32, 32, 1, 3, 3), (128, 32, 1, 1, 1), (128, 64, 1, 1, 1), (32, 128, 3, 1, 1), (32, 32, 1, 3, 3), (256, 128, 7, 1, 1), (512, 1280, 3, 1, 1), (512, 512, 1, 3, 3), (2048, 512, 1, 1, 1), (2048, 1280, 1, 1, 1), (512, 2048, 3, 1, 1), (512, 512, 1, 3, 3), (64, 128, 3, 1, 1), (64, 64, 1, 3, 3), (256, 64, 1, 1, 1), (256, 128, 1, 1, 1), (64, 256, 3, 1, 1), (64, 64, 1, 3, 3)], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [(1, 2, 2), (1, 2, 2), (4, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (4, 1, 1), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 1, 1), (4, 1, 1), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 1, 1), (4, 1, 1), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 2, 2), (1, 1, 1), (1, 1, 1)], [(0, 3, 3), (2, 3, 3), (3, 0, 0), (0, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 1, 1), (0, 0, 0), (1, 0, 0), (3, 0, 0), (0, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 1, 1), (1, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 1, 1), (3, 0, 0), (1, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 1, 1), (1, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 1, 1), (3, 0, 0), (1, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 1, 1), (1, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 1, 1)], [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], {}, 51],
['add', 'torch.Tensor', ['torch.cuda.LongTensor'], [[()], [1]], {}, 1],
['batch_norm', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(4, 64, 16, 112, 112), (4, 8, 64, 112, 112), (4, 64, 16, 56, 56), (4, 256, 16, 56, 56), (4, 8, 64, 56, 56), (4, 32, 64, 56, 56), (4, 128, 16, 56, 56), (4, 128, 16, 28, 28), (4, 512, 16, 28, 28), (4, 16, 64, 56, 56), (4, 16, 64, 28, 28), (4, 64, 64, 28, 28), (4, 256, 16, 28, 28), (4, 256, 16, 14, 14), (4, 1024, 16, 14, 14), (4, 32, 64, 28, 28), (4, 32, 64, 14, 14), (4, 128, 64, 14, 14), (4, 512, 16, 14, 14), (4, 512, 16, 7, 7), (4, 2048, 16, 7, 7), (4, 64, 64, 14, 14), (4, 64, 64, 7, 7), (4, 256, 64, 7, 7)], [(64,), (8,), (64,), (256,), (8,), (32,), (128,), (128,), (512,), (16,), (16,), (64,), (256,), (256,), (1024,), (32,), (32,), (128,), (512,), (512,), (2048,), (64,), (64,), (256,)], [(64,), (8,), (64,), (256,), (8,), (32,), (128,), (128,), (512,), (16,), (16,), (64,), (256,), (256,), (1024,), (32,), (32,), (128,), (512,), (512,), (2048,), (64,), (64,), (256,)], [(64,), (8,), (64,), (256,), (8,), (32,), (128,), (128,), (512,), (16,), (16,), (64,), (256,), (256,), (1024,), (32,), (32,), (128,), (512,), (512,), (2048,), (64,), (64,), (256,)], [(64,), (8,), (64,), (256,), (8,), (32,), (128,), (128,), (512,), (16,), (16,), (64,), (256,), (256,), (1024,), (32,), (32,), (128,), (512,), (512,), (2048,), (64,), (64,), (256,)], [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05]], {}, 24],
['relu', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(4, 64, 16, 112, 112), (4, 8, 64, 112, 112), (4, 64, 16, 56, 56), (4, 256, 16, 56, 56), (4, 8, 64, 56, 56), (4, 32, 64, 56, 56), (4, 128, 16, 56, 56), (4, 128, 16, 28, 28), (4, 512, 16, 28, 28), (4, 16, 64, 56, 56), (4, 16, 64, 28, 28), (4, 64, 64, 28, 28), (4, 256, 16, 28, 28), (4, 256, 16, 14, 14), (4, 1024, 16, 14, 14), (4, 32, 64, 28, 28), (4, 32, 64, 14, 14), (4, 128, 64, 14, 14), (4, 512, 16, 14, 14), (4, 512, 16, 7, 7), (4, 2048, 16, 7, 7), (4, 64, 64, 14, 14), (4, 64, 64, 7, 7), (4, 256, 64, 7, 7)]], {'inplace': [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]}, 24],
['max_pool3d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(4, 64, 16, 112, 112), (4, 8, 64, 112, 112)], [(1, 3, 3), (1, 3, 3)], [(1, 2, 2), (1, 2, 2)], [(0, 1, 1), (0, 1, 1)], [1, 1], [False, False], [False, False]], {}, 2],
['cat', 'torch', ['torch.cuda.FloatTensor'], [[((4, 64, 16, 56, 56), (4, 16, 16, 56, 56)), ((4, 256, 16, 56, 56), (4, 64, 16, 56, 56)), ((4, 512, 16, 28, 28), (4, 128, 16, 28, 28)), ((4, 1024, 16, 14, 14), (4, 256, 16, 14, 14)), ((4, 256, 1, 1, 1), (4, 2048, 1, 1, 1))]], {'dim': [1, 1, 1, 1, 1]}, 5],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(4, 256, 16, 56, 56), (4, 32, 64, 56, 56), (4, 512, 16, 28, 28), (4, 64, 64, 28, 28), (4, 1024, 16, 14, 14), (4, 128, 64, 14, 14), (4, 2048, 16, 7, 7), (4, 256, 64, 7, 7)], [(4, 256, 16, 56, 56), (4, 32, 64, 56, 56), (4, 512, 16, 28, 28), (4, 64, 64, 28, 28), (4, 1024, 16, 14, 14), (4, 128, 64, 14, 14), (4, 2048, 16, 7, 7), (4, 256, 64, 7, 7)]], {}, 8],
['adaptive_avg_pool3d', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(4, 2048, 16, 7, 7), (4, 256, 64, 7, 7)], [(1, 1, 1), (1, 1, 1)]], {}, 2],
['dropout', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(4, 2304, 1, 1, 1)], [0.5], [True], [False]], {}, 1],
['linear', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(4, 2304)], [(174, 2304)], [(174,)]], {}, 1],
['cross_entropy', 'torch.nn.functional', ['torch.cuda.FloatTensor', 'torch.cuda.LongTensor'], [[(4, 174)], [(4,)]], {}, 1],
['imul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1.0]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.DoubleTensor'], [[()]], {}, 1],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['radd', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [0]], {}, 1],
['norm', 'torch', ['torch.cuda.FloatTensor'], [[(64, 3, 1, 7, 7), (64,), (64, 80, 1, 1, 1), (64, 64, 1, 3, 3), (256, 64, 1, 1, 1), (256,), (256, 80, 1, 1, 1), (64, 256, 1, 1, 1), (128, 320, 1, 1, 1), (128,), (128, 128, 1, 3, 3), (512, 128, 1, 1, 1), (512,), (512, 320, 1, 1, 1), (128, 512, 1, 1, 1), (256, 640, 3, 1, 1), (256, 256, 1, 3, 3), (1024, 256, 1, 1, 1), (1024,), (1024, 640, 1, 1, 1), (256, 1024, 3, 1, 1), (512, 1280, 3, 1, 1), (512, 512, 1, 3, 3), (2048, 512, 1, 1, 1), (2048,), (2048, 1280, 1, 1, 1), (512, 2048, 3, 1, 1), (16, 8, 7, 1, 1), (64, 32, 7, 1, 1), (128, 64, 7, 1, 1), (256, 128, 7, 1, 1), (8, 3, 5, 7, 7), (8,), (8, 8, 3, 1, 1), (8, 8, 1, 3, 3), (32, 8, 1, 1, 1), (32,), (8, 32, 3, 1, 1), (16, 32, 3, 1, 1), (16,), (16, 16, 1, 3, 3), (64, 16, 1, 1, 1), (64, 32, 1, 1, 1), (16, 64, 3, 1, 1), (32, 64, 3, 1, 1), (32, 32, 1, 3, 3), (128, 32, 1, 1, 1), (128, 64, 1, 1, 1), (32, 128, 3, 1, 1), (64, 128, 3, 1, 1), (256, 128, 1, 1, 1), (64, 256, 3, 1, 1), (174, 2304), (174,), (324,)], [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]], {}, 55],
['stack', 'torch', ['torch.cuda.FloatTensor{}, 1],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [1e-06]], {}, 1],
['rtruediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [40.0]], {}, 1],
['reciprocal', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()]], {}, 1],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[()], [40.0]], {}, 1],
['clamp', 'torch', ['torch.cuda.FloatTensor'], [[()]], {'max': 1.0}, 1],
['mul_', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(64, 3, 1, 7, 7), (64,), (64, 80, 1, 1, 1), (64, 64, 1, 3, 3), (256, 64, 1, 1, 1), (256,), (256, 80, 1, 1, 1), (64, 256, 1, 1, 1), (128, 320, 1, 1, 1), (128,), (128, 128, 1, 3, 3), (512, 128, 1, 1, 1), (512,), (512, 320, 1, 1, 1), (128, 512, 1, 1, 1), (256, 640, 3, 1, 1), (256, 256, 1, 3, 3), (1024, 256, 1, 1, 1), (1024,), (1024, 640, 1, 1, 1), (256, 1024, 3, 1, 1), (512, 1280, 3, 1, 1), (512, 512, 1, 3, 3), (2048, 512, 1, 1, 1), (2048,), (2048, 1280, 1, 1, 1), (512, 2048, 3, 1, 1), (16, 8, 7, 1, 1), (64, 32, 7, 1, 1), (128, 64, 7, 1, 1), (256, 128, 7, 1, 1), (8, 3, 5, 7, 7), (8,), (8, 8, 3, 1, 1), (8, 8, 1, 3, 3), (32, 8, 1, 1, 1), (32,), (8, 32, 3, 1, 1), (16, 32, 3, 1, 1), (16,), (16, 16, 1, 3, 3), (64, 16, 1, 1, 1), (64, 32, 1, 1, 1), (16, 64, 3, 1, 1), (32, 64, 3, 1, 1), (32, 32, 1, 3, 3), (128, 32, 1, 1, 1), (128, 64, 1, 1, 1), (32, 128, 3, 1, 1), (64, 128, 3, 1, 1), (256, 128, 1, 1, 1), (64, 256, 3, 1, 1), (174, 2304), (174,)], [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()]], {}, 54],
['sgd', 'torch.optim._functional', ['torch.cuda.FloatTensor'], [[(64, 3, 1, 7, 7), (64,), (64, 80, 1, 1, 1), (64, 64, 1, 3, 3), (256, 64, 1, 1, 1), (256,), (256, 80, 1, 1, 1), (64, 256, 1, 1, 1), (128, 320, 1, 1, 1), (128,), (128, 128, 1, 3, 3), (512, 128, 1, 1, 1), (512,), (512, 320, 1, 1, 1), (128, 512, 1, 1, 1), (256, 640, 3, 1, 1), (256, 256, 1, 3, 3), (1024, 256, 1, 1, 1), (1024,), (1024, 640, 1, 1, 1), (256, 1024, 3, 1, 1), (512, 1280, 3, 1, 1), (512, 512, 1, 3, 3), (2048, 512, 1, 1, 1), (2048,), (2048, 1280, 1, 1, 1), (512, 2048, 3, 1, 1), (16, 8, 7, 1, 1), (64, 32, 7, 1, 1), (128, 64, 7, 1, 1), (256, 128, 7, 1, 1), (8, 3, 5, 7, 7), (8,), (8, 8, 3, 1, 1), (8, 8, 1, 3, 3), (32, 8, 1, 1, 1), (32,), (8, 32, 3, 1, 1), (16, 32, 3, 1, 1), (16,), (16, 16, 1, 3, 3), (64, 16, 1, 1, 1), (64, 32, 1, 1, 1), (16, 64, 3, 1, 1), (32, 64, 3, 1, 1), (32, 32, 1, 3, 3), (128, 32, 1, 1, 1), (128, 64, 1, 1, 1), (32, 128, 3, 1, 1), (64, 128, 3, 1, 1), (256, 128, 1, 1, 1), (64, 256, 3, 1, 1), (174, 2304), (174,)]], {'weight_decay': 1e-06, 'momentum': 0.9, 'lr': 0.005999999999999998, 'dampening': 0, 'nesterov': False}, 54],
]
llama_config=[
['ne', 'torch.Tensor', ['torch.cuda.LongTensor'], [[(5, 347)], [-1]], {}, 1],
['getitem', 'torch.Tensor', ['torch.cuda.LongTensor'], [[(5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347)], [(slice(None, None, None), slice(0, 8, None)), (slice(None, None, None), 8), (slice(None, None, None), slice(8, 9, None)), (slice(None, None, None), 9), (slice(None, None, None), slice(9, 10, None)), (slice(None, None, None), 10), (slice(None, None, None), slice(10, 11, None)), (slice(None, None, None), 11), (slice(None, None, None), slice(11, 12, None)), (slice(None, None, None), 12), (slice(None, None, None), slice(12, 13, None)), (slice(None, None, None), 13), (slice(None, None, None), slice(13, 14, None)), (slice(None, None, None), 14), (slice(None, None, None), slice(14, 15, None)), (slice(None, None, None), 15), (slice(None, None, None), slice(15, 16, None)), (slice(None, None, None), 16), (slice(None, None, None), slice(16, 17, None)), (slice(None, None, None), 17), (slice(None, None, None), slice(17, 18, None)), (slice(None, None, None), 18), (slice(None, None, None), slice(18, 19, None)), (slice(None, None, None), 19), (slice(None, None, None), slice(19, 20, None)), (slice(None, None, None), 20), (slice(None, None, None), slice(20, 21, None)), (slice(None, None, None), 21), (slice(None, None, None), slice(21, 22, None)), (slice(None, None, None), 22), (slice(None, None, None), slice(22, 23, None)), (slice(None, None, None), 23), (slice(None, None, None), slice(23, 24, None)), (slice(None, None, None), 24), (slice(None, None, None), slice(24, 25, None)), (slice(None, None, None), 25), (slice(None, None, None), slice(25, 26, None)), (slice(None, None, None), 26), (slice(None, None, None), slice(26, 27, None)), (slice(None, None, None), 27), (slice(None, None, None), slice(27, 28, None)), (slice(None, None, None), 28), (slice(None, None, None), slice(28, 29, None)), (slice(None, None, None), 29), (slice(None, None, None), slice(29, 30, None)), (slice(None, None, None), 30), (slice(None, None, None), slice(30, 31, None)), (slice(None, None, None), 31), (slice(None, None, None), slice(31, 32, None)), (slice(None, None, None), 32), (slice(None, None, None), slice(32, 33, None)), (slice(None, None, None), 33), (slice(None, None, None), slice(33, 34, None)), (slice(None, None, None), 34), (slice(None, None, None), slice(34, 35, None)), (slice(None, None, None), 35), (slice(None, None, None), slice(35, 36, None)), (slice(None, None, None), 36), (slice(None, None, None), slice(36, 37, None)), (slice(None, None, None), 37), (slice(None, None, None), slice(37, 38, None)), (slice(None, None, None), 38), (slice(None, None, None), slice(38, 39, None)), (slice(None, None, None), 39), (slice(None, None, None), slice(39, 40, None)), (slice(None, None, None), 40), (slice(None, None, None), slice(40, 41, None)), (slice(None, None, None), 41), (slice(None, None, None), slice(41, 42, None)), (slice(None, None, None), 42), (slice(None, None, None), slice(42, 43, None)), (slice(None, None, None), 43), (slice(None, None, None), slice(43, 44, None)), (slice(None, None, None), 44), (slice(None, None, None), slice(44, 45, None)), (slice(None, None, None), 45), (slice(None, None, None), slice(45, 46, None)), (slice(None, None, None), 46), (slice(None, None, None), slice(46, 47, None)), (slice(None, None, None), 47), (slice(None, None, None), slice(47, 48, None)), (slice(None, None, None), 48), (slice(None, None, None), slice(48, 49, None)), (slice(None, None, None), 49), (slice(None, None, None), slice(49, 50, None)), (slice(None, None, None), 50), (slice(None, None, None), slice(50, 51, None)), (slice(None, None, None), 51), (slice(None, None, None), slice(51, 52, None)), (slice(None, None, None), 52), (slice(None, None, None), slice(52, 53, None)), (slice(None, None, None), 53), (slice(None, None, None), slice(53, 54, None)), (slice(None, None, None), 54), (slice(None, None, None), slice(54, 55, None)), (slice(None, None, None), 55), (slice(None, None, None), slice(55, 56, None)), (slice(None, None, None), 56), (slice(None, None, None), slice(56, 57, None)), (slice(None, None, None), 57), (slice(None, None, None), slice(57, 58, None)), (slice(None, None, None), 58), (slice(None, None, None), slice(58, 59, None)), (slice(None, None, None), 59), (slice(None, None, None), slice(59, 60, None)), (slice(None, None, None), 60), (slice(None, None, None), slice(60, 61, None)), (slice(None, None, None), 61), (slice(None, None, None), slice(61, 62, None)), (slice(None, None, None), 62), (slice(None, None, None), slice(62, 63, None)), (slice(None, None, None), 63), (slice(None, None, None), slice(63, 64, None)), (slice(None, None, None), 64), (slice(None, None, None), slice(64, 65, None)), (slice(None, None, None), 65), (slice(None, None, None), slice(65, 66, None)), (slice(None, None, None), 66), (slice(None, None, None), slice(66, 67, None)), (slice(None, None, None), 67), (slice(None, None, None), slice(67, 68, None)), (slice(None, None, None), 68), (slice(None, None, None), slice(68, 69, None)), (slice(None, None, None), 69), (slice(None, None, None), slice(69, 70, None)), (slice(None, None, None), 70), (slice(None, None, None), slice(70, 71, None)), (slice(None, None, None), 71), (slice(None, None, None), slice(71, 72, None)), (slice(None, None, None), 72), (slice(None, None, None), slice(72, 73, None)), (slice(None, None, None), 73), (slice(None, None, None), slice(73, 74, None)), (slice(None, None, None), 74), (slice(None, None, None), slice(74, 75, None)), (slice(None, None, None), 75), (slice(None, None, None), slice(75, 76, None)), (slice(None, None, None), 76), (slice(None, None, None), slice(76, 77, None)), (slice(None, None, None), 77), (slice(None, None, None), slice(77, 78, None)), (slice(None, None, None), 78), (slice(None, None, None), slice(78, 79, None)), (slice(None, None, None), 79), (slice(None, None, None), slice(79, 80, None)), (slice(None, None, None), 80), (slice(None, None, None), slice(80, 81, None)), (slice(None, None, None), 81), (slice(None, None, None), slice(81, 82, None)), (slice(None, None, None), 82), (slice(None, None, None), slice(82, 83, None)), (slice(None, None, None), 83), (slice(None, None, None), slice(83, 84, None)), (slice(None, None, None), 84), (slice(None, None, None), slice(84, 85, None)), (slice(None, None, None), 85), (slice(None, None, None), slice(85, 86, None)), (slice(None, None, None), 86), (slice(None, None, None), slice(86, 87, None)), (slice(None, None, None), 87), (slice(None, None, None), slice(87, 88, None)), (slice(None, None, None), 88), (slice(None, None, None), slice(88, 89, None)), (slice(None, None, None), 89), (slice(None, None, None), slice(89, 90, None)), (slice(None, None, None), 90), (slice(None, None, None), slice(90, 91, None)), (slice(None, None, None), 91), (slice(None, None, None), slice(91, 92, None)), (slice(None, None, None), 92), (slice(None, None, None), slice(92, 93, None)), (slice(None, None, None), 93), (slice(None, None, None), slice(93, 94, None)), (slice(None, None, None), 94), (slice(None, None, None), slice(94, 95, None)), (slice(None, None, None), 95), (slice(None, None, None), slice(95, 96, None)), (slice(None, None, None), 96), (slice(None, None, None), slice(96, 97, None)), (slice(None, None, None), 97), (slice(None, None, None), slice(97, 98, None)), (slice(None, None, None), 98), (slice(None, None, None), slice(98, 99, None)), (slice(None, None, None), 99), (slice(None, None, None), slice(99, 100, None)), (slice(None, None, None), 100), (slice(None, None, None), slice(100, 101, None)), (slice(None, None, None), 101), (slice(None, None, None), slice(101, 102, None)), (slice(None, None, None), 102), (slice(None, None, None), slice(102, 103, None)), (slice(None, None, None), 103), (slice(None, None, None), slice(103, 104, None)), (slice(None, None, None), 104), (slice(None, None, None), slice(104, 105, None)), (slice(None, None, None), 105), (slice(None, None, None), slice(105, 106, None)), (slice(None, None, None), 106), (slice(None, None, None), slice(106, 107, None)), (slice(None, None, None), 107), (slice(None, None, None), slice(107, 108, None)), (slice(None, None, None), 108), (slice(None, None, None), slice(108, 109, None)), (slice(None, None, None), 109), (slice(None, None, None), slice(109, 110, None)), (slice(None, None, None), 110), (slice(None, None, None), slice(110, 111, None)), (slice(None, None, None), 111), (slice(None, None, None), slice(111, 112, None)), (slice(None, None, None), 112), (slice(None, None, None), slice(112, 113, None)), (slice(None, None, None), 113), (slice(None, None, None), slice(113, 114, None)), (slice(None, None, None), 114), (slice(None, None, None), slice(114, 115, None)), (slice(None, None, None), 115), (slice(None, None, None), slice(115, 116, None)), (slice(None, None, None), 116), (slice(None, None, None), slice(116, 117, None)), (slice(None, None, None), 117), (slice(None, None, None), slice(117, 118, None)), (slice(None, None, None), 118), (slice(None, None, None), slice(118, 119, None)), (slice(None, None, None), 119), (slice(None, None, None), slice(119, 120, None)), (slice(None, None, None), 120), (slice(None, None, None), slice(120, 121, None)), (slice(None, None, None), 121), (slice(None, None, None), slice(121, 122, None)), (slice(None, None, None), 122), (slice(None, None, None), slice(122, 123, None)), (slice(None, None, None), 123), (slice(None, None, None), slice(123, 124, None)), (slice(None, None, None), 124), (slice(None, None, None), slice(124, 125, None)), (slice(None, None, None), 125), (slice(None, None, None), slice(125, 126, None)), (slice(None, None, None), 126), (slice(None, None, None), slice(126, 127, None)), (slice(None, None, None), 127), (slice(None, None, None), slice(127, 128, None)), (slice(None, None, None), 128), (slice(None, None, None), slice(128, 129, None)), (slice(None, None, None), 129), (slice(None, None, None), slice(129, 130, None)), (slice(None, None, None), 130), (slice(None, None, None), slice(130, 131, None)), (slice(None, None, None), 131), (slice(None, None, None), slice(131, 132, None)), (slice(None, None, None), 132), (slice(None, None, None), slice(132, 133, None)), (slice(None, None, None), 133), (slice(None, None, None), slice(133, 134, None)), (slice(None, None, None), 134), (slice(None, None, None), slice(134, 135, None)), (slice(None, None, None), 135), (slice(None, None, None), slice(135, 136, None)), (slice(None, None, None), 136), (slice(None, None, None), slice(136, 137, None)), (slice(None, None, None), 137), (slice(None, None, None), slice(137, 138, None)), (slice(None, None, None), 138), (slice(None, None, None), slice(138, 139, None)), (slice(None, None, None), 139), (slice(None, None, None), slice(139, 140, None)), (slice(None, None, None), 140), (slice(None, None, None), slice(140, 141, None)), (slice(None, None, None), 141), (slice(None, None, None), slice(141, 142, None)), (slice(None, None, None), 142), (slice(None, None, None), slice(142, 143, None)), (slice(None, None, None), 143), (slice(None, None, None), slice(143, 144, None)), (slice(None, None, None), 144), (slice(None, None, None), slice(144, 145, None)), (slice(None, None, None), 145), (slice(None, None, None), slice(145, 146, None)), (slice(None, None, None), 146), (slice(None, None, None), slice(146, 147, None)), (slice(None, None, None), 147), (slice(None, None, None), slice(147, 148, None)), (slice(None, None, None), 148), (slice(None, None, None), slice(148, 149, None)), (slice(None, None, None), 149), (slice(None, None, None), slice(149, 150, None)), (slice(None, None, None), 150), (slice(None, None, None), slice(150, 151, None)), (slice(None, None, None), 151), (slice(None, None, None), slice(151, 152, None)), (slice(None, None, None), 152), (slice(None, None, None), slice(152, 153, None)), (slice(None, None, None), 153), (slice(None, None, None), slice(153, 154, None)), (slice(None, None, None), 154), (slice(None, None, None), slice(154, 155, None)), (slice(None, None, None), 155), (slice(None, None, None), slice(155, 156, None)), (slice(None, None, None), 156), (slice(None, None, None), slice(156, 157, None)), (slice(None, None, None), 157), (slice(None, None, None), slice(157, 158, None)), (slice(None, None, None), 158), (slice(None, None, None), slice(158, 159, None)), (slice(None, None, None), 159), (slice(None, None, None), slice(159, 160, None)), (slice(None, None, None), 160), (slice(None, None, None), slice(160, 161, None)), (slice(None, None, None), 161), (slice(None, None, None), slice(161, 162, None)), (slice(None, None, None), 162), (slice(None, None, None), slice(162, 163, None)), (slice(None, None, None), 163), (slice(None, None, None), slice(163, 164, None)), (slice(None, None, None), 164), (slice(None, None, None), slice(164, 165, None)), (slice(None, None, None), 165), (slice(None, None, None), slice(165, 166, None)), (slice(None, None, None), 166), (slice(None, None, None), slice(166, 167, None)), (slice(None, None, None), 167), (slice(None, None, None), slice(167, 168, None)), (slice(None, None, None), 168), (slice(None, None, None), slice(168, 169, None)), (slice(None, None, None), 169), (slice(None, None, None), slice(169, 170, None)), (slice(None, None, None), 170), (slice(None, None, None), slice(170, 171, None)), (slice(None, None, None), 171), (slice(None, None, None), slice(171, 172, None)), (slice(None, None, None), 172), (slice(None, None, None), slice(172, 173, None)), (slice(None, None, None), 173), (slice(None, None, None), slice(173, 174, None)), (slice(None, None, None), 174), (slice(None, None, None), slice(174, 175, None)), (slice(None, None, None), 175), (slice(None, None, None), slice(175, 176, None)), (slice(None, None, None), 176), (slice(None, None, None), slice(176, 177, None)), (slice(None, None, None), 177), (slice(None, None, None), slice(177, 178, None)), (slice(None, None, None), 178), (slice(None, None, None), slice(178, 179, None)), (slice(None, None, None), 179), (slice(None, None, None), slice(179, 180, None)), (slice(None, None, None), 180), (slice(None, None, None), slice(180, 181, None)), (slice(None, None, None), 181), (slice(None, None, None), slice(181, 182, None)), (slice(None, None, None), 182), (slice(None, None, None), slice(182, 183, None)), (slice(None, None, None), 183), (slice(None, None, None), slice(183, 184, None)), (slice(None, None, None), 184), (slice(None, None, None), slice(184, 185, None)), (slice(None, None, None), 185), (slice(None, None, None), slice(185, 186, None)), (slice(None, None, None), 186), (slice(None, None, None), slice(186, 187, None)), (slice(None, None, None), 187), (slice(None, None, None), slice(187, 188, None)), (slice(None, None, None), 188), (slice(None, None, None), slice(188, 189, None)), (slice(None, None, None), 189), (slice(None, None, None), slice(189, 190, None)), (slice(None, None, None), 190), (slice(None, None, None), slice(190, 191, None)), (slice(None, None, None), 191), (slice(None, None, None), slice(191, 192, None)), (slice(None, None, None), 192), (slice(None, None, None), slice(192, 193, None)), (slice(None, None, None), 193), (slice(None, None, None), slice(193, 194, None)), (slice(None, None, None), 194), (slice(None, None, None), slice(194, 195, None)), (slice(None, None, None), 195), (slice(None, None, None), slice(195, 196, None)), (slice(None, None, None), 196), (slice(None, None, None), slice(196, 197, None)), (slice(None, None, None), 197), (slice(None, None, None), slice(197, 198, None)), (slice(None, None, None), 198), (slice(None, None, None), slice(198, 199, None)), (slice(None, None, None), 199), (slice(None, None, None), slice(199, 200, None)), (slice(None, None, None), 200), (slice(None, None, None), slice(200, 201, None)), (slice(None, None, None), 201), (slice(None, None, None), slice(201, 202, None)), (slice(None, None, None), 202), (slice(None, None, None), slice(202, 203, None)), (slice(None, None, None), 203), (slice(None, None, None), slice(203, 204, None)), (slice(None, None, None), 204), (slice(None, None, None), slice(204, 205, None)), (slice(None, None, None), 205), (slice(None, None, None), slice(205, 206, None)), (slice(None, None, None), 206), (slice(None, None, None), slice(206, 207, None)), (slice(None, None, None), 207), (slice(None, None, None), slice(207, 208, None)), (slice(None, None, None), 208), (slice(None, None, None), slice(208, 209, None)), (slice(None, None, None), 209), (slice(None, None, None), slice(209, 210, None)), (slice(None, None, None), 210), (slice(None, None, None), slice(210, 211, None)), (slice(None, None, None), 211), (slice(None, None, None), slice(211, 212, None)), (slice(None, None, None), 212), (slice(None, None, None), slice(212, 213, None)), (slice(None, None, None), 213), (slice(None, None, None), slice(213, 214, None)), (slice(None, None, None), 214), (slice(None, None, None), slice(214, 215, None)), (slice(None, None, None), 215), (slice(None, None, None), slice(215, 216, None)), (slice(None, None, None), 216), (slice(None, None, None), slice(216, 217, None)), (slice(None, None, None), 217), (slice(None, None, None), slice(217, 218, None)), (slice(None, None, None), 218), (slice(None, None, None), slice(218, 219, None)), (slice(None, None, None), 219), (slice(None, None, None), slice(219, 220, None)), (slice(None, None, None), 220), (slice(None, None, None), slice(220, 221, None)), (slice(None, None, None), 221), (slice(None, None, None), slice(221, 222, None)), (slice(None, None, None), 222), (slice(None, None, None), slice(222, 223, None)), (slice(None, None, None), 223), (slice(None, None, None), slice(223, 224, None)), (slice(None, None, None), 224), (slice(None, None, None), slice(224, 225, None)), (slice(None, None, None), 225), (slice(None, None, None), slice(225, 226, None)), (slice(None, None, None), 226), (slice(None, None, None), slice(226, 227, None)), (slice(None, None, None), 227), (slice(None, None, None), slice(227, 228, None)), (slice(None, None, None), 228), (slice(None, None, None), slice(228, 229, None)), (slice(None, None, None), 229), (slice(None, None, None), slice(229, 230, None)), (slice(None, None, None), 230), (slice(None, None, None), slice(230, 231, None)), (slice(None, None, None), 231), (slice(None, None, None), slice(231, 232, None)), (slice(None, None, None), 232), (slice(None, None, None), slice(232, 233, None)), (slice(None, None, None), 233), (slice(None, None, None), slice(233, 234, None)), (slice(None, None, None), 234), (slice(None, None, None), slice(234, 235, None)), (slice(None, None, None), 235), (slice(None, None, None), slice(235, 236, None)), (slice(None, None, None), 236), (slice(None, None, None), slice(236, 237, None)), (slice(None, None, None), 237), (slice(None, None, None), slice(237, 238, None)), (slice(None, None, None), 238), (slice(None, None, None), slice(238, 239, None)), (slice(None, None, None), 239), (slice(None, None, None), slice(239, 240, None)), (slice(None, None, None), 240), (slice(None, None, None), slice(240, 241, None)), (slice(None, None, None), 241), (slice(None, None, None), slice(241, 242, None)), (slice(None, None, None), 242), (slice(None, None, None), slice(242, 243, None)), (slice(None, None, None), 243), (slice(None, None, None), slice(243, 244, None)), (slice(None, None, None), 244), (slice(None, None, None), slice(244, 245, None)), (slice(None, None, None), 245), (slice(None, None, None), slice(245, 246, None)), (slice(None, None, None), 246), (slice(None, None, None), slice(246, 247, None)), (slice(None, None, None), 247), (slice(None, None, None), slice(247, 248, None)), (slice(None, None, None), 248), (slice(None, None, None), slice(248, 249, None)), (slice(None, None, None), 249), (slice(None, None, None), slice(249, 250, None)), (slice(None, None, None), 250), (slice(None, None, None), slice(250, 251, None)), (slice(None, None, None), 251), (slice(None, None, None), slice(251, 252, None)), (slice(None, None, None), 252), (slice(None, None, None), slice(252, 253, None)), (slice(None, None, None), 253), (slice(None, None, None), slice(253, 254, None)), (slice(None, None, None), 254), (slice(None, None, None), slice(254, 255, None)), (slice(None, None, None), 255), (slice(None, None, None), slice(255, 256, None)), (slice(None, None, None), 256), (slice(None, None, None), slice(256, 257, None)), (slice(None, None, None), 257), (slice(None, None, None), slice(257, 258, None)), (slice(None, None, None), 258), (slice(None, None, None), slice(258, 259, None)), (slice(None, None, None), 259), (slice(None, None, None), slice(259, 260, None)), (slice(None, None, None), 260), (slice(None, None, None), slice(260, 261, None)), (slice(None, None, None), 261), (slice(None, None, None), slice(261, 262, None)), (slice(None, None, None), 262), (slice(None, None, None), slice(262, 263, None)), (slice(None, None, None), 263), (slice(None, None, None), slice(263, 264, None)), (slice(None, None, None), 264), (slice(None, None, None), slice(264, 265, None)), (slice(None, None, None), 265), (slice(None, None, None), slice(265, 266, None)), (slice(None, None, None), 266), (slice(None, None, None), slice(266, 267, None)), (slice(None, None, None), 267), (slice(None, None, None), slice(267, 268, None)), (slice(None, None, None), 268), (slice(None, None, None), slice(268, 269, None)), (slice(None, None, None), 269), (slice(None, None, None), slice(269, 270, None)), (slice(None, None, None), 270), (slice(None, None, None), slice(270, 271, None)), (slice(None, None, None), 271), (slice(None, None, None), slice(271, 272, None)), (slice(None, None, None), 272), (slice(None, None, None), slice(272, 273, None)), (slice(None, None, None), 273), (slice(None, None, None), slice(273, 274, None)), (slice(None, None, None), 274), (slice(None, None, None), slice(274, 275, None)), (slice(None, None, None), 275), (slice(None, None, None), slice(275, 276, None)), (slice(None, None, None), 276), (slice(None, None, None), slice(276, 277, None)), (slice(None, None, None), 277), (slice(None, None, None), slice(277, 278, None)), (slice(None, None, None), 278), (slice(None, None, None), slice(278, 279, None)), (slice(None, None, None), 279), (slice(None, None, None), slice(279, 280, None)), (slice(None, None, None), 280), (slice(None, None, None), slice(280, 281, None)), (slice(None, None, None), 281), (slice(None, None, None), slice(281, 282, None)), (slice(None, None, None), 282), (slice(None, None, None), slice(282, 283, None)), (slice(None, None, None), 283), (slice(None, None, None), slice(283, 284, None)), (slice(None, None, None), 284), (slice(None, None, None), slice(284, 285, None)), (slice(None, None, None), 285), (slice(None, None, None), slice(285, 286, None)), (slice(None, None, None), 286), (slice(None, None, None), slice(286, 287, None)), (slice(None, None, None), 287), (slice(None, None, None), slice(287, 288, None)), (slice(None, None, None), 288), (slice(None, None, None), slice(288, 289, None)), (slice(None, None, None), 289), (slice(None, None, None), slice(289, 290, None)), (slice(None, None, None), 290), (slice(None, None, None), slice(290, 291, None)), (slice(None, None, None), 291), (slice(None, None, None), slice(291, 292, None)), (slice(None, None, None), 292), (slice(None, None, None), slice(292, 293, None)), (slice(None, None, None), 293), (slice(None, None, None), slice(293, 294, None)), (slice(None, None, None), 294), (slice(None, None, None), slice(294, 295, None)), (slice(None, None, None), 295), (slice(None, None, None), slice(295, 296, None)), (slice(None, None, None), 296), (slice(None, None, None), slice(296, 297, None)), (slice(None, None, None), 297), (slice(None, None, None), slice(297, 298, None)), (slice(None, None, None), 298), (slice(None, None, None), slice(298, 299, None)), (slice(None, None, None), 299), (slice(None, None, None), slice(299, 300, None)), (slice(None, None, None), 300), (slice(None, None, None), slice(300, 301, None)), (slice(None, None, None), 301), (slice(None, None, None), slice(301, 302, None)), (slice(None, None, None), 302), (slice(None, None, None), slice(302, 303, None)), (slice(None, None, None), 303), (slice(None, None, None), slice(303, 304, None)), (slice(None, None, None), 304), (slice(None, None, None), slice(304, 305, None)), (slice(None, None, None), 305), (slice(None, None, None), slice(305, 306, None)), (slice(None, None, None), 306), (slice(None, None, None), slice(306, 307, None)), (slice(None, None, None), 307), (slice(None, None, None), slice(307, 308, None)), (slice(None, None, None), 308), (slice(None, None, None), slice(308, 309, None)), (slice(None, None, None), 309), (slice(None, None, None), slice(309, 310, None)), (slice(None, None, None), 310), (slice(None, None, None), slice(310, 311, None)), (slice(None, None, None), 311), (slice(None, None, None), slice(311, 312, None)), (slice(None, None, None), 312), (slice(None, None, None), slice(312, 313, None)), (slice(None, None, None), 313), (slice(None, None, None), slice(313, 314, None)), (slice(None, None, None), 314), (slice(None, None, None), slice(314, 315, None)), (slice(None, None, None), 315), (slice(None, None, None), slice(315, 316, None)), (slice(None, None, None), 316), (slice(None, None, None), slice(316, 317, None)), (slice(None, None, None), 317), (slice(None, None, None), slice(317, 318, None)), (slice(None, None, None), 318), (slice(None, None, None), slice(318, 319, None)), (slice(None, None, None), 319), (slice(None, None, None), slice(319, 320, None)), (slice(None, None, None), 320), (slice(None, None, None), slice(320, 321, None)), (slice(None, None, None), 321), (slice(None, None, None), slice(321, 322, None)), (slice(None, None, None), 322), (slice(None, None, None), slice(322, 323, None)), (slice(None, None, None), 323), (slice(None, None, None), slice(323, 324, None)), (slice(None, None, None), 324), (slice(None, None, None), slice(324, 325, None)), (slice(None, None, None), 325), (slice(None, None, None), slice(325, 326, None)), (slice(None, None, None), 326), (slice(None, None, None), slice(326, 327, None)), (slice(None, None, None), 327), (slice(None, None, None), slice(327, 328, None)), (slice(None, None, None), 328), (slice(None, None, None), slice(328, 329, None)), (slice(None, None, None), 329), (slice(None, None, None), slice(329, 330, None)), (slice(None, None, None), 330), (slice(None, None, None), slice(330, 331, None)), (slice(None, None, None), 331), (slice(None, None, None), slice(331, 332, None)), (slice(None, None, None), 332), (slice(None, None, None), slice(332, 333, None)), (slice(None, None, None), 333), (slice(None, None, None), slice(333, 334, None)), (slice(None, None, None), 334), (slice(None, None, None), slice(334, 335, None)), (slice(None, None, None), 335), (slice(None, None, None), slice(335, 336, None)), (slice(None, None, None), 336), (slice(None, None, None), slice(336, 337, None)), (slice(None, None, None), 337), (slice(None, None, None), slice(337, 338, None)), (slice(None, None, None), 338), (slice(None, None, None), slice(338, 339, None)), (slice(None, None, None), 339), (slice(None, None, None), slice(339, 340, None)), (slice(None, None, None), 340), (slice(None, None, None), slice(340, 341, None)), (slice(None, None, None), 341), (slice(None, None, None), slice(341, 342, None)), (slice(None, None, None), 342), (slice(None, None, None), slice(342, 343, None)), (slice(None, None, None), 343), (slice(None, None, None), slice(343, 344, None)), (slice(None, None, None), 344), (slice(None, None, None), slice(344, 345, None)), (slice(None, None, None), 345), (slice(None, None, None), slice(345, 346, None)), (slice(None, None, None), 346)]], {}, 678],
['embedding', 'torch.nn.functional', ['torch.cuda.LongTensor', 'torch.cuda.HalfTensor'], [[(5, 8), (5, 1)], [(32000, 4096), (32000, 4096)], [None, None], [None, None], [False, False], [False, False], [False, False]], {}, 2],
['getitem', 'torch.Tensor', ['torch.cuda.ComplexFloatTensor'], [[(1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64), (1024, 64)], [slice(0, 8, None), slice(8, 9, None), slice(9, 10, None), slice(10, 11, None), slice(11, 12, None), slice(12, 13, None), slice(13, 14, None), slice(14, 15, None), slice(15, 16, None), slice(16, 17, None), slice(17, 18, None), slice(18, 19, None), slice(19, 20, None), slice(20, 21, None), slice(21, 22, None), slice(22, 23, None), slice(23, 24, None), slice(24, 25, None), slice(25, 26, None), slice(26, 27, None), slice(27, 28, None), slice(28, 29, None), slice(29, 30, None), slice(30, 31, None), slice(31, 32, None), slice(32, 33, None), slice(33, 34, None), slice(34, 35, None), slice(35, 36, None), slice(36, 37, None), slice(37, 38, None), slice(38, 39, None), slice(39, 40, None), slice(40, 41, None), slice(41, 42, None), slice(42, 43, None), slice(43, 44, None), slice(44, 45, None), slice(45, 46, None), slice(46, 47, None), slice(47, 48, None), slice(48, 49, None), slice(49, 50, None), slice(50, 51, None), slice(51, 52, None), slice(52, 53, None), slice(53, 54, None), slice(54, 55, None), slice(55, 56, None), slice(56, 57, None), slice(57, 58, None), slice(58, 59, None), slice(59, 60, None), slice(60, 61, None), slice(61, 62, None), slice(62, 63, None), slice(63, 64, None), slice(64, 65, None), slice(65, 66, None), slice(66, 67, None), slice(67, 68, None), slice(68, 69, None), slice(69, 70, None), slice(70, 71, None), slice(71, 72, None), slice(72, 73, None), slice(73, 74, None), slice(74, 75, None), slice(75, 76, None), slice(76, 77, None), slice(77, 78, None), slice(78, 79, None), slice(79, 80, None), slice(80, 81, None), slice(81, 82, None), slice(82, 83, None), slice(83, 84, None), slice(84, 85, None), slice(85, 86, None), slice(86, 87, None), slice(87, 88, None), slice(88, 89, None), slice(89, 90, None), slice(90, 91, None), slice(91, 92, None), slice(92, 93, None), slice(93, 94, None), slice(94, 95, None), slice(95, 96, None), slice(96, 97, None), slice(97, 98, None), slice(98, 99, None), slice(99, 100, None), slice(100, 101, None), slice(101, 102, None), slice(102, 103, None), slice(103, 104, None), slice(104, 105, None), slice(105, 106, None), slice(106, 107, None), slice(107, 108, None), slice(108, 109, None), slice(109, 110, None), slice(110, 111, None), slice(111, 112, None), slice(112, 113, None), slice(113, 114, None), slice(114, 115, None), slice(115, 116, None), slice(116, 117, None), slice(117, 118, None), slice(118, 119, None), slice(119, 120, None), slice(120, 121, None), slice(121, 122, None), slice(122, 123, None), slice(123, 124, None), slice(124, 125, None), slice(125, 126, None), slice(126, 127, None), slice(127, 128, None), slice(128, 129, None), slice(129, 130, None), slice(130, 131, None), slice(131, 132, None), slice(132, 133, None), slice(133, 134, None), slice(134, 135, None), slice(135, 136, None), slice(136, 137, None), slice(137, 138, None), slice(138, 139, None), slice(139, 140, None), slice(140, 141, None), slice(141, 142, None), slice(142, 143, None), slice(143, 144, None), slice(144, 145, None), slice(145, 146, None), slice(146, 147, None), slice(147, 148, None), slice(148, 149, None), slice(149, 150, None), slice(150, 151, None), slice(151, 152, None), slice(152, 153, None), slice(153, 154, None), slice(154, 155, None), slice(155, 156, None), slice(156, 157, None), slice(157, 158, None), slice(158, 159, None), slice(159, 160, None), slice(160, 161, None), slice(161, 162, None), slice(162, 163, None), slice(163, 164, None), slice(164, 165, None), slice(165, 166, None), slice(166, 167, None), slice(167, 168, None), slice(168, 169, None), slice(169, 170, None), slice(170, 171, None), slice(171, 172, None), slice(172, 173, None), slice(173, 174, None), slice(174, 175, None), slice(175, 176, None), slice(176, 177, None), slice(177, 178, None), slice(178, 179, None), slice(179, 180, None), slice(180, 181, None), slice(181, 182, None), slice(182, 183, None), slice(183, 184, None), slice(184, 185, None), slice(185, 186, None), slice(186, 187, None), slice(187, 188, None), slice(188, 189, None), slice(189, 190, None), slice(190, 191, None), slice(191, 192, None), slice(192, 193, None), slice(193, 194, None), slice(194, 195, None), slice(195, 196, None), slice(196, 197, None), slice(197, 198, None), slice(198, 199, None), slice(199, 200, None), slice(200, 201, None), slice(201, 202, None), slice(202, 203, None), slice(203, 204, None), slice(204, 205, None), slice(205, 206, None), slice(206, 207, None), slice(207, 208, None), slice(208, 209, None), slice(209, 210, None), slice(210, 211, None), slice(211, 212, None), slice(212, 213, None), slice(213, 214, None), slice(214, 215, None), slice(215, 216, None), slice(216, 217, None), slice(217, 218, None), slice(218, 219, None), slice(219, 220, None), slice(220, 221, None), slice(221, 222, None), slice(222, 223, None), slice(223, 224, None), slice(224, 225, None), slice(225, 226, None), slice(226, 227, None), slice(227, 228, None), slice(228, 229, None), slice(229, 230, None), slice(230, 231, None), slice(231, 232, None), slice(232, 233, None), slice(233, 234, None), slice(234, 235, None), slice(235, 236, None), slice(236, 237, None), slice(237, 238, None), slice(238, 239, None), slice(239, 240, None), slice(240, 241, None), slice(241, 242, None), slice(242, 243, None), slice(243, 244, None), slice(244, 245, None), slice(245, 246, None), slice(246, 247, None), slice(247, 248, None), slice(248, 249, None), slice(249, 250, None), slice(250, 251, None), slice(251, 252, None), slice(252, 253, None), slice(253, 254, None), slice(254, 255, None), slice(255, 256, None), slice(256, 257, None), slice(257, 258, None), slice(258, 259, None), slice(259, 260, None), slice(260, 261, None), slice(261, 262, None), slice(262, 263, None), slice(263, 264, None), slice(264, 265, None), slice(265, 266, None), slice(266, 267, None), slice(267, 268, None), slice(268, 269, None), slice(269, 270, None), slice(270, 271, None), slice(271, 272, None), slice(272, 273, None), slice(273, 274, None), slice(274, 275, None), slice(275, 276, None), slice(276, 277, None), slice(277, 278, None), slice(278, 279, None), slice(279, 280, None), slice(280, 281, None), slice(281, 282, None), slice(282, 283, None), slice(283, 284, None), slice(284, 285, None), slice(285, 286, None), slice(286, 287, None), slice(287, 288, None), slice(288, 289, None), slice(289, 290, None), slice(290, 291, None), slice(291, 292, None), slice(292, 293, None), slice(293, 294, None), slice(294, 295, None), slice(295, 296, None), slice(296, 297, None), slice(297, 298, None), slice(298, 299, None), slice(299, 300, None), slice(300, 301, None), slice(301, 302, None), slice(302, 303, None), slice(303, 304, None), slice(304, 305, None), slice(305, 306, None), slice(306, 307, None), slice(307, 308, None), slice(308, 309, None), slice(309, 310, None), slice(310, 311, None), slice(311, 312, None), slice(312, 313, None), slice(313, 314, None), slice(314, 315, None), slice(315, 316, None), slice(316, 317, None), slice(317, 318, None), slice(318, 319, None), slice(319, 320, None), slice(320, 321, None), slice(321, 322, None), slice(322, 323, None), slice(323, 324, None), slice(324, 325, None), slice(325, 326, None), slice(326, 327, None), slice(327, 328, None), slice(328, 329, None), slice(329, 330, None), slice(330, 331, None), slice(331, 332, None), slice(332, 333, None), slice(333, 334, None), slice(334, 335, None), slice(335, 336, None), slice(336, 337, None), slice(337, 338, None), slice(338, 339, None), slice(339, 340, None), slice(340, 341, None), slice(341, 342, None), slice(342, 343, None), slice(343, 344, None), slice(344, 345, None), slice(345, 346, None)]], {}, 339],
['triu', 'torch', ['torch.cuda.FloatTensor'], [[(1, 1, 8, 8)]], {'diagonal': 1}, 1],
['pow', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(5, 8, 4096), (5, 1, 4096)], [2, 2]], {}, 2],
['mean', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(5, 8, 4096), (5, 1, 4096)], [-1, -1]], {'keepdim': [True, True]}, 2],
['add', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(5, 8, 1), (5, 1, 1)], [1e-06, 1e-06]], {}, 2],
['rsqrt', 'torch', ['torch.cuda.FloatTensor'], [[(5, 8, 1), (5, 1, 1)]], {}, 2],
['mul', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(5, 8, 4096), (5, 1, 4096)], [(5, 8, 1), (5, 1, 1)]], {}, 2],
['mul', 'torch.Tensor', ['torch.cuda.HalfTensor', 'torch.cuda.HalfTensor'], [[(5, 8, 4096), (5, 8, 11008), (5, 1, 4096), (5, 1, 11008)], [(4096,), (5, 8, 11008), (4096,), (5, 1, 11008)]], {}, 4],
['linear', 'torch.nn.functional', ['torch.cuda.HalfTensor', 'torch.cuda.HalfTensor'], [[(5, 8, 4096), (5, 8, 4096), (5, 4096), (5, 1, 4096), (5, 1, 4096)], [(4096, 4096), (11008, 4096), (32000, 4096), (4096, 4096), (11008, 4096)], [None, None, None, None, None]], {}, 5],
['view_as_complex', 'torch', ['torch.cuda.FloatTensor'], [[(5, 8, 32, 64, 2), (5, 1, 32, 64, 2)]], {}, 2],
['mul', 'torch.Tensor', ['torch.cuda.ComplexFloatTensor', 'torch.cuda.ComplexFloatTensor'], [[(5, 8, 32, 64), (5, 1, 32, 64)], [(1, 8, 1, 64), (1, 1, 1, 64)]], {}, 2],
['view_as_real', 'torch', ['torch.cuda.ComplexFloatTensor'], [[(5, 8, 32, 64), (5, 1, 32, 64)]], {}, 2],
['setitem', 'torch.Tensor', ['torch.cuda.HalfTensor', 'torch.cuda.HalfTensor'], [[(32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128)], [(slice(None, 5, None), slice(0, 8, None)), (slice(None, 5, None), slice(8, 9, None)), (slice(None, 5, None), slice(9, 10, None)), (slice(None, 5, None), slice(10, 11, None)), (slice(None, 5, None), slice(11, 12, None)), (slice(None, 5, None), slice(12, 13, None)), (slice(None, 5, None), slice(13, 14, None)), (slice(None, 5, None), slice(14, 15, None)), (slice(None, 5, None), slice(15, 16, None)), (slice(None, 5, None), slice(16, 17, None)), (slice(None, 5, None), slice(17, 18, None)), (slice(None, 5, None), slice(18, 19, None)), (slice(None, 5, None), slice(19, 20, None)), (slice(None, 5, None), slice(20, 21, None)), (slice(None, 5, None), slice(21, 22, None)), (slice(None, 5, None), slice(22, 23, None)), (slice(None, 5, None), slice(23, 24, None)), (slice(None, 5, None), slice(24, 25, None)), (slice(None, 5, None), slice(25, 26, None)), (slice(None, 5, None), slice(26, 27, None)), (slice(None, 5, None), slice(27, 28, None)), (slice(None, 5, None), slice(28, 29, None)), (slice(None, 5, None), slice(29, 30, None)), (slice(None, 5, None), slice(30, 31, None)), (slice(None, 5, None), slice(31, 32, None)), (slice(None, 5, None), slice(32, 33, None)), (slice(None, 5, None), slice(33, 34, None)), (slice(None, 5, None), slice(34, 35, None)), (slice(None, 5, None), slice(35, 36, None)), (slice(None, 5, None), slice(36, 37, None)), (slice(None, 5, None), slice(37, 38, None)), (slice(None, 5, None), slice(38, 39, None)), (slice(None, 5, None), slice(39, 40, None)), (slice(None, 5, None), slice(40, 41, None)), (slice(None, 5, None), slice(41, 42, None)), (slice(None, 5, None), slice(42, 43, None)), (slice(None, 5, None), slice(43, 44, None)), (slice(None, 5, None), slice(44, 45, None)), (slice(None, 5, None), slice(45, 46, None)), (slice(None, 5, None), slice(46, 47, None)), (slice(None, 5, None), slice(47, 48, None)), (slice(None, 5, None), slice(48, 49, None)), (slice(None, 5, None), slice(49, 50, None)), (slice(None, 5, None), slice(50, 51, None)), (slice(None, 5, None), slice(51, 52, None)), (slice(None, 5, None), slice(52, 53, None)), (slice(None, 5, None), slice(53, 54, None)), (slice(None, 5, None), slice(54, 55, None)), (slice(None, 5, None), slice(55, 56, None)), (slice(None, 5, None), slice(56, 57, None)), (slice(None, 5, None), slice(57, 58, None)), (slice(None, 5, None), slice(58, 59, None)), (slice(None, 5, None), slice(59, 60, None)), (slice(None, 5, None), slice(60, 61, None)), (slice(None, 5, None), slice(61, 62, None)), (slice(None, 5, None), slice(62, 63, None)), (slice(None, 5, None), slice(63, 64, None)), (slice(None, 5, None), slice(64, 65, None)), (slice(None, 5, None), slice(65, 66, None)), (slice(None, 5, None), slice(66, 67, None)), (slice(None, 5, None), slice(67, 68, None)), (slice(None, 5, None), slice(68, 69, None)), (slice(None, 5, None), slice(69, 70, None)), (slice(None, 5, None), slice(70, 71, None)), (slice(None, 5, None), slice(71, 72, None)), (slice(None, 5, None), slice(72, 73, None)), (slice(None, 5, None), slice(73, 74, None)), (slice(None, 5, None), slice(74, 75, None)), (slice(None, 5, None), slice(75, 76, None)), (slice(None, 5, None), slice(76, 77, None)), (slice(None, 5, None), slice(77, 78, None)), (slice(None, 5, None), slice(78, 79, None)), (slice(None, 5, None), slice(79, 80, None)), (slice(None, 5, None), slice(80, 81, None)), (slice(None, 5, None), slice(81, 82, None)), (slice(None, 5, None), slice(82, 83, None)), (slice(None, 5, None), slice(83, 84, None)), (slice(None, 5, None), slice(84, 85, None)), (slice(None, 5, None), slice(85, 86, None)), (slice(None, 5, None), slice(86, 87, None)), (slice(None, 5, None), slice(87, 88, None)), (slice(None, 5, None), slice(88, 89, None)), (slice(None, 5, None), slice(89, 90, None)), (slice(None, 5, None), slice(90, 91, None)), (slice(None, 5, None), slice(91, 92, None)), (slice(None, 5, None), slice(92, 93, None)), (slice(None, 5, None), slice(93, 94, None)), (slice(None, 5, None), slice(94, 95, None)), (slice(None, 5, None), slice(95, 96, None)), (slice(None, 5, None), slice(96, 97, None)), (slice(None, 5, None), slice(97, 98, None)), (slice(None, 5, None), slice(98, 99, None)), (slice(None, 5, None), slice(99, 100, None)), (slice(None, 5, None), slice(100, 101, None)), (slice(None, 5, None), slice(101, 102, None)), (slice(None, 5, None), slice(102, 103, None)), (slice(None, 5, None), slice(103, 104, None)), (slice(None, 5, None), slice(104, 105, None)), (slice(None, 5, None), slice(105, 106, None)), (slice(None, 5, None), slice(106, 107, None)), (slice(None, 5, None), slice(107, 108, None)), (slice(None, 5, None), slice(108, 109, None)), (slice(None, 5, None), slice(109, 110, None)), (slice(None, 5, None), slice(110, 111, None)), (slice(None, 5, None), slice(111, 112, None)), (slice(None, 5, None), slice(112, 113, None)), (slice(None, 5, None), slice(113, 114, None)), (slice(None, 5, None), slice(114, 115, None)), (slice(None, 5, None), slice(115, 116, None)), (slice(None, 5, None), slice(116, 117, None)), (slice(None, 5, None), slice(117, 118, None)), (slice(None, 5, None), slice(118, 119, None)), (slice(None, 5, None), slice(119, 120, None)), (slice(None, 5, None), slice(120, 121, None)), (slice(None, 5, None), slice(121, 122, None)), (slice(None, 5, None), slice(122, 123, None)), (slice(None, 5, None), slice(123, 124, None)), (slice(None, 5, None), slice(124, 125, None)), (slice(None, 5, None), slice(125, 126, None)), (slice(None, 5, None), slice(126, 127, None)), (slice(None, 5, None), slice(127, 128, None)), (slice(None, 5, None), slice(128, 129, None)), (slice(None, 5, None), slice(129, 130, None)), (slice(None, 5, None), slice(130, 131, None)), (slice(None, 5, None), slice(131, 132, None)), (slice(None, 5, None), slice(132, 133, None)), (slice(None, 5, None), slice(133, 134, None)), (slice(None, 5, None), slice(134, 135, None)), (slice(None, 5, None), slice(135, 136, None)), (slice(None, 5, None), slice(136, 137, None)), (slice(None, 5, None), slice(137, 138, None)), (slice(None, 5, None), slice(138, 139, None)), (slice(None, 5, None), slice(139, 140, None)), (slice(None, 5, None), slice(140, 141, None)), (slice(None, 5, None), slice(141, 142, None)), (slice(None, 5, None), slice(142, 143, None)), (slice(None, 5, None), slice(143, 144, None)), (slice(None, 5, None), slice(144, 145, None)), (slice(None, 5, None), slice(145, 146, None)), (slice(None, 5, None), slice(146, 147, None)), (slice(None, 5, None), slice(147, 148, None)), (slice(None, 5, None), slice(148, 149, None)), (slice(None, 5, None), slice(149, 150, None)), (slice(None, 5, None), slice(150, 151, None)), (slice(None, 5, None), slice(151, 152, None)), (slice(None, 5, None), slice(152, 153, None)), (slice(None, 5, None), slice(153, 154, None)), (slice(None, 5, None), slice(154, 155, None)), (slice(None, 5, None), slice(155, 156, None)), (slice(None, 5, None), slice(156, 157, None)), (slice(None, 5, None), slice(157, 158, None)), (slice(None, 5, None), slice(158, 159, None)), (slice(None, 5, None), slice(159, 160, None)), (slice(None, 5, None), slice(160, 161, None)), (slice(None, 5, None), slice(161, 162, None)), (slice(None, 5, None), slice(162, 163, None)), (slice(None, 5, None), slice(163, 164, None)), (slice(None, 5, None), slice(164, 165, None)), (slice(None, 5, None), slice(165, 166, None)), (slice(None, 5, None), slice(166, 167, None)), (slice(None, 5, None), slice(167, 168, None)), (slice(None, 5, None), slice(168, 169, None)), (slice(None, 5, None), slice(169, 170, None)), (slice(None, 5, None), slice(170, 171, None)), (slice(None, 5, None), slice(171, 172, None)), (slice(None, 5, None), slice(172, 173, None)), (slice(None, 5, None), slice(173, 174, None)), (slice(None, 5, None), slice(174, 175, None)), (slice(None, 5, None), slice(175, 176, None)), (slice(None, 5, None), slice(176, 177, None)), (slice(None, 5, None), slice(177, 178, None)), (slice(None, 5, None), slice(178, 179, None)), (slice(None, 5, None), slice(179, 180, None)), (slice(None, 5, None), slice(180, 181, None)), (slice(None, 5, None), slice(181, 182, None)), (slice(None, 5, None), slice(182, 183, None)), (slice(None, 5, None), slice(183, 184, None)), (slice(None, 5, None), slice(184, 185, None)), (slice(None, 5, None), slice(185, 186, None)), (slice(None, 5, None), slice(186, 187, None)), (slice(None, 5, None), slice(187, 188, None)), (slice(None, 5, None), slice(188, 189, None)), (slice(None, 5, None), slice(189, 190, None)), (slice(None, 5, None), slice(190, 191, None)), (slice(None, 5, None), slice(191, 192, None)), (slice(None, 5, None), slice(192, 193, None)), (slice(None, 5, None), slice(193, 194, None)), (slice(None, 5, None), slice(194, 195, None)), (slice(None, 5, None), slice(195, 196, None)), (slice(None, 5, None), slice(196, 197, None)), (slice(None, 5, None), slice(197, 198, None)), (slice(None, 5, None), slice(198, 199, None)), (slice(None, 5, None), slice(199, 200, None)), (slice(None, 5, None), slice(200, 201, None)), (slice(None, 5, None), slice(201, 202, None)), (slice(None, 5, None), slice(202, 203, None)), (slice(None, 5, None), slice(203, 204, None)), (slice(None, 5, None), slice(204, 205, None)), (slice(None, 5, None), slice(205, 206, None)), (slice(None, 5, None), slice(206, 207, None)), (slice(None, 5, None), slice(207, 208, None)), (slice(None, 5, None), slice(208, 209, None)), (slice(None, 5, None), slice(209, 210, None)), (slice(None, 5, None), slice(210, 211, None)), (slice(None, 5, None), slice(211, 212, None)), (slice(None, 5, None), slice(212, 213, None)), (slice(None, 5, None), slice(213, 214, None)), (slice(None, 5, None), slice(214, 215, None)), (slice(None, 5, None), slice(215, 216, None)), (slice(None, 5, None), slice(216, 217, None)), (slice(None, 5, None), slice(217, 218, None)), (slice(None, 5, None), slice(218, 219, None)), (slice(None, 5, None), slice(219, 220, None)), (slice(None, 5, None), slice(220, 221, None)), (slice(None, 5, None), slice(221, 222, None)), (slice(None, 5, None), slice(222, 223, None)), (slice(None, 5, None), slice(223, 224, None)), (slice(None, 5, None), slice(224, 225, None)), (slice(None, 5, None), slice(225, 226, None)), (slice(None, 5, None), slice(226, 227, None)), (slice(None, 5, None), slice(227, 228, None)), (slice(None, 5, None), slice(228, 229, None)), (slice(None, 5, None), slice(229, 230, None)), (slice(None, 5, None), slice(230, 231, None)), (slice(None, 5, None), slice(231, 232, None)), (slice(None, 5, None), slice(232, 233, None)), (slice(None, 5, None), slice(233, 234, None)), (slice(None, 5, None), slice(234, 235, None)), (slice(None, 5, None), slice(235, 236, None)), (slice(None, 5, None), slice(236, 237, None)), (slice(None, 5, None), slice(237, 238, None)), (slice(None, 5, None), slice(238, 239, None)), (slice(None, 5, None), slice(239, 240, None)), (slice(None, 5, None), slice(240, 241, None)), (slice(None, 5, None), slice(241, 242, None)), (slice(None, 5, None), slice(242, 243, None)), (slice(None, 5, None), slice(243, 244, None)), (slice(None, 5, None), slice(244, 245, None)), (slice(None, 5, None), slice(245, 246, None)), (slice(None, 5, None), slice(246, 247, None)), (slice(None, 5, None), slice(247, 248, None)), (slice(None, 5, None), slice(248, 249, None)), (slice(None, 5, None), slice(249, 250, None)), (slice(None, 5, None), slice(250, 251, None)), (slice(None, 5, None), slice(251, 252, None)), (slice(None, 5, None), slice(252, 253, None)), (slice(None, 5, None), slice(253, 254, None)), (slice(None, 5, None), slice(254, 255, None)), (slice(None, 5, None), slice(255, 256, None)), (slice(None, 5, None), slice(256, 257, None)), (slice(None, 5, None), slice(257, 258, None)), (slice(None, 5, None), slice(258, 259, None)), (slice(None, 5, None), slice(259, 260, None)), (slice(None, 5, None), slice(260, 261, None)), (slice(None, 5, None), slice(261, 262, None)), (slice(None, 5, None), slice(262, 263, None)), (slice(None, 5, None), slice(263, 264, None)), (slice(None, 5, None), slice(264, 265, None)), (slice(None, 5, None), slice(265, 266, None)), (slice(None, 5, None), slice(266, 267, None)), (slice(None, 5, None), slice(267, 268, None)), (slice(None, 5, None), slice(268, 269, None)), (slice(None, 5, None), slice(269, 270, None)), (slice(None, 5, None), slice(270, 271, None)), (slice(None, 5, None), slice(271, 272, None)), (slice(None, 5, None), slice(272, 273, None)), (slice(None, 5, None), slice(273, 274, None)), (slice(None, 5, None), slice(274, 275, None)), (slice(None, 5, None), slice(275, 276, None)), (slice(None, 5, None), slice(276, 277, None)), (slice(None, 5, None), slice(277, 278, None)), (slice(None, 5, None), slice(278, 279, None)), (slice(None, 5, None), slice(279, 280, None)), (slice(None, 5, None), slice(280, 281, None)), (slice(None, 5, None), slice(281, 282, None)), (slice(None, 5, None), slice(282, 283, None)), (slice(None, 5, None), slice(283, 284, None)), (slice(None, 5, None), slice(284, 285, None)), (slice(None, 5, None), slice(285, 286, None)), (slice(None, 5, None), slice(286, 287, None)), (slice(None, 5, None), slice(287, 288, None)), (slice(None, 5, None), slice(288, 289, None)), (slice(None, 5, None), slice(289, 290, None)), (slice(None, 5, None), slice(290, 291, None)), (slice(None, 5, None), slice(291, 292, None)), (slice(None, 5, None), slice(292, 293, None)), (slice(None, 5, None), slice(293, 294, None)), (slice(None, 5, None), slice(294, 295, None)), (slice(None, 5, None), slice(295, 296, None)), (slice(None, 5, None), slice(296, 297, None)), (slice(None, 5, None), slice(297, 298, None)), (slice(None, 5, None), slice(298, 299, None)), (slice(None, 5, None), slice(299, 300, None)), (slice(None, 5, None), slice(300, 301, None)), (slice(None, 5, None), slice(301, 302, None)), (slice(None, 5, None), slice(302, 303, None)), (slice(None, 5, None), slice(303, 304, None)), (slice(None, 5, None), slice(304, 305, None)), (slice(None, 5, None), slice(305, 306, None)), (slice(None, 5, None), slice(306, 307, None)), (slice(None, 5, None), slice(307, 308, None)), (slice(None, 5, None), slice(308, 309, None)), (slice(None, 5, None), slice(309, 310, None)), (slice(None, 5, None), slice(310, 311, None)), (slice(None, 5, None), slice(311, 312, None)), (slice(None, 5, None), slice(312, 313, None)), (slice(None, 5, None), slice(313, 314, None)), (slice(None, 5, None), slice(314, 315, None)), (slice(None, 5, None), slice(315, 316, None)), (slice(None, 5, None), slice(316, 317, None)), (slice(None, 5, None), slice(317, 318, None)), (slice(None, 5, None), slice(318, 319, None)), (slice(None, 5, None), slice(319, 320, None)), (slice(None, 5, None), slice(320, 321, None)), (slice(None, 5, None), slice(321, 322, None)), (slice(None, 5, None), slice(322, 323, None)), (slice(None, 5, None), slice(323, 324, None)), (slice(None, 5, None), slice(324, 325, None)), (slice(None, 5, None), slice(325, 326, None)), (slice(None, 5, None), slice(326, 327, None)), (slice(None, 5, None), slice(327, 328, None)), (slice(None, 5, None), slice(328, 329, None)), (slice(None, 5, None), slice(329, 330, None)), (slice(None, 5, None), slice(330, 331, None)), (slice(None, 5, None), slice(331, 332, None)), (slice(None, 5, None), slice(332, 333, None)), (slice(None, 5, None), slice(333, 334, None)), (slice(None, 5, None), slice(334, 335, None)), (slice(None, 5, None), slice(335, 336, None)), (slice(None, 5, None), slice(336, 337, None)), (slice(None, 5, None), slice(337, 338, None)), (slice(None, 5, None), slice(338, 339, None)), (slice(None, 5, None), slice(339, 340, None)), (slice(None, 5, None), slice(340, 341, None)), (slice(None, 5, None), slice(341, 342, None)), (slice(None, 5, None), slice(342, 343, None)), (slice(None, 5, None), slice(343, 344, None)), (slice(None, 5, None), slice(344, 345, None)), (slice(None, 5, None), slice(345, 346, None))], [(5, 8, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128), (5, 1, 32, 128)]], {}, 339],
['getitem', 'torch.Tensor', ['torch.cuda.HalfTensor'], [[(32, 512, 32, 128), (5, 8, 4096), (32, 512, 32, 128), (5, 1, 4096), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128), (32, 512, 32, 128)], [(slice(None, 5, None), slice(None, 8, None)), (slice(None, None, None), -1, slice(None, None, None)), (slice(None, 5, None), slice(None, 9, None)), (slice(None, None, None), -1, slice(None, None, None)), (slice(None, 5, None), slice(None, 10, None)), (slice(None, 5, None), slice(None, 11, None)), (slice(None, 5, None), slice(None, 12, None)), (slice(None, 5, None), slice(None, 13, None)), (slice(None, 5, None), slice(None, 14, None)), (slice(None, 5, None), slice(None, 15, None)), (slice(None, 5, None), slice(None, 16, None)), (slice(None, 5, None), slice(None, 17, None)), (slice(None, 5, None), slice(None, 18, None)), (slice(None, 5, None), slice(None, 19, None)), (slice(None, 5, None), slice(None, 20, None)), (slice(None, 5, None), slice(None, 21, None)), (slice(None, 5, None), slice(None, 22, None)), (slice(None, 5, None), slice(None, 23, None)), (slice(None, 5, None), slice(None, 24, None)), (slice(None, 5, None), slice(None, 25, None)), (slice(None, 5, None), slice(None, 26, None)), (slice(None, 5, None), slice(None, 27, None)), (slice(None, 5, None), slice(None, 28, None)), (slice(None, 5, None), slice(None, 29, None)), (slice(None, 5, None), slice(None, 30, None)), (slice(None, 5, None), slice(None, 31, None)), (slice(None, 5, None), slice(None, 32, None)), (slice(None, 5, None), slice(None, 33, None)), (slice(None, 5, None), slice(None, 34, None)), (slice(None, 5, None), slice(None, 35, None)), (slice(None, 5, None), slice(None, 36, None)), (slice(None, 5, None), slice(None, 37, None)), (slice(None, 5, None), slice(None, 38, None)), (slice(None, 5, None), slice(None, 39, None)), (slice(None, 5, None), slice(None, 40, None)), (slice(None, 5, None), slice(None, 41, None)), (slice(None, 5, None), slice(None, 42, None)), (slice(None, 5, None), slice(None, 43, None)), (slice(None, 5, None), slice(None, 44, None)), (slice(None, 5, None), slice(None, 45, None)), (slice(None, 5, None), slice(None, 46, None)), (slice(None, 5, None), slice(None, 47, None)), (slice(None, 5, None), slice(None, 48, None)), (slice(None, 5, None), slice(None, 49, None)), (slice(None, 5, None), slice(None, 50, None)), (slice(None, 5, None), slice(None, 51, None)), (slice(None, 5, None), slice(None, 52, None)), (slice(None, 5, None), slice(None, 53, None)), (slice(None, 5, None), slice(None, 54, None)), (slice(None, 5, None), slice(None, 55, None)), (slice(None, 5, None), slice(None, 56, None)), (slice(None, 5, None), slice(None, 57, None)), (slice(None, 5, None), slice(None, 58, None)), (slice(None, 5, None), slice(None, 59, None)), (slice(None, 5, None), slice(None, 60, None)), (slice(None, 5, None), slice(None, 61, None)), (slice(None, 5, None), slice(None, 62, None)), (slice(None, 5, None), slice(None, 63, None)), (slice(None, 5, None), slice(None, 64, None)), (slice(None, 5, None), slice(None, 65, None)), (slice(None, 5, None), slice(None, 66, None)), (slice(None, 5, None), slice(None, 67, None)), (slice(None, 5, None), slice(None, 68, None)), (slice(None, 5, None), slice(None, 69, None)), (slice(None, 5, None), slice(None, 70, None)), (slice(None, 5, None), slice(None, 71, None)), (slice(None, 5, None), slice(None, 72, None)), (slice(None, 5, None), slice(None, 73, None)), (slice(None, 5, None), slice(None, 74, None)), (slice(None, 5, None), slice(None, 75, None)), (slice(None, 5, None), slice(None, 76, None)), (slice(None, 5, None), slice(None, 77, None)), (slice(None, 5, None), slice(None, 78, None)), (slice(None, 5, None), slice(None, 79, None)), (slice(None, 5, None), slice(None, 80, None)), (slice(None, 5, None), slice(None, 81, None)), (slice(None, 5, None), slice(None, 82, None)), (slice(None, 5, None), slice(None, 83, None)), (slice(None, 5, None), slice(None, 84, None)), (slice(None, 5, None), slice(None, 85, None)), (slice(None, 5, None), slice(None, 86, None)), (slice(None, 5, None), slice(None, 87, None)), (slice(None, 5, None), slice(None, 88, None)), (slice(None, 5, None), slice(None, 89, None)), (slice(None, 5, None), slice(None, 90, None)), (slice(None, 5, None), slice(None, 91, None)), (slice(None, 5, None), slice(None, 92, None)), (slice(None, 5, None), slice(None, 93, None)), (slice(None, 5, None), slice(None, 94, None)), (slice(None, 5, None), slice(None, 95, None)), (slice(None, 5, None), slice(None, 96, None)), (slice(None, 5, None), slice(None, 97, None)), (slice(None, 5, None), slice(None, 98, None)), (slice(None, 5, None), slice(None, 99, None)), (slice(None, 5, None), slice(None, 100, None)), (slice(None, 5, None), slice(None, 101, None)), (slice(None, 5, None), slice(None, 102, None)), (slice(None, 5, None), slice(None, 103, None)), (slice(None, 5, None), slice(None, 104, None)), (slice(None, 5, None), slice(None, 105, None)), (slice(None, 5, None), slice(None, 106, None)), (slice(None, 5, None), slice(None, 107, None)), (slice(None, 5, None), slice(None, 108, None)), (slice(None, 5, None), slice(None, 109, None)), (slice(None, 5, None), slice(None, 110, None)), (slice(None, 5, None), slice(None, 111, None)), (slice(None, 5, None), slice(None, 112, None)), (slice(None, 5, None), slice(None, 113, None)), (slice(None, 5, None), slice(None, 114, None)), (slice(None, 5, None), slice(None, 115, None)), (slice(None, 5, None), slice(None, 116, None)), (slice(None, 5, None), slice(None, 117, None)), (slice(None, 5, None), slice(None, 118, None)), (slice(None, 5, None), slice(None, 119, None)), (slice(None, 5, None), slice(None, 120, None)), (slice(None, 5, None), slice(None, 121, None)), (slice(None, 5, None), slice(None, 122, None)), (slice(None, 5, None), slice(None, 123, None)), (slice(None, 5, None), slice(None, 124, None)), (slice(None, 5, None), slice(None, 125, None)), (slice(None, 5, None), slice(None, 126, None)), (slice(None, 5, None), slice(None, 127, None)), (slice(None, 5, None), slice(None, 128, None)), (slice(None, 5, None), slice(None, 129, None)), (slice(None, 5, None), slice(None, 130, None)), (slice(None, 5, None), slice(None, 131, None)), (slice(None, 5, None), slice(None, 132, None)), (slice(None, 5, None), slice(None, 133, None)), (slice(None, 5, None), slice(None, 134, None)), (slice(None, 5, None), slice(None, 135, None)), (slice(None, 5, None), slice(None, 136, None)), (slice(None, 5, None), slice(None, 137, None)), (slice(None, 5, None), slice(None, 138, None)), (slice(None, 5, None), slice(None, 139, None)), (slice(None, 5, None), slice(None, 140, None)), (slice(None, 5, None), slice(None, 141, None)), (slice(None, 5, None), slice(None, 142, None)), (slice(None, 5, None), slice(None, 143, None)), (slice(None, 5, None), slice(None, 144, None)), (slice(None, 5, None), slice(None, 145, None)), (slice(None, 5, None), slice(None, 146, None)), (slice(None, 5, None), slice(None, 147, None)), (slice(None, 5, None), slice(None, 148, None)), (slice(None, 5, None), slice(None, 149, None)), (slice(None, 5, None), slice(None, 150, None)), (slice(None, 5, None), slice(None, 151, None)), (slice(None, 5, None), slice(None, 152, None)), (slice(None, 5, None), slice(None, 153, None)), (slice(None, 5, None), slice(None, 154, None)), (slice(None, 5, None), slice(None, 155, None)), (slice(None, 5, None), slice(None, 156, None)), (slice(None, 5, None), slice(None, 157, None)), (slice(None, 5, None), slice(None, 158, None)), (slice(None, 5, None), slice(None, 159, None)), (slice(None, 5, None), slice(None, 160, None)), (slice(None, 5, None), slice(None, 161, None)), (slice(None, 5, None), slice(None, 162, None)), (slice(None, 5, None), slice(None, 163, None)), (slice(None, 5, None), slice(None, 164, None)), (slice(None, 5, None), slice(None, 165, None)), (slice(None, 5, None), slice(None, 166, None)), (slice(None, 5, None), slice(None, 167, None)), (slice(None, 5, None), slice(None, 168, None)), (slice(None, 5, None), slice(None, 169, None)), (slice(None, 5, None), slice(None, 170, None)), (slice(None, 5, None), slice(None, 171, None)), (slice(None, 5, None), slice(None, 172, None)), (slice(None, 5, None), slice(None, 173, None)), (slice(None, 5, None), slice(None, 174, None)), (slice(None, 5, None), slice(None, 175, None)), (slice(None, 5, None), slice(None, 176, None)), (slice(None, 5, None), slice(None, 177, None)), (slice(None, 5, None), slice(None, 178, None)), (slice(None, 5, None), slice(None, 179, None)), (slice(None, 5, None), slice(None, 180, None)), (slice(None, 5, None), slice(None, 181, None)), (slice(None, 5, None), slice(None, 182, None)), (slice(None, 5, None), slice(None, 183, None)), (slice(None, 5, None), slice(None, 184, None)), (slice(None, 5, None), slice(None, 185, None)), (slice(None, 5, None), slice(None, 186, None)), (slice(None, 5, None), slice(None, 187, None)), (slice(None, 5, None), slice(None, 188, None)), (slice(None, 5, None), slice(None, 189, None)), (slice(None, 5, None), slice(None, 190, None)), (slice(None, 5, None), slice(None, 191, None)), (slice(None, 5, None), slice(None, 192, None)), (slice(None, 5, None), slice(None, 193, None)), (slice(None, 5, None), slice(None, 194, None)), (slice(None, 5, None), slice(None, 195, None)), (slice(None, 5, None), slice(None, 196, None)), (slice(None, 5, None), slice(None, 197, None)), (slice(None, 5, None), slice(None, 198, None)), (slice(None, 5, None), slice(None, 199, None)), (slice(None, 5, None), slice(None, 200, None)), (slice(None, 5, None), slice(None, 201, None)), (slice(None, 5, None), slice(None, 202, None)), (slice(None, 5, None), slice(None, 203, None)), (slice(None, 5, None), slice(None, 204, None)), (slice(None, 5, None), slice(None, 205, None)), (slice(None, 5, None), slice(None, 206, None)), (slice(None, 5, None), slice(None, 207, None)), (slice(None, 5, None), slice(None, 208, None)), (slice(None, 5, None), slice(None, 209, None)), (slice(None, 5, None), slice(None, 210, None)), (slice(None, 5, None), slice(None, 211, None)), (slice(None, 5, None), slice(None, 212, None)), (slice(None, 5, None), slice(None, 213, None)), (slice(None, 5, None), slice(None, 214, None)), (slice(None, 5, None), slice(None, 215, None)), (slice(None, 5, None), slice(None, 216, None)), (slice(None, 5, None), slice(None, 217, None)), (slice(None, 5, None), slice(None, 218, None)), (slice(None, 5, None), slice(None, 219, None)), (slice(None, 5, None), slice(None, 220, None)), (slice(None, 5, None), slice(None, 221, None)), (slice(None, 5, None), slice(None, 222, None)), (slice(None, 5, None), slice(None, 223, None)), (slice(None, 5, None), slice(None, 224, None)), (slice(None, 5, None), slice(None, 225, None)), (slice(None, 5, None), slice(None, 226, None)), (slice(None, 5, None), slice(None, 227, None)), (slice(None, 5, None), slice(None, 228, None)), (slice(None, 5, None), slice(None, 229, None)), (slice(None, 5, None), slice(None, 230, None)), (slice(None, 5, None), slice(None, 231, None)), (slice(None, 5, None), slice(None, 232, None)), (slice(None, 5, None), slice(None, 233, None)), (slice(None, 5, None), slice(None, 234, None)), (slice(None, 5, None), slice(None, 235, None)), (slice(None, 5, None), slice(None, 236, None)), (slice(None, 5, None), slice(None, 237, None)), (slice(None, 5, None), slice(None, 238, None)), (slice(None, 5, None), slice(None, 239, None)), (slice(None, 5, None), slice(None, 240, None)), (slice(None, 5, None), slice(None, 241, None)), (slice(None, 5, None), slice(None, 242, None)), (slice(None, 5, None), slice(None, 243, None)), (slice(None, 5, None), slice(None, 244, None)), (slice(None, 5, None), slice(None, 245, None)), (slice(None, 5, None), slice(None, 246, None)), (slice(None, 5, None), slice(None, 247, None)), (slice(None, 5, None), slice(None, 248, None)), (slice(None, 5, None), slice(None, 249, None)), (slice(None, 5, None), slice(None, 250, None)), (slice(None, 5, None), slice(None, 251, None)), (slice(None, 5, None), slice(None, 252, None)), (slice(None, 5, None), slice(None, 253, None)), (slice(None, 5, None), slice(None, 254, None)), (slice(None, 5, None), slice(None, 255, None)), (slice(None, 5, None), slice(None, 256, None)), (slice(None, 5, None), slice(None, 257, None)), (slice(None, 5, None), slice(None, 258, None)), (slice(None, 5, None), slice(None, 259, None)), (slice(None, 5, None), slice(None, 260, None)), (slice(None, 5, None), slice(None, 261, None)), (slice(None, 5, None), slice(None, 262, None)), (slice(None, 5, None), slice(None, 263, None)), (slice(None, 5, None), slice(None, 264, None)), (slice(None, 5, None), slice(None, 265, None)), (slice(None, 5, None), slice(None, 266, None)), (slice(None, 5, None), slice(None, 267, None)), (slice(None, 5, None), slice(None, 268, None)), (slice(None, 5, None), slice(None, 269, None)), (slice(None, 5, None), slice(None, 270, None)), (slice(None, 5, None), slice(None, 271, None)), (slice(None, 5, None), slice(None, 272, None)), (slice(None, 5, None), slice(None, 273, None)), (slice(None, 5, None), slice(None, 274, None)), (slice(None, 5, None), slice(None, 275, None)), (slice(None, 5, None), slice(None, 276, None)), (slice(None, 5, None), slice(None, 277, None)), (slice(None, 5, None), slice(None, 278, None)), (slice(None, 5, None), slice(None, 279, None)), (slice(None, 5, None), slice(None, 280, None)), (slice(None, 5, None), slice(None, 281, None)), (slice(None, 5, None), slice(None, 282, None)), (slice(None, 5, None), slice(None, 283, None)), (slice(None, 5, None), slice(None, 284, None)), (slice(None, 5, None), slice(None, 285, None)), (slice(None, 5, None), slice(None, 286, None)), (slice(None, 5, None), slice(None, 287, None)), (slice(None, 5, None), slice(None, 288, None)), (slice(None, 5, None), slice(None, 289, None)), (slice(None, 5, None), slice(None, 290, None)), (slice(None, 5, None), slice(None, 291, None)), (slice(None, 5, None), slice(None, 292, None)), (slice(None, 5, None), slice(None, 293, None)), (slice(None, 5, None), slice(None, 294, None)), (slice(None, 5, None), slice(None, 295, None)), (slice(None, 5, None), slice(None, 296, None)), (slice(None, 5, None), slice(None, 297, None)), (slice(None, 5, None), slice(None, 298, None)), (slice(None, 5, None), slice(None, 299, None)), (slice(None, 5, None), slice(None, 300, None)), (slice(None, 5, None), slice(None, 301, None)), (slice(None, 5, None), slice(None, 302, None)), (slice(None, 5, None), slice(None, 303, None)), (slice(None, 5, None), slice(None, 304, None)), (slice(None, 5, None), slice(None, 305, None)), (slice(None, 5, None), slice(None, 306, None)), (slice(None, 5, None), slice(None, 307, None)), (slice(None, 5, None), slice(None, 308, None)), (slice(None, 5, None), slice(None, 309, None)), (slice(None, 5, None), slice(None, 310, None)), (slice(None, 5, None), slice(None, 311, None)), (slice(None, 5, None), slice(None, 312, None)), (slice(None, 5, None), slice(None, 313, None)), (slice(None, 5, None), slice(None, 314, None)), (slice(None, 5, None), slice(None, 315, None)), (slice(None, 5, None), slice(None, 316, None)), (slice(None, 5, None), slice(None, 317, None)), (slice(None, 5, None), slice(None, 318, None)), (slice(None, 5, None), slice(None, 319, None)), (slice(None, 5, None), slice(None, 320, None)), (slice(None, 5, None), slice(None, 321, None)), (slice(None, 5, None), slice(None, 322, None)), (slice(None, 5, None), slice(None, 323, None)), (slice(None, 5, None), slice(None, 324, None)), (slice(None, 5, None), slice(None, 325, None)), (slice(None, 5, None), slice(None, 326, None)), (slice(None, 5, None), slice(None, 327, None)), (slice(None, 5, None), slice(None, 328, None)), (slice(None, 5, None), slice(None, 329, None)), (slice(None, 5, None), slice(None, 330, None)), (slice(None, 5, None), slice(None, 331, None)), (slice(None, 5, None), slice(None, 332, None)), (slice(None, 5, None), slice(None, 333, None)), (slice(None, 5, None), slice(None, 334, None)), (slice(None, 5, None), slice(None, 335, None)), (slice(None, 5, None), slice(None, 336, None)), (slice(None, 5, None), slice(None, 337, None)), (slice(None, 5, None), slice(None, 338, None)), (slice(None, 5, None), slice(None, 339, None)), (slice(None, 5, None), slice(None, 340, None)), (slice(None, 5, None), slice(None, 341, None)), (slice(None, 5, None), slice(None, 342, None)), (slice(None, 5, None), slice(None, 343, None)), (slice(None, 5, None), slice(None, 344, None)), (slice(None, 5, None), slice(None, 345, None)), (slice(None, 5, None), slice(None, 346, None))]], {}, 341],
['transpose', 'torch.Tensor', ['torch.cuda.HalfTensor'], [[(5, 8, 32, 128), (5, 32, 8, 128), (5, 32, 8, 128), (5, 1, 32, 128), (5, 9, 32, 128), (5, 32, 9, 128), (5, 32, 1, 128), (5, 10, 32, 128), (5, 32, 10, 128), (5, 11, 32, 128), (5, 32, 11, 128), (5, 12, 32, 128), (5, 32, 12, 128), (5, 13, 32, 128), (5, 32, 13, 128), (5, 14, 32, 128), (5, 32, 14, 128), (5, 15, 32, 128), (5, 32, 15, 128), (5, 16, 32, 128), (5, 32, 16, 128), (5, 17, 32, 128), (5, 32, 17, 128), (5, 18, 32, 128), (5, 32, 18, 128), (5, 19, 32, 128), (5, 32, 19, 128), (5, 20, 32, 128), (5, 32, 20, 128), (5, 21, 32, 128), (5, 32, 21, 128), (5, 22, 32, 128), (5, 32, 22, 128), (5, 23, 32, 128), (5, 32, 23, 128), (5, 24, 32, 128), (5, 32, 24, 128), (5, 25, 32, 128), (5, 32, 25, 128), (5, 26, 32, 128), (5, 32, 26, 128), (5, 27, 32, 128), (5, 32, 27, 128), (5, 28, 32, 128), (5, 32, 28, 128), (5, 29, 32, 128), (5, 32, 29, 128), (5, 30, 32, 128), (5, 32, 30, 128), (5, 31, 32, 128), (5, 32, 31, 128), (5, 32, 32, 128), (5, 32, 32, 128), (5, 33, 32, 128), (5, 32, 33, 128), (5, 34, 32, 128), (5, 32, 34, 128), (5, 35, 32, 128), (5, 32, 35, 128), (5, 36, 32, 128), (5, 32, 36, 128), (5, 37, 32, 128), (5, 32, 37, 128), (5, 38, 32, 128), (5, 32, 38, 128), (5, 39, 32, 128), (5, 32, 39, 128), (5, 40, 32, 128), (5, 32, 40, 128), (5, 41, 32, 128), (5, 32, 41, 128), (5, 42, 32, 128), (5, 32, 42, 128), (5, 43, 32, 128), (5, 32, 43, 128), (5, 44, 32, 128), (5, 32, 44, 128), (5, 45, 32, 128), (5, 32, 45, 128), (5, 46, 32, 128), (5, 32, 46, 128), (5, 47, 32, 128), (5, 32, 47, 128), (5, 48, 32, 128), (5, 32, 48, 128), (5, 49, 32, 128), (5, 32, 49, 128), (5, 50, 32, 128), (5, 32, 50, 128), (5, 51, 32, 128), (5, 32, 51, 128), (5, 52, 32, 128), (5, 32, 52, 128), (5, 53, 32, 128), (5, 32, 53, 128), (5, 54, 32, 128), (5, 32, 54, 128), (5, 55, 32, 128), (5, 32, 55, 128), (5, 56, 32, 128), (5, 32, 56, 128), (5, 57, 32, 128), (5, 32, 57, 128), (5, 58, 32, 128), (5, 32, 58, 128), (5, 59, 32, 128), (5, 32, 59, 128), (5, 60, 32, 128), (5, 32, 60, 128), (5, 61, 32, 128), (5, 32, 61, 128), (5, 62, 32, 128), (5, 32, 62, 128), (5, 63, 32, 128), (5, 32, 63, 128), (5, 64, 32, 128), (5, 32, 64, 128), (5, 65, 32, 128), (5, 32, 65, 128), (5, 66, 32, 128), (5, 32, 66, 128), (5, 67, 32, 128), (5, 32, 67, 128), (5, 68, 32, 128), (5, 32, 68, 128), (5, 69, 32, 128), (5, 32, 69, 128), (5, 70, 32, 128), (5, 32, 70, 128), (5, 71, 32, 128), (5, 32, 71, 128), (5, 72, 32, 128), (5, 32, 72, 128), (5, 73, 32, 128), (5, 32, 73, 128), (5, 74, 32, 128), (5, 32, 74, 128), (5, 75, 32, 128), (5, 32, 75, 128), (5, 76, 32, 128), (5, 32, 76, 128), (5, 77, 32, 128), (5, 32, 77, 128), (5, 78, 32, 128), (5, 32, 78, 128), (5, 79, 32, 128), (5, 32, 79, 128), (5, 80, 32, 128), (5, 32, 80, 128), (5, 81, 32, 128), (5, 32, 81, 128), (5, 82, 32, 128), (5, 32, 82, 128), (5, 83, 32, 128), (5, 32, 83, 128), (5, 84, 32, 128), (5, 32, 84, 128), (5, 85, 32, 128), (5, 32, 85, 128), (5, 86, 32, 128), (5, 32, 86, 128), (5, 87, 32, 128), (5, 32, 87, 128), (5, 88, 32, 128), (5, 32, 88, 128), (5, 89, 32, 128), (5, 32, 89, 128), (5, 90, 32, 128), (5, 32, 90, 128), (5, 91, 32, 128), (5, 32, 91, 128), (5, 92, 32, 128), (5, 32, 92, 128), (5, 93, 32, 128), (5, 32, 93, 128), (5, 94, 32, 128), (5, 32, 94, 128), (5, 95, 32, 128), (5, 32, 95, 128), (5, 96, 32, 128), (5, 32, 96, 128), (5, 97, 32, 128), (5, 32, 97, 128), (5, 98, 32, 128), (5, 32, 98, 128), (5, 99, 32, 128), (5, 32, 99, 128), (5, 100, 32, 128), (5, 32, 100, 128), (5, 101, 32, 128), (5, 32, 101, 128), (5, 102, 32, 128), (5, 32, 102, 128), (5, 103, 32, 128), (5, 32, 103, 128), (5, 104, 32, 128), (5, 32, 104, 128), (5, 105, 32, 128), (5, 32, 105, 128), (5, 106, 32, 128), (5, 32, 106, 128), (5, 107, 32, 128), (5, 32, 107, 128), (5, 108, 32, 128), (5, 32, 108, 128), (5, 109, 32, 128), (5, 32, 109, 128), (5, 110, 32, 128), (5, 32, 110, 128), (5, 111, 32, 128), (5, 32, 111, 128), (5, 112, 32, 128), (5, 32, 112, 128), (5, 113, 32, 128), (5, 32, 113, 128), (5, 114, 32, 128), (5, 32, 114, 128), (5, 115, 32, 128), (5, 32, 115, 128), (5, 116, 32, 128), (5, 32, 116, 128), (5, 117, 32, 128), (5, 32, 117, 128), (5, 118, 32, 128), (5, 32, 118, 128), (5, 119, 32, 128), (5, 32, 119, 128), (5, 120, 32, 128), (5, 32, 120, 128), (5, 121, 32, 128), (5, 32, 121, 128), (5, 122, 32, 128), (5, 32, 122, 128), (5, 123, 32, 128), (5, 32, 123, 128), (5, 124, 32, 128), (5, 32, 124, 128), (5, 125, 32, 128), (5, 32, 125, 128), (5, 126, 32, 128), (5, 32, 126, 128), (5, 127, 32, 128), (5, 32, 127, 128), (5, 128, 32, 128), (5, 32, 128, 128), (5, 129, 32, 128), (5, 32, 129, 128), (5, 130, 32, 128), (5, 32, 130, 128), (5, 131, 32, 128), (5, 32, 131, 128), (5, 132, 32, 128), (5, 32, 132, 128), (5, 133, 32, 128), (5, 32, 133, 128), (5, 134, 32, 128), (5, 32, 134, 128), (5, 135, 32, 128), (5, 32, 135, 128), (5, 136, 32, 128), (5, 32, 136, 128), (5, 137, 32, 128), (5, 32, 137, 128), (5, 138, 32, 128), (5, 32, 138, 128), (5, 139, 32, 128), (5, 32, 139, 128), (5, 140, 32, 128), (5, 32, 140, 128), (5, 141, 32, 128), (5, 32, 141, 128), (5, 142, 32, 128), (5, 32, 142, 128), (5, 143, 32, 128), (5, 32, 143, 128), (5, 144, 32, 128), (5, 32, 144, 128), (5, 145, 32, 128), (5, 32, 145, 128), (5, 146, 32, 128), (5, 32, 146, 128), (5, 147, 32, 128), (5, 32, 147, 128), (5, 148, 32, 128), (5, 32, 148, 128), (5, 149, 32, 128), (5, 32, 149, 128), (5, 150, 32, 128), (5, 32, 150, 128), (5, 151, 32, 128), (5, 32, 151, 128), (5, 152, 32, 128), (5, 32, 152, 128), (5, 153, 32, 128), (5, 32, 153, 128), (5, 154, 32, 128), (5, 32, 154, 128), (5, 155, 32, 128), (5, 32, 155, 128), (5, 156, 32, 128), (5, 32, 156, 128), (5, 157, 32, 128), (5, 32, 157, 128), (5, 158, 32, 128), (5, 32, 158, 128), (5, 159, 32, 128), (5, 32, 159, 128), (5, 160, 32, 128), (5, 32, 160, 128), (5, 161, 32, 128), (5, 32, 161, 128), (5, 162, 32, 128), (5, 32, 162, 128), (5, 163, 32, 128), (5, 32, 163, 128), (5, 164, 32, 128), (5, 32, 164, 128), (5, 165, 32, 128), (5, 32, 165, 128), (5, 166, 32, 128), (5, 32, 166, 128), (5, 167, 32, 128), (5, 32, 167, 128), (5, 168, 32, 128), (5, 32, 168, 128), (5, 169, 32, 128), (5, 32, 169, 128), (5, 170, 32, 128), (5, 32, 170, 128), (5, 171, 32, 128), (5, 32, 171, 128), (5, 172, 32, 128), (5, 32, 172, 128), (5, 173, 32, 128), (5, 32, 173, 128), (5, 174, 32, 128), (5, 32, 174, 128), (5, 175, 32, 128), (5, 32, 175, 128), (5, 176, 32, 128), (5, 32, 176, 128), (5, 177, 32, 128), (5, 32, 177, 128), (5, 178, 32, 128), (5, 32, 178, 128), (5, 179, 32, 128), (5, 32, 179, 128), (5, 180, 32, 128), (5, 32, 180, 128), (5, 181, 32, 128), (5, 32, 181, 128), (5, 182, 32, 128), (5, 32, 182, 128), (5, 183, 32, 128), (5, 32, 183, 128), (5, 184, 32, 128), (5, 32, 184, 128), (5, 185, 32, 128), (5, 32, 185, 128), (5, 186, 32, 128), (5, 32, 186, 128), (5, 187, 32, 128), (5, 32, 187, 128), (5, 188, 32, 128), (5, 32, 188, 128), (5, 189, 32, 128), (5, 32, 189, 128), (5, 190, 32, 128), (5, 32, 190, 128), (5, 191, 32, 128), (5, 32, 191, 128), (5, 192, 32, 128), (5, 32, 192, 128), (5, 193, 32, 128), (5, 32, 193, 128), (5, 194, 32, 128), (5, 32, 194, 128), (5, 195, 32, 128), (5, 32, 195, 128), (5, 196, 32, 128), (5, 32, 196, 128), (5, 197, 32, 128), (5, 32, 197, 128), (5, 198, 32, 128), (5, 32, 198, 128), (5, 199, 32, 128), (5, 32, 199, 128), (5, 200, 32, 128), (5, 32, 200, 128), (5, 201, 32, 128), (5, 32, 201, 128), (5, 202, 32, 128), (5, 32, 202, 128), (5, 203, 32, 128), (5, 32, 203, 128), (5, 204, 32, 128), (5, 32, 204, 128), (5, 205, 32, 128), (5, 32, 205, 128), (5, 206, 32, 128), (5, 32, 206, 128), (5, 207, 32, 128), (5, 32, 207, 128), (5, 208, 32, 128), (5, 32, 208, 128), (5, 209, 32, 128), (5, 32, 209, 128), (5, 210, 32, 128), (5, 32, 210, 128), (5, 211, 32, 128), (5, 32, 211, 128), (5, 212, 32, 128), (5, 32, 212, 128), (5, 213, 32, 128), (5, 32, 213, 128), (5, 214, 32, 128), (5, 32, 214, 128), (5, 215, 32, 128), (5, 32, 215, 128), (5, 216, 32, 128), (5, 32, 216, 128), (5, 217, 32, 128), (5, 32, 217, 128), (5, 218, 32, 128), (5, 32, 218, 128), (5, 219, 32, 128), (5, 32, 219, 128), (5, 220, 32, 128), (5, 32, 220, 128), (5, 221, 32, 128), (5, 32, 221, 128), (5, 222, 32, 128), (5, 32, 222, 128), (5, 223, 32, 128), (5, 32, 223, 128), (5, 224, 32, 128), (5, 32, 224, 128), (5, 225, 32, 128), (5, 32, 225, 128), (5, 226, 32, 128), (5, 32, 226, 128), (5, 227, 32, 128), (5, 32, 227, 128), (5, 228, 32, 128), (5, 32, 228, 128), (5, 229, 32, 128), (5, 32, 229, 128), (5, 230, 32, 128), (5, 32, 230, 128), (5, 231, 32, 128), (5, 32, 231, 128), (5, 232, 32, 128), (5, 32, 232, 128), (5, 233, 32, 128), (5, 32, 233, 128), (5, 234, 32, 128), (5, 32, 234, 128), (5, 235, 32, 128), (5, 32, 235, 128), (5, 236, 32, 128), (5, 32, 236, 128), (5, 237, 32, 128), (5, 32, 237, 128), (5, 238, 32, 128), (5, 32, 238, 128), (5, 239, 32, 128), (5, 32, 239, 128), (5, 240, 32, 128), (5, 32, 240, 128), (5, 241, 32, 128), (5, 32, 241, 128), (5, 242, 32, 128), (5, 32, 242, 128), (5, 243, 32, 128), (5, 32, 243, 128), (5, 244, 32, 128), (5, 32, 244, 128), (5, 245, 32, 128), (5, 32, 245, 128), (5, 246, 32, 128), (5, 32, 246, 128), (5, 247, 32, 128), (5, 32, 247, 128), (5, 248, 32, 128), (5, 32, 248, 128), (5, 249, 32, 128), (5, 32, 249, 128), (5, 250, 32, 128), (5, 32, 250, 128), (5, 251, 32, 128), (5, 32, 251, 128), (5, 252, 32, 128), (5, 32, 252, 128), (5, 253, 32, 128), (5, 32, 253, 128), (5, 254, 32, 128), (5, 32, 254, 128), (5, 255, 32, 128), (5, 32, 255, 128), (5, 256, 32, 128), (5, 32, 256, 128), (5, 257, 32, 128), (5, 32, 257, 128), (5, 258, 32, 128), (5, 32, 258, 128), (5, 259, 32, 128), (5, 32, 259, 128), (5, 260, 32, 128), (5, 32, 260, 128), (5, 261, 32, 128), (5, 32, 261, 128), (5, 262, 32, 128), (5, 32, 262, 128), (5, 263, 32, 128), (5, 32, 263, 128), (5, 264, 32, 128), (5, 32, 264, 128), (5, 265, 32, 128), (5, 32, 265, 128), (5, 266, 32, 128), (5, 32, 266, 128), (5, 267, 32, 128), (5, 32, 267, 128), (5, 268, 32, 128), (5, 32, 268, 128), (5, 269, 32, 128), (5, 32, 269, 128), (5, 270, 32, 128), (5, 32, 270, 128), (5, 271, 32, 128), (5, 32, 271, 128), (5, 272, 32, 128), (5, 32, 272, 128), (5, 273, 32, 128), (5, 32, 273, 128), (5, 274, 32, 128), (5, 32, 274, 128), (5, 275, 32, 128), (5, 32, 275, 128), (5, 276, 32, 128), (5, 32, 276, 128), (5, 277, 32, 128), (5, 32, 277, 128), (5, 278, 32, 128), (5, 32, 278, 128), (5, 279, 32, 128), (5, 32, 279, 128), (5, 280, 32, 128), (5, 32, 280, 128), (5, 281, 32, 128), (5, 32, 281, 128), (5, 282, 32, 128), (5, 32, 282, 128), (5, 283, 32, 128), (5, 32, 283, 128), (5, 284, 32, 128), (5, 32, 284, 128), (5, 285, 32, 128), (5, 32, 285, 128), (5, 286, 32, 128), (5, 32, 286, 128), (5, 287, 32, 128), (5, 32, 287, 128), (5, 288, 32, 128), (5, 32, 288, 128), (5, 289, 32, 128), (5, 32, 289, 128), (5, 290, 32, 128), (5, 32, 290, 128), (5, 291, 32, 128), (5, 32, 291, 128), (5, 292, 32, 128), (5, 32, 292, 128), (5, 293, 32, 128), (5, 32, 293, 128), (5, 294, 32, 128), (5, 32, 294, 128), (5, 295, 32, 128), (5, 32, 295, 128), (5, 296, 32, 128), (5, 32, 296, 128), (5, 297, 32, 128), (5, 32, 297, 128), (5, 298, 32, 128), (5, 32, 298, 128), (5, 299, 32, 128), (5, 32, 299, 128), (5, 300, 32, 128), (5, 32, 300, 128), (5, 301, 32, 128), (5, 32, 301, 128), (5, 302, 32, 128), (5, 32, 302, 128), (5, 303, 32, 128), (5, 32, 303, 128), (5, 304, 32, 128), (5, 32, 304, 128), (5, 305, 32, 128), (5, 32, 305, 128), (5, 306, 32, 128), (5, 32, 306, 128), (5, 307, 32, 128), (5, 32, 307, 128), (5, 308, 32, 128), (5, 32, 308, 128), (5, 309, 32, 128), (5, 32, 309, 128), (5, 310, 32, 128), (5, 32, 310, 128), (5, 311, 32, 128), (5, 32, 311, 128), (5, 312, 32, 128), (5, 32, 312, 128), (5, 313, 32, 128), (5, 32, 313, 128), (5, 314, 32, 128), (5, 32, 314, 128), (5, 315, 32, 128), (5, 32, 315, 128), (5, 316, 32, 128), (5, 32, 316, 128), (5, 317, 32, 128), (5, 32, 317, 128), (5, 318, 32, 128), (5, 32, 318, 128), (5, 319, 32, 128), (5, 32, 319, 128), (5, 320, 32, 128), (5, 32, 320, 128), (5, 321, 32, 128), (5, 32, 321, 128), (5, 322, 32, 128), (5, 32, 322, 128), (5, 323, 32, 128), (5, 32, 323, 128), (5, 324, 32, 128), (5, 32, 324, 128), (5, 325, 32, 128), (5, 32, 325, 128), (5, 326, 32, 128), (5, 32, 326, 128), (5, 327, 32, 128), (5, 32, 327, 128), (5, 328, 32, 128), (5, 32, 328, 128), (5, 329, 32, 128), (5, 32, 329, 128), (5, 330, 32, 128), (5, 32, 330, 128), (5, 331, 32, 128), (5, 32, 331, 128), (5, 332, 32, 128), (5, 32, 332, 128), (5, 333, 32, 128), (5, 32, 333, 128), (5, 334, 32, 128), (5, 32, 334, 128), (5, 335, 32, 128), (5, 32, 335, 128), (5, 336, 32, 128), (5, 32, 336, 128), (5, 337, 32, 128), (5, 32, 337, 128), (5, 338, 32, 128), (5, 32, 338, 128), (5, 339, 32, 128), (5, 32, 339, 128), (5, 340, 32, 128), (5, 32, 340, 128), (5, 341, 32, 128), (5, 32, 341, 128), (5, 342, 32, 128), (5, 32, 342, 128), (5, 343, 32, 128), (5, 32, 343, 128), (5, 344, 32, 128), (5, 32, 344, 128), (5, 345, 32, 128), (5, 32, 345, 128), (5, 346, 32, 128), (5, 32, 346, 128)], [1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], [2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]], {}, 681],
['matmul', 'torch', ['torch.cuda.HalfTensor', 'torch.cuda.HalfTensor'], [[(5, 32, 8, 128), (5, 32, 8, 8), (5, 32, 1, 128), (5, 32, 1, 9), (5, 32, 1, 128), (5, 32, 1, 10), (5, 32, 1, 128), (5, 32, 1, 11), (5, 32, 1, 128), (5, 32, 1, 12), (5, 32, 1, 128), (5, 32, 1, 13), (5, 32, 1, 128), (5, 32, 1, 14), (5, 32, 1, 128), (5, 32, 1, 15), (5, 32, 1, 128), (5, 32, 1, 16), (5, 32, 1, 128), (5, 32, 1, 17), (5, 32, 1, 128), (5, 32, 1, 18), (5, 32, 1, 128), (5, 32, 1, 19), (5, 32, 1, 128), (5, 32, 1, 20), (5, 32, 1, 128), (5, 32, 1, 21), (5, 32, 1, 128), (5, 32, 1, 22), (5, 32, 1, 128), (5, 32, 1, 23), (5, 32, 1, 128), (5, 32, 1, 24), (5, 32, 1, 128), (5, 32, 1, 25), (5, 32, 1, 128), (5, 32, 1, 26), (5, 32, 1, 128), (5, 32, 1, 27), (5, 32, 1, 128), (5, 32, 1, 28), (5, 32, 1, 128), (5, 32, 1, 29), (5, 32, 1, 128), (5, 32, 1, 30), (5, 32, 1, 128), (5, 32, 1, 31), (5, 32, 1, 128), (5, 32, 1, 32), (5, 32, 1, 128), (5, 32, 1, 33), (5, 32, 1, 128), (5, 32, 1, 34), (5, 32, 1, 128), (5, 32, 1, 35), (5, 32, 1, 128), (5, 32, 1, 36), (5, 32, 1, 128), (5, 32, 1, 37), (5, 32, 1, 128), (5, 32, 1, 38), (5, 32, 1, 128), (5, 32, 1, 39), (5, 32, 1, 128), (5, 32, 1, 40), (5, 32, 1, 128), (5, 32, 1, 41), (5, 32, 1, 128), (5, 32, 1, 42), (5, 32, 1, 128), (5, 32, 1, 43), (5, 32, 1, 128), (5, 32, 1, 44), (5, 32, 1, 128), (5, 32, 1, 45), (5, 32, 1, 128), (5, 32, 1, 46), (5, 32, 1, 128), (5, 32, 1, 47), (5, 32, 1, 128), (5, 32, 1, 48), (5, 32, 1, 128), (5, 32, 1, 49), (5, 32, 1, 128), (5, 32, 1, 50), (5, 32, 1, 128), (5, 32, 1, 51), (5, 32, 1, 128), (5, 32, 1, 52), (5, 32, 1, 128), (5, 32, 1, 53), (5, 32, 1, 128), (5, 32, 1, 54), (5, 32, 1, 128), (5, 32, 1, 55), (5, 32, 1, 128), (5, 32, 1, 56), (5, 32, 1, 128), (5, 32, 1, 57), (5, 32, 1, 128), (5, 32, 1, 58), (5, 32, 1, 128), (5, 32, 1, 59), (5, 32, 1, 128), (5, 32, 1, 60), (5, 32, 1, 128), (5, 32, 1, 61), (5, 32, 1, 128), (5, 32, 1, 62), (5, 32, 1, 128), (5, 32, 1, 63), (5, 32, 1, 128), (5, 32, 1, 64), (5, 32, 1, 128), (5, 32, 1, 65), (5, 32, 1, 128), (5, 32, 1, 66), (5, 32, 1, 128), (5, 32, 1, 67), (5, 32, 1, 128), (5, 32, 1, 68), (5, 32, 1, 128), (5, 32, 1, 69), (5, 32, 1, 128), (5, 32, 1, 70), (5, 32, 1, 128), (5, 32, 1, 71), (5, 32, 1, 128), (5, 32, 1, 72), (5, 32, 1, 128), (5, 32, 1, 73), (5, 32, 1, 128), (5, 32, 1, 74), (5, 32, 1, 128), (5, 32, 1, 75), (5, 32, 1, 128), (5, 32, 1, 76), (5, 32, 1, 128), (5, 32, 1, 77), (5, 32, 1, 128), (5, 32, 1, 78), (5, 32, 1, 128), (5, 32, 1, 79), (5, 32, 1, 128), (5, 32, 1, 80), (5, 32, 1, 128), (5, 32, 1, 81), (5, 32, 1, 128), (5, 32, 1, 82), (5, 32, 1, 128), (5, 32, 1, 83), (5, 32, 1, 128), (5, 32, 1, 84), (5, 32, 1, 128), (5, 32, 1, 85), (5, 32, 1, 128), (5, 32, 1, 86), (5, 32, 1, 128), (5, 32, 1, 87), (5, 32, 1, 128), (5, 32, 1, 88), (5, 32, 1, 128), (5, 32, 1, 89), (5, 32, 1, 128), (5, 32, 1, 90), (5, 32, 1, 128), (5, 32, 1, 91), (5, 32, 1, 128), (5, 32, 1, 92), (5, 32, 1, 128), (5, 32, 1, 93), (5, 32, 1, 128), (5, 32, 1, 94), (5, 32, 1, 128), (5, 32, 1, 95), (5, 32, 1, 128), (5, 32, 1, 96), (5, 32, 1, 128), (5, 32, 1, 97), (5, 32, 1, 128), (5, 32, 1, 98), (5, 32, 1, 128), (5, 32, 1, 99), (5, 32, 1, 128), (5, 32, 1, 100), (5, 32, 1, 128), (5, 32, 1, 101), (5, 32, 1, 128), (5, 32, 1, 102), (5, 32, 1, 128), (5, 32, 1, 103), (5, 32, 1, 128), (5, 32, 1, 104), (5, 32, 1, 128), (5, 32, 1, 105), (5, 32, 1, 128), (5, 32, 1, 106), (5, 32, 1, 128), (5, 32, 1, 107), (5, 32, 1, 128), (5, 32, 1, 108), (5, 32, 1, 128), (5, 32, 1, 109), (5, 32, 1, 128), (5, 32, 1, 110), (5, 32, 1, 128), (5, 32, 1, 111), (5, 32, 1, 128), (5, 32, 1, 112), (5, 32, 1, 128), (5, 32, 1, 113), (5, 32, 1, 128), (5, 32, 1, 114), (5, 32, 1, 128), (5, 32, 1, 115), (5, 32, 1, 128), (5, 32, 1, 116), (5, 32, 1, 128), (5, 32, 1, 117), (5, 32, 1, 128), (5, 32, 1, 118), (5, 32, 1, 128), (5, 32, 1, 119), (5, 32, 1, 128), (5, 32, 1, 120), (5, 32, 1, 128), (5, 32, 1, 121), (5, 32, 1, 128), (5, 32, 1, 122), (5, 32, 1, 128), (5, 32, 1, 123), (5, 32, 1, 128), (5, 32, 1, 124), (5, 32, 1, 128), (5, 32, 1, 125), (5, 32, 1, 128), (5, 32, 1, 126), (5, 32, 1, 128), (5, 32, 1, 127), (5, 32, 1, 128), (5, 32, 1, 128), (5, 32, 1, 129), (5, 32, 1, 128), (5, 32, 1, 130), (5, 32, 1, 128), (5, 32, 1, 131), (5, 32, 1, 128), (5, 32, 1, 132), (5, 32, 1, 128), (5, 32, 1, 133), (5, 32, 1, 128), (5, 32, 1, 134), (5, 32, 1, 128), (5, 32, 1, 135), (5, 32, 1, 128), (5, 32, 1, 136), (5, 32, 1, 128), (5, 32, 1, 137), (5, 32, 1, 128), (5, 32, 1, 138), (5, 32, 1, 128), (5, 32, 1, 139), (5, 32, 1, 128), (5, 32, 1, 140), (5, 32, 1, 128), (5, 32, 1, 141), (5, 32, 1, 128), (5, 32, 1, 142), (5, 32, 1, 128), (5, 32, 1, 143), (5, 32, 1, 128), (5, 32, 1, 144), (5, 32, 1, 128), (5, 32, 1, 145), (5, 32, 1, 128), (5, 32, 1, 146), (5, 32, 1, 128), (5, 32, 1, 147), (5, 32, 1, 128), (5, 32, 1, 148), (5, 32, 1, 128), (5, 32, 1, 149), (5, 32, 1, 128), (5, 32, 1, 150), (5, 32, 1, 128), (5, 32, 1, 151), (5, 32, 1, 128), (5, 32, 1, 152), (5, 32, 1, 128), (5, 32, 1, 153), (5, 32, 1, 128), (5, 32, 1, 154), (5, 32, 1, 128), (5, 32, 1, 155), (5, 32, 1, 128), (5, 32, 1, 156), (5, 32, 1, 128), (5, 32, 1, 157), (5, 32, 1, 128), (5, 32, 1, 158), (5, 32, 1, 128), (5, 32, 1, 159), (5, 32, 1, 128), (5, 32, 1, 160), (5, 32, 1, 128), (5, 32, 1, 161), (5, 32, 1, 128), (5, 32, 1, 162), (5, 32, 1, 128), (5, 32, 1, 163), (5, 32, 1, 128), (5, 32, 1, 164), (5, 32, 1, 128), (5, 32, 1, 165), (5, 32, 1, 128), (5, 32, 1, 166), (5, 32, 1, 128), (5, 32, 1, 167), (5, 32, 1, 128), (5, 32, 1, 168), (5, 32, 1, 128), (5, 32, 1, 169), (5, 32, 1, 128), (5, 32, 1, 170), (5, 32, 1, 128), (5, 32, 1, 171), (5, 32, 1, 128), (5, 32, 1, 172), (5, 32, 1, 128), (5, 32, 1, 173), (5, 32, 1, 128), (5, 32, 1, 174), (5, 32, 1, 128), (5, 32, 1, 175), (5, 32, 1, 128), (5, 32, 1, 176), (5, 32, 1, 128), (5, 32, 1, 177), (5, 32, 1, 128), (5, 32, 1, 178), (5, 32, 1, 128), (5, 32, 1, 179), (5, 32, 1, 128), (5, 32, 1, 180), (5, 32, 1, 128), (5, 32, 1, 181), (5, 32, 1, 128), (5, 32, 1, 182), (5, 32, 1, 128), (5, 32, 1, 183), (5, 32, 1, 128), (5, 32, 1, 184), (5, 32, 1, 128), (5, 32, 1, 185), (5, 32, 1, 128), (5, 32, 1, 186), (5, 32, 1, 128), (5, 32, 1, 187), (5, 32, 1, 128), (5, 32, 1, 188), (5, 32, 1, 128), (5, 32, 1, 189), (5, 32, 1, 128), (5, 32, 1, 190), (5, 32, 1, 128), (5, 32, 1, 191), (5, 32, 1, 128), (5, 32, 1, 192), (5, 32, 1, 128), (5, 32, 1, 193), (5, 32, 1, 128), (5, 32, 1, 194), (5, 32, 1, 128), (5, 32, 1, 195), (5, 32, 1, 128), (5, 32, 1, 196), (5, 32, 1, 128), (5, 32, 1, 197), (5, 32, 1, 128), (5, 32, 1, 198), (5, 32, 1, 128), (5, 32, 1, 199), (5, 32, 1, 128), (5, 32, 1, 200), (5, 32, 1, 128), (5, 32, 1, 201), (5, 32, 1, 128), (5, 32, 1, 202), (5, 32, 1, 128), (5, 32, 1, 203), (5, 32, 1, 128), (5, 32, 1, 204), (5, 32, 1, 128), (5, 32, 1, 205), (5, 32, 1, 128), (5, 32, 1, 206), (5, 32, 1, 128), (5, 32, 1, 207), (5, 32, 1, 128), (5, 32, 1, 208), (5, 32, 1, 128), (5, 32, 1, 209), (5, 32, 1, 128), (5, 32, 1, 210), (5, 32, 1, 128), (5, 32, 1, 211), (5, 32, 1, 128), (5, 32, 1, 212), (5, 32, 1, 128), (5, 32, 1, 213), (5, 32, 1, 128), (5, 32, 1, 214), (5, 32, 1, 128), (5, 32, 1, 215), (5, 32, 1, 128), (5, 32, 1, 216), (5, 32, 1, 128), (5, 32, 1, 217), (5, 32, 1, 128), (5, 32, 1, 218), (5, 32, 1, 128), (5, 32, 1, 219), (5, 32, 1, 128), (5, 32, 1, 220), (5, 32, 1, 128), (5, 32, 1, 221), (5, 32, 1, 128), (5, 32, 1, 222), (5, 32, 1, 128), (5, 32, 1, 223), (5, 32, 1, 128), (5, 32, 1, 224), (5, 32, 1, 128), (5, 32, 1, 225), (5, 32, 1, 128), (5, 32, 1, 226), (5, 32, 1, 128), (5, 32, 1, 227), (5, 32, 1, 128), (5, 32, 1, 228), (5, 32, 1, 128), (5, 32, 1, 229), (5, 32, 1, 128), (5, 32, 1, 230), (5, 32, 1, 128), (5, 32, 1, 231), (5, 32, 1, 128), (5, 32, 1, 232), (5, 32, 1, 128), (5, 32, 1, 233), (5, 32, 1, 128), (5, 32, 1, 234), (5, 32, 1, 128), (5, 32, 1, 235), (5, 32, 1, 128), (5, 32, 1, 236), (5, 32, 1, 128), (5, 32, 1, 237), (5, 32, 1, 128), (5, 32, 1, 238), (5, 32, 1, 128), (5, 32, 1, 239), (5, 32, 1, 128), (5, 32, 1, 240), (5, 32, 1, 128), (5, 32, 1, 241), (5, 32, 1, 128), (5, 32, 1, 242), (5, 32, 1, 128), (5, 32, 1, 243), (5, 32, 1, 128), (5, 32, 1, 244), (5, 32, 1, 128), (5, 32, 1, 245), (5, 32, 1, 128), (5, 32, 1, 246), (5, 32, 1, 128), (5, 32, 1, 247), (5, 32, 1, 128), (5, 32, 1, 248), (5, 32, 1, 128), (5, 32, 1, 249), (5, 32, 1, 128), (5, 32, 1, 250), (5, 32, 1, 128), (5, 32, 1, 251), (5, 32, 1, 128), (5, 32, 1, 252), (5, 32, 1, 128), (5, 32, 1, 253), (5, 32, 1, 128), (5, 32, 1, 254), (5, 32, 1, 128), (5, 32, 1, 255), (5, 32, 1, 128), (5, 32, 1, 256), (5, 32, 1, 128), (5, 32, 1, 257), (5, 32, 1, 128), (5, 32, 1, 258), (5, 32, 1, 128), (5, 32, 1, 259), (5, 32, 1, 128), (5, 32, 1, 260), (5, 32, 1, 128), (5, 32, 1, 261), (5, 32, 1, 128), (5, 32, 1, 262), (5, 32, 1, 128), (5, 32, 1, 263), (5, 32, 1, 128), (5, 32, 1, 264), (5, 32, 1, 128), (5, 32, 1, 265), (5, 32, 1, 128), (5, 32, 1, 266), (5, 32, 1, 128), (5, 32, 1, 267), (5, 32, 1, 128), (5, 32, 1, 268), (5, 32, 1, 128), (5, 32, 1, 269), (5, 32, 1, 128), (5, 32, 1, 270), (5, 32, 1, 128), (5, 32, 1, 271), (5, 32, 1, 128), (5, 32, 1, 272), (5, 32, 1, 128), (5, 32, 1, 273), (5, 32, 1, 128), (5, 32, 1, 274), (5, 32, 1, 128), (5, 32, 1, 275), (5, 32, 1, 128), (5, 32, 1, 276), (5, 32, 1, 128), (5, 32, 1, 277), (5, 32, 1, 128), (5, 32, 1, 278), (5, 32, 1, 128), (5, 32, 1, 279), (5, 32, 1, 128), (5, 32, 1, 280), (5, 32, 1, 128), (5, 32, 1, 281), (5, 32, 1, 128), (5, 32, 1, 282), (5, 32, 1, 128), (5, 32, 1, 283), (5, 32, 1, 128), (5, 32, 1, 284), (5, 32, 1, 128), (5, 32, 1, 285), (5, 32, 1, 128), (5, 32, 1, 286), (5, 32, 1, 128), (5, 32, 1, 287), (5, 32, 1, 128), (5, 32, 1, 288), (5, 32, 1, 128), (5, 32, 1, 289), (5, 32, 1, 128), (5, 32, 1, 290), (5, 32, 1, 128), (5, 32, 1, 291), (5, 32, 1, 128), (5, 32, 1, 292), (5, 32, 1, 128), (5, 32, 1, 293), (5, 32, 1, 128), (5, 32, 1, 294), (5, 32, 1, 128), (5, 32, 1, 295), (5, 32, 1, 128), (5, 32, 1, 296), (5, 32, 1, 128), (5, 32, 1, 297), (5, 32, 1, 128), (5, 32, 1, 298), (5, 32, 1, 128), (5, 32, 1, 299), (5, 32, 1, 128), (5, 32, 1, 300), (5, 32, 1, 128), (5, 32, 1, 301), (5, 32, 1, 128), (5, 32, 1, 302), (5, 32, 1, 128), (5, 32, 1, 303), (5, 32, 1, 128), (5, 32, 1, 304), (5, 32, 1, 128), (5, 32, 1, 305), (5, 32, 1, 128), (5, 32, 1, 306), (5, 32, 1, 128), (5, 32, 1, 307), (5, 32, 1, 128), (5, 32, 1, 308), (5, 32, 1, 128), (5, 32, 1, 309), (5, 32, 1, 128), (5, 32, 1, 310), (5, 32, 1, 128), (5, 32, 1, 311), (5, 32, 1, 128), (5, 32, 1, 312), (5, 32, 1, 128), (5, 32, 1, 313), (5, 32, 1, 128), (5, 32, 1, 314), (5, 32, 1, 128), (5, 32, 1, 315), (5, 32, 1, 128), (5, 32, 1, 316), (5, 32, 1, 128), (5, 32, 1, 317), (5, 32, 1, 128), (5, 32, 1, 318), (5, 32, 1, 128), (5, 32, 1, 319), (5, 32, 1, 128), (5, 32, 1, 320), (5, 32, 1, 128), (5, 32, 1, 321), (5, 32, 1, 128), (5, 32, 1, 322), (5, 32, 1, 128), (5, 32, 1, 323), (5, 32, 1, 128), (5, 32, 1, 324), (5, 32, 1, 128), (5, 32, 1, 325), (5, 32, 1, 128), (5, 32, 1, 326), (5, 32, 1, 128), (5, 32, 1, 327), (5, 32, 1, 128), (5, 32, 1, 328), (5, 32, 1, 128), (5, 32, 1, 329), (5, 32, 1, 128), (5, 32, 1, 330), (5, 32, 1, 128), (5, 32, 1, 331), (5, 32, 1, 128), (5, 32, 1, 332), (5, 32, 1, 128), (5, 32, 1, 333), (5, 32, 1, 128), (5, 32, 1, 334), (5, 32, 1, 128), (5, 32, 1, 335), (5, 32, 1, 128), (5, 32, 1, 336), (5, 32, 1, 128), (5, 32, 1, 337), (5, 32, 1, 128), (5, 32, 1, 338), (5, 32, 1, 128), (5, 32, 1, 339), (5, 32, 1, 128), (5, 32, 1, 340), (5, 32, 1, 128), (5, 32, 1, 341), (5, 32, 1, 128), (5, 32, 1, 342), (5, 32, 1, 128), (5, 32, 1, 343), (5, 32, 1, 128), (5, 32, 1, 344), (5, 32, 1, 128), (5, 32, 1, 345), (5, 32, 1, 128), (5, 32, 1, 346)], [(5, 32, 128, 8), (5, 32, 8, 128), (5, 32, 128, 9), (5, 32, 9, 128), (5, 32, 128, 10), (5, 32, 10, 128), (5, 32, 128, 11), (5, 32, 11, 128), (5, 32, 128, 12), (5, 32, 12, 128), (5, 32, 128, 13), (5, 32, 13, 128), (5, 32, 128, 14), (5, 32, 14, 128), (5, 32, 128, 15), (5, 32, 15, 128), (5, 32, 128, 16), (5, 32, 16, 128), (5, 32, 128, 17), (5, 32, 17, 128), (5, 32, 128, 18), (5, 32, 18, 128), (5, 32, 128, 19), (5, 32, 19, 128), (5, 32, 128, 20), (5, 32, 20, 128), (5, 32, 128, 21), (5, 32, 21, 128), (5, 32, 128, 22), (5, 32, 22, 128), (5, 32, 128, 23), (5, 32, 23, 128), (5, 32, 128, 24), (5, 32, 24, 128), (5, 32, 128, 25), (5, 32, 25, 128), (5, 32, 128, 26), (5, 32, 26, 128), (5, 32, 128, 27), (5, 32, 27, 128), (5, 32, 128, 28), (5, 32, 28, 128), (5, 32, 128, 29), (5, 32, 29, 128), (5, 32, 128, 30), (5, 32, 30, 128), (5, 32, 128, 31), (5, 32, 31, 128), (5, 32, 128, 32), (5, 32, 32, 128), (5, 32, 128, 33), (5, 32, 33, 128), (5, 32, 128, 34), (5, 32, 34, 128), (5, 32, 128, 35), (5, 32, 35, 128), (5, 32, 128, 36), (5, 32, 36, 128), (5, 32, 128, 37), (5, 32, 37, 128), (5, 32, 128, 38), (5, 32, 38, 128), (5, 32, 128, 39), (5, 32, 39, 128), (5, 32, 128, 40), (5, 32, 40, 128), (5, 32, 128, 41), (5, 32, 41, 128), (5, 32, 128, 42), (5, 32, 42, 128), (5, 32, 128, 43), (5, 32, 43, 128), (5, 32, 128, 44), (5, 32, 44, 128), (5, 32, 128, 45), (5, 32, 45, 128), (5, 32, 128, 46), (5, 32, 46, 128), (5, 32, 128, 47), (5, 32, 47, 128), (5, 32, 128, 48), (5, 32, 48, 128), (5, 32, 128, 49), (5, 32, 49, 128), (5, 32, 128, 50), (5, 32, 50, 128), (5, 32, 128, 51), (5, 32, 51, 128), (5, 32, 128, 52), (5, 32, 52, 128), (5, 32, 128, 53), (5, 32, 53, 128), (5, 32, 128, 54), (5, 32, 54, 128), (5, 32, 128, 55), (5, 32, 55, 128), (5, 32, 128, 56), (5, 32, 56, 128), (5, 32, 128, 57), (5, 32, 57, 128), (5, 32, 128, 58), (5, 32, 58, 128), (5, 32, 128, 59), (5, 32, 59, 128), (5, 32, 128, 60), (5, 32, 60, 128), (5, 32, 128, 61), (5, 32, 61, 128), (5, 32, 128, 62), (5, 32, 62, 128), (5, 32, 128, 63), (5, 32, 63, 128), (5, 32, 128, 64), (5, 32, 64, 128), (5, 32, 128, 65), (5, 32, 65, 128), (5, 32, 128, 66), (5, 32, 66, 128), (5, 32, 128, 67), (5, 32, 67, 128), (5, 32, 128, 68), (5, 32, 68, 128), (5, 32, 128, 69), (5, 32, 69, 128), (5, 32, 128, 70), (5, 32, 70, 128), (5, 32, 128, 71), (5, 32, 71, 128), (5, 32, 128, 72), (5, 32, 72, 128), (5, 32, 128, 73), (5, 32, 73, 128), (5, 32, 128, 74), (5, 32, 74, 128), (5, 32, 128, 75), (5, 32, 75, 128), (5, 32, 128, 76), (5, 32, 76, 128), (5, 32, 128, 77), (5, 32, 77, 128), (5, 32, 128, 78), (5, 32, 78, 128), (5, 32, 128, 79), (5, 32, 79, 128), (5, 32, 128, 80), (5, 32, 80, 128), (5, 32, 128, 81), (5, 32, 81, 128), (5, 32, 128, 82), (5, 32, 82, 128), (5, 32, 128, 83), (5, 32, 83, 128), (5, 32, 128, 84), (5, 32, 84, 128), (5, 32, 128, 85), (5, 32, 85, 128), (5, 32, 128, 86), (5, 32, 86, 128), (5, 32, 128, 87), (5, 32, 87, 128), (5, 32, 128, 88), (5, 32, 88, 128), (5, 32, 128, 89), (5, 32, 89, 128), (5, 32, 128, 90), (5, 32, 90, 128), (5, 32, 128, 91), (5, 32, 91, 128), (5, 32, 128, 92), (5, 32, 92, 128), (5, 32, 128, 93), (5, 32, 93, 128), (5, 32, 128, 94), (5, 32, 94, 128), (5, 32, 128, 95), (5, 32, 95, 128), (5, 32, 128, 96), (5, 32, 96, 128), (5, 32, 128, 97), (5, 32, 97, 128), (5, 32, 128, 98), (5, 32, 98, 128), (5, 32, 128, 99), (5, 32, 99, 128), (5, 32, 128, 100), (5, 32, 100, 128), (5, 32, 128, 101), (5, 32, 101, 128), (5, 32, 128, 102), (5, 32, 102, 128), (5, 32, 128, 103), (5, 32, 103, 128), (5, 32, 128, 104), (5, 32, 104, 128), (5, 32, 128, 105), (5, 32, 105, 128), (5, 32, 128, 106), (5, 32, 106, 128), (5, 32, 128, 107), (5, 32, 107, 128), (5, 32, 128, 108), (5, 32, 108, 128), (5, 32, 128, 109), (5, 32, 109, 128), (5, 32, 128, 110), (5, 32, 110, 128), (5, 32, 128, 111), (5, 32, 111, 128), (5, 32, 128, 112), (5, 32, 112, 128), (5, 32, 128, 113), (5, 32, 113, 128), (5, 32, 128, 114), (5, 32, 114, 128), (5, 32, 128, 115), (5, 32, 115, 128), (5, 32, 128, 116), (5, 32, 116, 128), (5, 32, 128, 117), (5, 32, 117, 128), (5, 32, 128, 118), (5, 32, 118, 128), (5, 32, 128, 119), (5, 32, 119, 128), (5, 32, 128, 120), (5, 32, 120, 128), (5, 32, 128, 121), (5, 32, 121, 128), (5, 32, 128, 122), (5, 32, 122, 128), (5, 32, 128, 123), (5, 32, 123, 128), (5, 32, 128, 124), (5, 32, 124, 128), (5, 32, 128, 125), (5, 32, 125, 128), (5, 32, 128, 126), (5, 32, 126, 128), (5, 32, 128, 127), (5, 32, 127, 128), (5, 32, 128, 128), (5, 32, 128, 129), (5, 32, 129, 128), (5, 32, 128, 130), (5, 32, 130, 128), (5, 32, 128, 131), (5, 32, 131, 128), (5, 32, 128, 132), (5, 32, 132, 128), (5, 32, 128, 133), (5, 32, 133, 128), (5, 32, 128, 134), (5, 32, 134, 128), (5, 32, 128, 135), (5, 32, 135, 128), (5, 32, 128, 136), (5, 32, 136, 128), (5, 32, 128, 137), (5, 32, 137, 128), (5, 32, 128, 138), (5, 32, 138, 128), (5, 32, 128, 139), (5, 32, 139, 128), (5, 32, 128, 140), (5, 32, 140, 128), (5, 32, 128, 141), (5, 32, 141, 128), (5, 32, 128, 142), (5, 32, 142, 128), (5, 32, 128, 143), (5, 32, 143, 128), (5, 32, 128, 144), (5, 32, 144, 128), (5, 32, 128, 145), (5, 32, 145, 128), (5, 32, 128, 146), (5, 32, 146, 128), (5, 32, 128, 147), (5, 32, 147, 128), (5, 32, 128, 148), (5, 32, 148, 128), (5, 32, 128, 149), (5, 32, 149, 128), (5, 32, 128, 150), (5, 32, 150, 128), (5, 32, 128, 151), (5, 32, 151, 128), (5, 32, 128, 152), (5, 32, 152, 128), (5, 32, 128, 153), (5, 32, 153, 128), (5, 32, 128, 154), (5, 32, 154, 128), (5, 32, 128, 155), (5, 32, 155, 128), (5, 32, 128, 156), (5, 32, 156, 128), (5, 32, 128, 157), (5, 32, 157, 128), (5, 32, 128, 158), (5, 32, 158, 128), (5, 32, 128, 159), (5, 32, 159, 128), (5, 32, 128, 160), (5, 32, 160, 128), (5, 32, 128, 161), (5, 32, 161, 128), (5, 32, 128, 162), (5, 32, 162, 128), (5, 32, 128, 163), (5, 32, 163, 128), (5, 32, 128, 164), (5, 32, 164, 128), (5, 32, 128, 165), (5, 32, 165, 128), (5, 32, 128, 166), (5, 32, 166, 128), (5, 32, 128, 167), (5, 32, 167, 128), (5, 32, 128, 168), (5, 32, 168, 128), (5, 32, 128, 169), (5, 32, 169, 128), (5, 32, 128, 170), (5, 32, 170, 128), (5, 32, 128, 171), (5, 32, 171, 128), (5, 32, 128, 172), (5, 32, 172, 128), (5, 32, 128, 173), (5, 32, 173, 128), (5, 32, 128, 174), (5, 32, 174, 128), (5, 32, 128, 175), (5, 32, 175, 128), (5, 32, 128, 176), (5, 32, 176, 128), (5, 32, 128, 177), (5, 32, 177, 128), (5, 32, 128, 178), (5, 32, 178, 128), (5, 32, 128, 179), (5, 32, 179, 128), (5, 32, 128, 180), (5, 32, 180, 128), (5, 32, 128, 181), (5, 32, 181, 128), (5, 32, 128, 182), (5, 32, 182, 128), (5, 32, 128, 183), (5, 32, 183, 128), (5, 32, 128, 184), (5, 32, 184, 128), (5, 32, 128, 185), (5, 32, 185, 128), (5, 32, 128, 186), (5, 32, 186, 128), (5, 32, 128, 187), (5, 32, 187, 128), (5, 32, 128, 188), (5, 32, 188, 128), (5, 32, 128, 189), (5, 32, 189, 128), (5, 32, 128, 190), (5, 32, 190, 128), (5, 32, 128, 191), (5, 32, 191, 128), (5, 32, 128, 192), (5, 32, 192, 128), (5, 32, 128, 193), (5, 32, 193, 128), (5, 32, 128, 194), (5, 32, 194, 128), (5, 32, 128, 195), (5, 32, 195, 128), (5, 32, 128, 196), (5, 32, 196, 128), (5, 32, 128, 197), (5, 32, 197, 128), (5, 32, 128, 198), (5, 32, 198, 128), (5, 32, 128, 199), (5, 32, 199, 128), (5, 32, 128, 200), (5, 32, 200, 128), (5, 32, 128, 201), (5, 32, 201, 128), (5, 32, 128, 202), (5, 32, 202, 128), (5, 32, 128, 203), (5, 32, 203, 128), (5, 32, 128, 204), (5, 32, 204, 128), (5, 32, 128, 205), (5, 32, 205, 128), (5, 32, 128, 206), (5, 32, 206, 128), (5, 32, 128, 207), (5, 32, 207, 128), (5, 32, 128, 208), (5, 32, 208, 128), (5, 32, 128, 209), (5, 32, 209, 128), (5, 32, 128, 210), (5, 32, 210, 128), (5, 32, 128, 211), (5, 32, 211, 128), (5, 32, 128, 212), (5, 32, 212, 128), (5, 32, 128, 213), (5, 32, 213, 128), (5, 32, 128, 214), (5, 32, 214, 128), (5, 32, 128, 215), (5, 32, 215, 128), (5, 32, 128, 216), (5, 32, 216, 128), (5, 32, 128, 217), (5, 32, 217, 128), (5, 32, 128, 218), (5, 32, 218, 128), (5, 32, 128, 219), (5, 32, 219, 128), (5, 32, 128, 220), (5, 32, 220, 128), (5, 32, 128, 221), (5, 32, 221, 128), (5, 32, 128, 222), (5, 32, 222, 128), (5, 32, 128, 223), (5, 32, 223, 128), (5, 32, 128, 224), (5, 32, 224, 128), (5, 32, 128, 225), (5, 32, 225, 128), (5, 32, 128, 226), (5, 32, 226, 128), (5, 32, 128, 227), (5, 32, 227, 128), (5, 32, 128, 228), (5, 32, 228, 128), (5, 32, 128, 229), (5, 32, 229, 128), (5, 32, 128, 230), (5, 32, 230, 128), (5, 32, 128, 231), (5, 32, 231, 128), (5, 32, 128, 232), (5, 32, 232, 128), (5, 32, 128, 233), (5, 32, 233, 128), (5, 32, 128, 234), (5, 32, 234, 128), (5, 32, 128, 235), (5, 32, 235, 128), (5, 32, 128, 236), (5, 32, 236, 128), (5, 32, 128, 237), (5, 32, 237, 128), (5, 32, 128, 238), (5, 32, 238, 128), (5, 32, 128, 239), (5, 32, 239, 128), (5, 32, 128, 240), (5, 32, 240, 128), (5, 32, 128, 241), (5, 32, 241, 128), (5, 32, 128, 242), (5, 32, 242, 128), (5, 32, 128, 243), (5, 32, 243, 128), (5, 32, 128, 244), (5, 32, 244, 128), (5, 32, 128, 245), (5, 32, 245, 128), (5, 32, 128, 246), (5, 32, 246, 128), (5, 32, 128, 247), (5, 32, 247, 128), (5, 32, 128, 248), (5, 32, 248, 128), (5, 32, 128, 249), (5, 32, 249, 128), (5, 32, 128, 250), (5, 32, 250, 128), (5, 32, 128, 251), (5, 32, 251, 128), (5, 32, 128, 252), (5, 32, 252, 128), (5, 32, 128, 253), (5, 32, 253, 128), (5, 32, 128, 254), (5, 32, 254, 128), (5, 32, 128, 255), (5, 32, 255, 128), (5, 32, 128, 256), (5, 32, 256, 128), (5, 32, 128, 257), (5, 32, 257, 128), (5, 32, 128, 258), (5, 32, 258, 128), (5, 32, 128, 259), (5, 32, 259, 128), (5, 32, 128, 260), (5, 32, 260, 128), (5, 32, 128, 261), (5, 32, 261, 128), (5, 32, 128, 262), (5, 32, 262, 128), (5, 32, 128, 263), (5, 32, 263, 128), (5, 32, 128, 264), (5, 32, 264, 128), (5, 32, 128, 265), (5, 32, 265, 128), (5, 32, 128, 266), (5, 32, 266, 128), (5, 32, 128, 267), (5, 32, 267, 128), (5, 32, 128, 268), (5, 32, 268, 128), (5, 32, 128, 269), (5, 32, 269, 128), (5, 32, 128, 270), (5, 32, 270, 128), (5, 32, 128, 271), (5, 32, 271, 128), (5, 32, 128, 272), (5, 32, 272, 128), (5, 32, 128, 273), (5, 32, 273, 128), (5, 32, 128, 274), (5, 32, 274, 128), (5, 32, 128, 275), (5, 32, 275, 128), (5, 32, 128, 276), (5, 32, 276, 128), (5, 32, 128, 277), (5, 32, 277, 128), (5, 32, 128, 278), (5, 32, 278, 128), (5, 32, 128, 279), (5, 32, 279, 128), (5, 32, 128, 280), (5, 32, 280, 128), (5, 32, 128, 281), (5, 32, 281, 128), (5, 32, 128, 282), (5, 32, 282, 128), (5, 32, 128, 283), (5, 32, 283, 128), (5, 32, 128, 284), (5, 32, 284, 128), (5, 32, 128, 285), (5, 32, 285, 128), (5, 32, 128, 286), (5, 32, 286, 128), (5, 32, 128, 287), (5, 32, 287, 128), (5, 32, 128, 288), (5, 32, 288, 128), (5, 32, 128, 289), (5, 32, 289, 128), (5, 32, 128, 290), (5, 32, 290, 128), (5, 32, 128, 291), (5, 32, 291, 128), (5, 32, 128, 292), (5, 32, 292, 128), (5, 32, 128, 293), (5, 32, 293, 128), (5, 32, 128, 294), (5, 32, 294, 128), (5, 32, 128, 295), (5, 32, 295, 128), (5, 32, 128, 296), (5, 32, 296, 128), (5, 32, 128, 297), (5, 32, 297, 128), (5, 32, 128, 298), (5, 32, 298, 128), (5, 32, 128, 299), (5, 32, 299, 128), (5, 32, 128, 300), (5, 32, 300, 128), (5, 32, 128, 301), (5, 32, 301, 128), (5, 32, 128, 302), (5, 32, 302, 128), (5, 32, 128, 303), (5, 32, 303, 128), (5, 32, 128, 304), (5, 32, 304, 128), (5, 32, 128, 305), (5, 32, 305, 128), (5, 32, 128, 306), (5, 32, 306, 128), (5, 32, 128, 307), (5, 32, 307, 128), (5, 32, 128, 308), (5, 32, 308, 128), (5, 32, 128, 309), (5, 32, 309, 128), (5, 32, 128, 310), (5, 32, 310, 128), (5, 32, 128, 311), (5, 32, 311, 128), (5, 32, 128, 312), (5, 32, 312, 128), (5, 32, 128, 313), (5, 32, 313, 128), (5, 32, 128, 314), (5, 32, 314, 128), (5, 32, 128, 315), (5, 32, 315, 128), (5, 32, 128, 316), (5, 32, 316, 128), (5, 32, 128, 317), (5, 32, 317, 128), (5, 32, 128, 318), (5, 32, 318, 128), (5, 32, 128, 319), (5, 32, 319, 128), (5, 32, 128, 320), (5, 32, 320, 128), (5, 32, 128, 321), (5, 32, 321, 128), (5, 32, 128, 322), (5, 32, 322, 128), (5, 32, 128, 323), (5, 32, 323, 128), (5, 32, 128, 324), (5, 32, 324, 128), (5, 32, 128, 325), (5, 32, 325, 128), (5, 32, 128, 326), (5, 32, 326, 128), (5, 32, 128, 327), (5, 32, 327, 128), (5, 32, 128, 328), (5, 32, 328, 128), (5, 32, 128, 329), (5, 32, 329, 128), (5, 32, 128, 330), (5, 32, 330, 128), (5, 32, 128, 331), (5, 32, 331, 128), (5, 32, 128, 332), (5, 32, 332, 128), (5, 32, 128, 333), (5, 32, 333, 128), (5, 32, 128, 334), (5, 32, 334, 128), (5, 32, 128, 335), (5, 32, 335, 128), (5, 32, 128, 336), (5, 32, 336, 128), (5, 32, 128, 337), (5, 32, 337, 128), (5, 32, 128, 338), (5, 32, 338, 128), (5, 32, 128, 339), (5, 32, 339, 128), (5, 32, 128, 340), (5, 32, 340, 128), (5, 32, 128, 341), (5, 32, 341, 128), (5, 32, 128, 342), (5, 32, 342, 128), (5, 32, 128, 343), (5, 32, 343, 128), (5, 32, 128, 344), (5, 32, 344, 128), (5, 32, 128, 345), (5, 32, 345, 128), (5, 32, 128, 346), (5, 32, 346, 128)]], {}, 677],
['truediv', 'torch.Tensor', ['torch.cuda.HalfTensor'], [[(5, 32, 8, 8), (5, 32, 1, 9), (5, 32, 1, 10), (5, 32, 1, 11), (5, 32, 1, 12), (5, 32, 1, 13), (5, 32, 1, 14), (5, 32, 1, 15), (5, 32, 1, 16), (5, 32, 1, 17), (5, 32, 1, 18), (5, 32, 1, 19), (5, 32, 1, 20), (5, 32, 1, 21), (5, 32, 1, 22), (5, 32, 1, 23), (5, 32, 1, 24), (5, 32, 1, 25), (5, 32, 1, 26), (5, 32, 1, 27), (5, 32, 1, 28), (5, 32, 1, 29), (5, 32, 1, 30), (5, 32, 1, 31), (5, 32, 1, 32), (5, 32, 1, 33), (5, 32, 1, 34), (5, 32, 1, 35), (5, 32, 1, 36), (5, 32, 1, 37), (5, 32, 1, 38), (5, 32, 1, 39), (5, 32, 1, 40), (5, 32, 1, 41), (5, 32, 1, 42), (5, 32, 1, 43), (5, 32, 1, 44), (5, 32, 1, 45), (5, 32, 1, 46), (5, 32, 1, 47), (5, 32, 1, 48), (5, 32, 1, 49), (5, 32, 1, 50), (5, 32, 1, 51), (5, 32, 1, 52), (5, 32, 1, 53), (5, 32, 1, 54), (5, 32, 1, 55), (5, 32, 1, 56), (5, 32, 1, 57), (5, 32, 1, 58), (5, 32, 1, 59), (5, 32, 1, 60), (5, 32, 1, 61), (5, 32, 1, 62), (5, 32, 1, 63), (5, 32, 1, 64), (5, 32, 1, 65), (5, 32, 1, 66), (5, 32, 1, 67), (5, 32, 1, 68), (5, 32, 1, 69), (5, 32, 1, 70), (5, 32, 1, 71), (5, 32, 1, 72), (5, 32, 1, 73), (5, 32, 1, 74), (5, 32, 1, 75), (5, 32, 1, 76), (5, 32, 1, 77), (5, 32, 1, 78), (5, 32, 1, 79), (5, 32, 1, 80), (5, 32, 1, 81), (5, 32, 1, 82), (5, 32, 1, 83), (5, 32, 1, 84), (5, 32, 1, 85), (5, 32, 1, 86), (5, 32, 1, 87), (5, 32, 1, 88), (5, 32, 1, 89), (5, 32, 1, 90), (5, 32, 1, 91), (5, 32, 1, 92), (5, 32, 1, 93), (5, 32, 1, 94), (5, 32, 1, 95), (5, 32, 1, 96), (5, 32, 1, 97), (5, 32, 1, 98), (5, 32, 1, 99), (5, 32, 1, 100), (5, 32, 1, 101), (5, 32, 1, 102), (5, 32, 1, 103), (5, 32, 1, 104), (5, 32, 1, 105), (5, 32, 1, 106), (5, 32, 1, 107), (5, 32, 1, 108), (5, 32, 1, 109), (5, 32, 1, 110), (5, 32, 1, 111), (5, 32, 1, 112), (5, 32, 1, 113), (5, 32, 1, 114), (5, 32, 1, 115), (5, 32, 1, 116), (5, 32, 1, 117), (5, 32, 1, 118), (5, 32, 1, 119), (5, 32, 1, 120), (5, 32, 1, 121), (5, 32, 1, 122), (5, 32, 1, 123), (5, 32, 1, 124), (5, 32, 1, 125), (5, 32, 1, 126), (5, 32, 1, 127), (5, 32, 1, 128), (5, 32, 1, 129), (5, 32, 1, 130), (5, 32, 1, 131), (5, 32, 1, 132), (5, 32, 1, 133), (5, 32, 1, 134), (5, 32, 1, 135), (5, 32, 1, 136), (5, 32, 1, 137), (5, 32, 1, 138), (5, 32, 1, 139), (5, 32, 1, 140), (5, 32, 1, 141), (5, 32, 1, 142), (5, 32, 1, 143), (5, 32, 1, 144), (5, 32, 1, 145), (5, 32, 1, 146), (5, 32, 1, 147), (5, 32, 1, 148), (5, 32, 1, 149), (5, 32, 1, 150), (5, 32, 1, 151), (5, 32, 1, 152), (5, 32, 1, 153), (5, 32, 1, 154), (5, 32, 1, 155), (5, 32, 1, 156), (5, 32, 1, 157), (5, 32, 1, 158), (5, 32, 1, 159), (5, 32, 1, 160), (5, 32, 1, 161), (5, 32, 1, 162), (5, 32, 1, 163), (5, 32, 1, 164), (5, 32, 1, 165), (5, 32, 1, 166), (5, 32, 1, 167), (5, 32, 1, 168), (5, 32, 1, 169), (5, 32, 1, 170), (5, 32, 1, 171), (5, 32, 1, 172), (5, 32, 1, 173), (5, 32, 1, 174), (5, 32, 1, 175), (5, 32, 1, 176), (5, 32, 1, 177), (5, 32, 1, 178), (5, 32, 1, 179), (5, 32, 1, 180), (5, 32, 1, 181), (5, 32, 1, 182), (5, 32, 1, 183), (5, 32, 1, 184), (5, 32, 1, 185), (5, 32, 1, 186), (5, 32, 1, 187), (5, 32, 1, 188), (5, 32, 1, 189), (5, 32, 1, 190), (5, 32, 1, 191), (5, 32, 1, 192), (5, 32, 1, 193), (5, 32, 1, 194), (5, 32, 1, 195), (5, 32, 1, 196), (5, 32, 1, 197), (5, 32, 1, 198), (5, 32, 1, 199), (5, 32, 1, 200), (5, 32, 1, 201), (5, 32, 1, 202), (5, 32, 1, 203), (5, 32, 1, 204), (5, 32, 1, 205), (5, 32, 1, 206), (5, 32, 1, 207), (5, 32, 1, 208), (5, 32, 1, 209), (5, 32, 1, 210), (5, 32, 1, 211), (5, 32, 1, 212), (5, 32, 1, 213), (5, 32, 1, 214), (5, 32, 1, 215), (5, 32, 1, 216), (5, 32, 1, 217), (5, 32, 1, 218), (5, 32, 1, 219), (5, 32, 1, 220), (5, 32, 1, 221), (5, 32, 1, 222), (5, 32, 1, 223), (5, 32, 1, 224), (5, 32, 1, 225), (5, 32, 1, 226), (5, 32, 1, 227), (5, 32, 1, 228), (5, 32, 1, 229), (5, 32, 1, 230), (5, 32, 1, 231), (5, 32, 1, 232), (5, 32, 1, 233), (5, 32, 1, 234), (5, 32, 1, 235), (5, 32, 1, 236), (5, 32, 1, 237), (5, 32, 1, 238), (5, 32, 1, 239), (5, 32, 1, 240), (5, 32, 1, 241), (5, 32, 1, 242), (5, 32, 1, 243), (5, 32, 1, 244), (5, 32, 1, 245), (5, 32, 1, 246), (5, 32, 1, 247), (5, 32, 1, 248), (5, 32, 1, 249), (5, 32, 1, 250), (5, 32, 1, 251), (5, 32, 1, 252), (5, 32, 1, 253), (5, 32, 1, 254), (5, 32, 1, 255), (5, 32, 1, 256), (5, 32, 1, 257), (5, 32, 1, 258), (5, 32, 1, 259), (5, 32, 1, 260), (5, 32, 1, 261), (5, 32, 1, 262), (5, 32, 1, 263), (5, 32, 1, 264), (5, 32, 1, 265), (5, 32, 1, 266), (5, 32, 1, 267), (5, 32, 1, 268), (5, 32, 1, 269), (5, 32, 1, 270), (5, 32, 1, 271), (5, 32, 1, 272), (5, 32, 1, 273), (5, 32, 1, 274), (5, 32, 1, 275), (5, 32, 1, 276), (5, 32, 1, 277), (5, 32, 1, 278), (5, 32, 1, 279), (5, 32, 1, 280), (5, 32, 1, 281), (5, 32, 1, 282), (5, 32, 1, 283), (5, 32, 1, 284), (5, 32, 1, 285), (5, 32, 1, 286), (5, 32, 1, 287), (5, 32, 1, 288), (5, 32, 1, 289), (5, 32, 1, 290), (5, 32, 1, 291), (5, 32, 1, 292), (5, 32, 1, 293), (5, 32, 1, 294), (5, 32, 1, 295), (5, 32, 1, 296), (5, 32, 1, 297), (5, 32, 1, 298), (5, 32, 1, 299), (5, 32, 1, 300), (5, 32, 1, 301), (5, 32, 1, 302), (5, 32, 1, 303), (5, 32, 1, 304), (5, 32, 1, 305), (5, 32, 1, 306), (5, 32, 1, 307), (5, 32, 1, 308), (5, 32, 1, 309), (5, 32, 1, 310), (5, 32, 1, 311), (5, 32, 1, 312), (5, 32, 1, 313), (5, 32, 1, 314), (5, 32, 1, 315), (5, 32, 1, 316), (5, 32, 1, 317), (5, 32, 1, 318), (5, 32, 1, 319), (5, 32, 1, 320), (5, 32, 1, 321), (5, 32, 1, 322), (5, 32, 1, 323), (5, 32, 1, 324), (5, 32, 1, 325), (5, 32, 1, 326), (5, 32, 1, 327), (5, 32, 1, 328), (5, 32, 1, 329), (5, 32, 1, 330), (5, 32, 1, 331), (5, 32, 1, 332), (5, 32, 1, 333), (5, 32, 1, 334), (5, 32, 1, 335), (5, 32, 1, 336), (5, 32, 1, 337), (5, 32, 1, 338), (5, 32, 1, 339), (5, 32, 1, 340), (5, 32, 1, 341), (5, 32, 1, 342), (5, 32, 1, 343), (5, 32, 1, 344), (5, 32, 1, 345), (5, 32, 1, 346)], [11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761, 11.313708498984761]], {}, 339],
['add', 'torch.Tensor', ['torch.cuda.HalfTensor', 'torch.cuda.HalfTensor'], [[(5, 32, 8, 8), (5, 8, 4096), (5, 1, 4096)], [(1, 1, 8, 8), (5, 8, 4096), (5, 1, 4096)]], {}, 3],
['softmax', 'torch.nn.functional', ['torch.cuda.FloatTensor'], [[(5, 32, 8, 8), (5, 32000), (5, 32, 1, 9), (5, 32, 1, 10), (5, 32, 1, 11), (5, 32, 1, 12), (5, 32, 1, 13), (5, 32, 1, 14), (5, 32, 1, 15), (5, 32, 1, 16), (5, 32, 1, 17), (5, 32, 1, 18), (5, 32, 1, 19), (5, 32, 1, 20), (5, 32, 1, 21), (5, 32, 1, 22), (5, 32, 1, 23), (5, 32, 1, 24), (5, 32, 1, 25), (5, 32, 1, 26), (5, 32, 1, 27), (5, 32, 1, 28), (5, 32, 1, 29), (5, 32, 1, 30), (5, 32, 1, 31), (5, 32, 1, 32), (5, 32, 1, 33), (5, 32, 1, 34), (5, 32, 1, 35), (5, 32, 1, 36), (5, 32, 1, 37), (5, 32, 1, 38), (5, 32, 1, 39), (5, 32, 1, 40), (5, 32, 1, 41), (5, 32, 1, 42), (5, 32, 1, 43), (5, 32, 1, 44), (5, 32, 1, 45), (5, 32, 1, 46), (5, 32, 1, 47), (5, 32, 1, 48), (5, 32, 1, 49), (5, 32, 1, 50), (5, 32, 1, 51), (5, 32, 1, 52), (5, 32, 1, 53), (5, 32, 1, 54), (5, 32, 1, 55), (5, 32, 1, 56), (5, 32, 1, 57), (5, 32, 1, 58), (5, 32, 1, 59), (5, 32, 1, 60), (5, 32, 1, 61), (5, 32, 1, 62), (5, 32, 1, 63), (5, 32, 1, 64), (5, 32, 1, 65), (5, 32, 1, 66), (5, 32, 1, 67), (5, 32, 1, 68), (5, 32, 1, 69), (5, 32, 1, 70), (5, 32, 1, 71), (5, 32, 1, 72), (5, 32, 1, 73), (5, 32, 1, 74), (5, 32, 1, 75), (5, 32, 1, 76), (5, 32, 1, 77), (5, 32, 1, 78), (5, 32, 1, 79), (5, 32, 1, 80), (5, 32, 1, 81), (5, 32, 1, 82), (5, 32, 1, 83), (5, 32, 1, 84), (5, 32, 1, 85), (5, 32, 1, 86), (5, 32, 1, 87), (5, 32, 1, 88), (5, 32, 1, 89), (5, 32, 1, 90), (5, 32, 1, 91), (5, 32, 1, 92), (5, 32, 1, 93), (5, 32, 1, 94), (5, 32, 1, 95), (5, 32, 1, 96), (5, 32, 1, 97), (5, 32, 1, 98), (5, 32, 1, 99), (5, 32, 1, 100), (5, 32, 1, 101), (5, 32, 1, 102), (5, 32, 1, 103), (5, 32, 1, 104), (5, 32, 1, 105), (5, 32, 1, 106), (5, 32, 1, 107), (5, 32, 1, 108), (5, 32, 1, 109), (5, 32, 1, 110), (5, 32, 1, 111), (5, 32, 1, 112), (5, 32, 1, 113), (5, 32, 1, 114), (5, 32, 1, 115), (5, 32, 1, 116), (5, 32, 1, 117), (5, 32, 1, 118), (5, 32, 1, 119), (5, 32, 1, 120), (5, 32, 1, 121), (5, 32, 1, 122), (5, 32, 1, 123), (5, 32, 1, 124), (5, 32, 1, 125), (5, 32, 1, 126), (5, 32, 1, 127), (5, 32, 1, 128), (5, 32, 1, 129), (5, 32, 1, 130), (5, 32, 1, 131), (5, 32, 1, 132), (5, 32, 1, 133), (5, 32, 1, 134), (5, 32, 1, 135), (5, 32, 1, 136), (5, 32, 1, 137), (5, 32, 1, 138), (5, 32, 1, 139), (5, 32, 1, 140), (5, 32, 1, 141), (5, 32, 1, 142), (5, 32, 1, 143), (5, 32, 1, 144), (5, 32, 1, 145), (5, 32, 1, 146), (5, 32, 1, 147), (5, 32, 1, 148), (5, 32, 1, 149), (5, 32, 1, 150), (5, 32, 1, 151), (5, 32, 1, 152), (5, 32, 1, 153), (5, 32, 1, 154), (5, 32, 1, 155), (5, 32, 1, 156), (5, 32, 1, 157), (5, 32, 1, 158), (5, 32, 1, 159), (5, 32, 1, 160), (5, 32, 1, 161), (5, 32, 1, 162), (5, 32, 1, 163), (5, 32, 1, 164), (5, 32, 1, 165), (5, 32, 1, 166), (5, 32, 1, 167), (5, 32, 1, 168), (5, 32, 1, 169), (5, 32, 1, 170), (5, 32, 1, 171), (5, 32, 1, 172), (5, 32, 1, 173), (5, 32, 1, 174), (5, 32, 1, 175), (5, 32, 1, 176), (5, 32, 1, 177), (5, 32, 1, 178), (5, 32, 1, 179), (5, 32, 1, 180), (5, 32, 1, 181), (5, 32, 1, 182), (5, 32, 1, 183), (5, 32, 1, 184), (5, 32, 1, 185), (5, 32, 1, 186), (5, 32, 1, 187), (5, 32, 1, 188), (5, 32, 1, 189), (5, 32, 1, 190), (5, 32, 1, 191), (5, 32, 1, 192), (5, 32, 1, 193), (5, 32, 1, 194), (5, 32, 1, 195), (5, 32, 1, 196), (5, 32, 1, 197), (5, 32, 1, 198), (5, 32, 1, 199), (5, 32, 1, 200), (5, 32, 1, 201), (5, 32, 1, 202), (5, 32, 1, 203), (5, 32, 1, 204), (5, 32, 1, 205), (5, 32, 1, 206), (5, 32, 1, 207), (5, 32, 1, 208), (5, 32, 1, 209), (5, 32, 1, 210), (5, 32, 1, 211), (5, 32, 1, 212), (5, 32, 1, 213), (5, 32, 1, 214), (5, 32, 1, 215), (5, 32, 1, 216), (5, 32, 1, 217), (5, 32, 1, 218), (5, 32, 1, 219), (5, 32, 1, 220), (5, 32, 1, 221), (5, 32, 1, 222), (5, 32, 1, 223), (5, 32, 1, 224), (5, 32, 1, 225), (5, 32, 1, 226), (5, 32, 1, 227), (5, 32, 1, 228), (5, 32, 1, 229), (5, 32, 1, 230), (5, 32, 1, 231), (5, 32, 1, 232), (5, 32, 1, 233), (5, 32, 1, 234), (5, 32, 1, 235), (5, 32, 1, 236), (5, 32, 1, 237), (5, 32, 1, 238), (5, 32, 1, 239), (5, 32, 1, 240), (5, 32, 1, 241), (5, 32, 1, 242), (5, 32, 1, 243), (5, 32, 1, 244), (5, 32, 1, 245), (5, 32, 1, 246), (5, 32, 1, 247), (5, 32, 1, 248), (5, 32, 1, 249), (5, 32, 1, 250), (5, 32, 1, 251), (5, 32, 1, 252), (5, 32, 1, 253), (5, 32, 1, 254), (5, 32, 1, 255), (5, 32, 1, 256), (5, 32, 1, 257), (5, 32, 1, 258), (5, 32, 1, 259), (5, 32, 1, 260), (5, 32, 1, 261), (5, 32, 1, 262), (5, 32, 1, 263), (5, 32, 1, 264), (5, 32, 1, 265), (5, 32, 1, 266), (5, 32, 1, 267), (5, 32, 1, 268), (5, 32, 1, 269), (5, 32, 1, 270), (5, 32, 1, 271), (5, 32, 1, 272), (5, 32, 1, 273), (5, 32, 1, 274), (5, 32, 1, 275), (5, 32, 1, 276), (5, 32, 1, 277), (5, 32, 1, 278), (5, 32, 1, 279), (5, 32, 1, 280), (5, 32, 1, 281), (5, 32, 1, 282), (5, 32, 1, 283), (5, 32, 1, 284), (5, 32, 1, 285), (5, 32, 1, 286), (5, 32, 1, 287), (5, 32, 1, 288), (5, 32, 1, 289), (5, 32, 1, 290), (5, 32, 1, 291), (5, 32, 1, 292), (5, 32, 1, 293), (5, 32, 1, 294), (5, 32, 1, 295), (5, 32, 1, 296), (5, 32, 1, 297), (5, 32, 1, 298), (5, 32, 1, 299), (5, 32, 1, 300), (5, 32, 1, 301), (5, 32, 1, 302), (5, 32, 1, 303), (5, 32, 1, 304), (5, 32, 1, 305), (5, 32, 1, 306), (5, 32, 1, 307), (5, 32, 1, 308), (5, 32, 1, 309), (5, 32, 1, 310), (5, 32, 1, 311), (5, 32, 1, 312), (5, 32, 1, 313), (5, 32, 1, 314), (5, 32, 1, 315), (5, 32, 1, 316), (5, 32, 1, 317), (5, 32, 1, 318), (5, 32, 1, 319), (5, 32, 1, 320), (5, 32, 1, 321), (5, 32, 1, 322), (5, 32, 1, 323), (5, 32, 1, 324), (5, 32, 1, 325), (5, 32, 1, 326), (5, 32, 1, 327), (5, 32, 1, 328), (5, 32, 1, 329), (5, 32, 1, 330), (5, 32, 1, 331), (5, 32, 1, 332), (5, 32, 1, 333), (5, 32, 1, 334), (5, 32, 1, 335), (5, 32, 1, 336), (5, 32, 1, 337), (5, 32, 1, 338), (5, 32, 1, 339), (5, 32, 1, 340), (5, 32, 1, 341), (5, 32, 1, 342), (5, 32, 1, 343), (5, 32, 1, 344), (5, 32, 1, 345), (5, 32, 1, 346)]], {'dim}, 340],
['softmax', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(5, 32, 8, 8), (5, 32, 1, 9), (5, 32, 1, 10), (5, 32, 1, 11), (5, 32, 1, 12), (5, 32, 1, 13), (5, 32, 1, 14), (5, 32, 1, 15), (5, 32, 1, 16), (5, 32, 1, 17), (5, 32, 1, 18), (5, 32, 1, 19), (5, 32, 1, 20), (5, 32, 1, 21), (5, 32, 1, 22), (5, 32, 1, 23), (5, 32, 1, 24), (5, 32, 1, 25), (5, 32, 1, 26), (5, 32, 1, 27), (5, 32, 1, 28), (5, 32, 1, 29), (5, 32, 1, 30), (5, 32, 1, 31), (5, 32, 1, 32), (5, 32, 1, 33), (5, 32, 1, 34), (5, 32, 1, 35), (5, 32, 1, 36), (5, 32, 1, 37), (5, 32, 1, 38), (5, 32, 1, 39), (5, 32, 1, 40), (5, 32, 1, 41), (5, 32, 1, 42), (5, 32, 1, 43), (5, 32, 1, 44), (5, 32, 1, 45), (5, 32, 1, 46), (5, 32, 1, 47), (5, 32, 1, 48), (5, 32, 1, 49), (5, 32, 1, 50), (5, 32, 1, 51), (5, 32, 1, 52), (5, 32, 1, 53), (5, 32, 1, 54), (5, 32, 1, 55), (5, 32, 1, 56), (5, 32, 1, 57), (5, 32, 1, 58), (5, 32, 1, 59), (5, 32, 1, 60), (5, 32, 1, 61), (5, 32, 1, 62), (5, 32, 1, 63), (5, 32, 1, 64), (5, 32, 1, 65), (5, 32, 1, 66), (5, 32, 1, 67), (5, 32, 1, 68), (5, 32, 1, 69), (5, 32, 1, 70), (5, 32, 1, 71), (5, 32, 1, 72), (5, 32, 1, 73), (5, 32, 1, 74), (5, 32, 1, 75), (5, 32, 1, 76), (5, 32, 1, 77), (5, 32, 1, 78), (5, 32, 1, 79), (5, 32, 1, 80), (5, 32, 1, 81), (5, 32, 1, 82), (5, 32, 1, 83), (5, 32, 1, 84), (5, 32, 1, 85), (5, 32, 1, 86), (5, 32, 1, 87), (5, 32, 1, 88), (5, 32, 1, 89), (5, 32, 1, 90), (5, 32, 1, 91), (5, 32, 1, 92), (5, 32, 1, 93), (5, 32, 1, 94), (5, 32, 1, 95), (5, 32, 1, 96), (5, 32, 1, 97), (5, 32, 1, 98), (5, 32, 1, 99), (5, 32, 1, 100), (5, 32, 1, 101), (5, 32, 1, 102), (5, 32, 1, 103), (5, 32, 1, 104), (5, 32, 1, 105), (5, 32, 1, 106), (5, 32, 1, 107), (5, 32, 1, 108), (5, 32, 1, 109), (5, 32, 1, 110), (5, 32, 1, 111), (5, 32, 1, 112), (5, 32, 1, 113), (5, 32, 1, 114), (5, 32, 1, 115), (5, 32, 1, 116), (5, 32, 1, 117), (5, 32, 1, 118), (5, 32, 1, 119), (5, 32, 1, 120), (5, 32, 1, 121), (5, 32, 1, 122), (5, 32, 1, 123), (5, 32, 1, 124), (5, 32, 1, 125), (5, 32, 1, 126), (5, 32, 1, 127), (5, 32, 1, 128), (5, 32, 1, 129), (5, 32, 1, 130), (5, 32, 1, 131), (5, 32, 1, 132), (5, 32, 1, 133), (5, 32, 1, 134), (5, 32, 1, 135), (5, 32, 1, 136), (5, 32, 1, 137), (5, 32, 1, 138), (5, 32, 1, 139), (5, 32, 1, 140), (5, 32, 1, 141), (5, 32, 1, 142), (5, 32, 1, 143), (5, 32, 1, 144), (5, 32, 1, 145), (5, 32, 1, 146), (5, 32, 1, 147), (5, 32, 1, 148), (5, 32, 1, 149), (5, 32, 1, 150), (5, 32, 1, 151), (5, 32, 1, 152), (5, 32, 1, 153), (5, 32, 1, 154), (5, 32, 1, 155), (5, 32, 1, 156), (5, 32, 1, 157), (5, 32, 1, 158), (5, 32, 1, 159), (5, 32, 1, 160), (5, 32, 1, 161), (5, 32, 1, 162), (5, 32, 1, 163), (5, 32, 1, 164), (5, 32, 1, 165), (5, 32, 1, 166), (5, 32, 1, 167), (5, 32, 1, 168), (5, 32, 1, 169), (5, 32, 1, 170), (5, 32, 1, 171), (5, 32, 1, 172), (5, 32, 1, 173), (5, 32, 1, 174), (5, 32, 1, 175), (5, 32, 1, 176), (5, 32, 1, 177), (5, 32, 1, 178), (5, 32, 1, 179), (5, 32, 1, 180), (5, 32, 1, 181), (5, 32, 1, 182), (5, 32, 1, 183), (5, 32, 1, 184), (5, 32, 1, 185), (5, 32, 1, 186), (5, 32, 1, 187), (5, 32, 1, 188), (5, 32, 1, 189), (5, 32, 1, 190), (5, 32, 1, 191), (5, 32, 1, 192), (5, 32, 1, 193), (5, 32, 1, 194), (5, 32, 1, 195), (5, 32, 1, 196), (5, 32, 1, 197), (5, 32, 1, 198), (5, 32, 1, 199), (5, 32, 1, 200), (5, 32, 1, 201), (5, 32, 1, 202), (5, 32, 1, 203), (5, 32, 1, 204), (5, 32, 1, 205), (5, 32, 1, 206), (5, 32, 1, 207), (5, 32, 1, 208), (5, 32, 1, 209), (5, 32, 1, 210), (5, 32, 1, 211), (5, 32, 1, 212), (5, 32, 1, 213), (5, 32, 1, 214), (5, 32, 1, 215), (5, 32, 1, 216), (5, 32, 1, 217), (5, 32, 1, 218), (5, 32, 1, 219), (5, 32, 1, 220), (5, 32, 1, 221), (5, 32, 1, 222), (5, 32, 1, 223), (5, 32, 1, 224), (5, 32, 1, 225), (5, 32, 1, 226), (5, 32, 1, 227), (5, 32, 1, 228), (5, 32, 1, 229), (5, 32, 1, 230), (5, 32, 1, 231), (5, 32, 1, 232), (5, 32, 1, 233), (5, 32, 1, 234), (5, 32, 1, 235), (5, 32, 1, 236), (5, 32, 1, 237), (5, 32, 1, 238), (5, 32, 1, 239), (5, 32, 1, 240), (5, 32, 1, 241), (5, 32, 1, 242), (5, 32, 1, 243), (5, 32, 1, 244), (5, 32, 1, 245), (5, 32, 1, 246), (5, 32, 1, 247), (5, 32, 1, 248), (5, 32, 1, 249), (5, 32, 1, 250), (5, 32, 1, 251), (5, 32, 1, 252), (5, 32, 1, 253), (5, 32, 1, 254), (5, 32, 1, 255), (5, 32, 1, 256), (5, 32, 1, 257), (5, 32, 1, 258), (5, 32, 1, 259), (5, 32, 1, 260), (5, 32, 1, 261), (5, 32, 1, 262), (5, 32, 1, 263), (5, 32, 1, 264), (5, 32, 1, 265), (5, 32, 1, 266), (5, 32, 1, 267), (5, 32, 1, 268), (5, 32, 1, 269), (5, 32, 1, 270), (5, 32, 1, 271), (5, 32, 1, 272), (5, 32, 1, 273), (5, 32, 1, 274), (5, 32, 1, 275), (5, 32, 1, 276), (5, 32, 1, 277), (5, 32, 1, 278), (5, 32, 1, 279), (5, 32, 1, 280), (5, 32, 1, 281), (5, 32, 1, 282), (5, 32, 1, 283), (5, 32, 1, 284), (5, 32, 1, 285), (5, 32, 1, 286), (5, 32, 1, 287), (5, 32, 1, 288), (5, 32, 1, 289), (5, 32, 1, 290), (5, 32, 1, 291), (5, 32, 1, 292), (5, 32, 1, 293), (5, 32, 1, 294), (5, 32, 1, 295), (5, 32, 1, 296), (5, 32, 1, 297), (5, 32, 1, 298), (5, 32, 1, 299), (5, 32, 1, 300), (5, 32, 1, 301), (5, 32, 1, 302), (5, 32, 1, 303), (5, 32, 1, 304), (5, 32, 1, 305), (5, 32, 1, 306), (5, 32, 1, 307), (5, 32, 1, 308), (5, 32, 1, 309), (5, 32, 1, 310), (5, 32, 1, 311), (5, 32, 1, 312), (5, 32, 1, 313), (5, 32, 1, 314), (5, 32, 1, 315), (5, 32, 1, 316), (5, 32, 1, 317), (5, 32, 1, 318), (5, 32, 1, 319), (5, 32, 1, 320), (5, 32, 1, 321), (5, 32, 1, 322), (5, 32, 1, 323), (5, 32, 1, 324), (5, 32, 1, 325), (5, 32, 1, 326), (5, 32, 1, 327), (5, 32, 1, 328), (5, 32, 1, 329), (5, 32, 1, 330), (5, 32, 1, 331), (5, 32, 1, 332), (5, 32, 1, 333), (5, 32, 1, 334), (5, 32, 1, 335), (5, 32, 1, 336), (5, 32, 1, 337), (5, 32, 1, 338), (5, 32, 1, 339), (5, 32, 1, 340), (5, 32, 1, 341), (5, 32, 1, 342), (5, 32, 1, 343), (5, 32, 1, 344), (5, 32, 1, 345), (5, 32, 1, 346)], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], {}, 339],
['linear', 'torch.nn.functional', ['torch.cuda.HalfTensor', 'torch.cuda.HalfTensor'], [[(5, 8, 4096), (5, 8, 11008), (5, 1, 4096), (5, 1, 11008)], [(4096, 4096), (4096, 11008), (4096, 4096), (4096, 11008)]], {}, 4],
['silu', 'torch.nn.functional', ['torch.cuda.HalfTensor'], [[(5, 8, 11008), (5, 1, 11008)]], {}, 2],
['truediv', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(5, 32000)], [0.8]], {}, 1],
['sort', 'torch', ['torch.cuda.FloatTensor'], [[(5, 32000)]], {'dim': [-1], 'descending': [True]}, 1],
['cumsum', 'torch', ['torch.cuda.FloatTensor'], [[(5, 32000)]], {'dim': [-1]}, 1],
['sub', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(5, 32000)], [(5, 32000)]], {}, 1],
['gt', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(5, 32000)], [0.95]], {}, 1],
['setitem', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.BoolTensor'], [[(5, 32000)], [(5, 32000)], [0.0]], {}, 1],
['sum', 'torch.Tensor', ['torch.cuda.FloatTensor'], [[(5, 32000)]], {'dim': [-1], 'keepdim': [True]}, 1],
['div_', 'torch.Tensor', ['torch.cuda.FloatTensor', 'torch.cuda.FloatTensor'], [[(5, 32000)], [(5, 1)]], {}, 1],
['multinomial', 'torch', ['torch.cuda.FloatTensor'], [[(5, 32000)]], {'num_samples': [1]}, 1],
['gather', 'torch', ['torch.cuda.LongTensor', 'torch.cuda.LongTensor'], [[(5, 32000)], [-1], [(5, 1)]], {}, 1],
['getitem', 'torch.Tensor', ['torch.cuda.BoolTensor'], [[(5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347)], [(slice(None, None, None), 8), (slice(None, None, None), 9), (slice(None, None, None), 10), (slice(None, None, None), 11), (slice(None, None, None), 12), (slice(None, None, None), 13), (slice(None, None, None), 14), (slice(None, None, None), 15), (slice(None, None, None), 16), (slice(None, None, None), 17), (slice(None, None, None), 18), (slice(None, None, None), 19), (slice(None, None, None), 20), (slice(None, None, None), 21), (slice(None, None, None), 22), (slice(None, None, None), 23), (slice(None, None, None), 24), (slice(None, None, None), 25), (slice(None, None, None), 26), (slice(None, None, None), 27), (slice(None, None, None), 28), (slice(None, None, None), 29), (slice(None, None, None), 30), (slice(None, None, None), 31), (slice(None, None, None), 32), (slice(None, None, None), 33), (slice(None, None, None), 34), (slice(None, None, None), 35), (slice(None, None, None), 36), (slice(None, None, None), 37), (slice(None, None, None), 38), (slice(None, None, None), 39), (slice(None, None, None), 40), (slice(None, None, None), 41), (slice(None, None, None), 42), (slice(None, None, None), 43), (slice(None, None, None), 44), (slice(None, None, None), 45), (slice(None, None, None), 46), (slice(None, None, None), 47), (slice(None, None, None), 48), (slice(None, None, None), 49), (slice(None, None, None), 50), (slice(None, None, None), 51), (slice(None, None, None), 52), (slice(None, None, None), 53), (slice(None, None, None), 54), (slice(None, None, None), 55), (slice(None, None, None), 56), (slice(None, None, None), 57), (slice(None, None, None), 58), (slice(None, None, None), 59), (slice(None, None, None), 60), (slice(None, None, None), 61), (slice(None, None, None), 62), (slice(None, None, None), 63), (slice(None, None, None), 64), (slice(None, None, None), 65), (slice(None, None, None), 66), (slice(None, None, None), 67), (slice(None, None, None), 68), (slice(None, None, None), 69), (slice(None, None, None), 70), (slice(None, None, None), 71), (slice(None, None, None), 72), (slice(None, None, None), 73), (slice(None, None, None), 74), (slice(None, None, None), 75), (slice(None, None, None), 76), (slice(None, None, None), 77), (slice(None, None, None), 78), (slice(None, None, None), 79), (slice(None, None, None), 80), (slice(None, None, None), 81), (slice(None, None, None), 82), (slice(None, None, None), 83), (slice(None, None, None), 84), (slice(None, None, None), 85), (slice(None, None, None), 86), (slice(None, None, None), 87), (slice(None, None, None), 88), (slice(None, None, None), 89), (slice(None, None, None), 90), (slice(None, None, None), 91), (slice(None, None, None), 92), (slice(None, None, None), 93), (slice(None, None, None), 94), (slice(None, None, None), 95), (slice(None, None, None), 96), (slice(None, None, None), 97), (slice(None, None, None), 98), (slice(None, None, None), 99), (slice(None, None, None), 100), (slice(None, None, None), 101), (slice(None, None, None), 102), (slice(None, None, None), 103), (slice(None, None, None), 104), (slice(None, None, None), 105), (slice(None, None, None), 106), (slice(None, None, None), 107), (slice(None, None, None), 108), (slice(None, None, None), 109), (slice(None, None, None), 110), (slice(None, None, None), 111), (slice(None, None, None), 112), (slice(None, None, None), 113), (slice(None, None, None), 114), (slice(None, None, None), 115), (slice(None, None, None), 116), (slice(None, None, None), 117), (slice(None, None, None), 118), (slice(None, None, None), 119), (slice(None, None, None), 120), (slice(None, None, None), 121), (slice(None, None, None), 122), (slice(None, None, None), 123), (slice(None, None, None), 124), (slice(None, None, None), 125), (slice(None, None, None), 126), (slice(None, None, None), 127), (slice(None, None, None), 128), (slice(None, None, None), 129), (slice(None, None, None), 130), (slice(None, None, None), 131), (slice(None, None, None), 132), (slice(None, None, None), 133), (slice(None, None, None), 134), (slice(None, None, None), 135), (slice(None, None, None), 136), (slice(None, None, None), 137), (slice(None, None, None), 138), (slice(None, None, None), 139), (slice(None, None, None), 140), (slice(None, None, None), 141), (slice(None, None, None), 142), (slice(None, None, None), 143), (slice(None, None, None), 144), (slice(None, None, None), 145), (slice(None, None, None), 146), (slice(None, None, None), 147), (slice(None, None, None), 148), (slice(None, None, None), 149), (slice(None, None, None), 150), (slice(None, None, None), 151), (slice(None, None, None), 152), (slice(None, None, None), 153), (slice(None, None, None), 154), (slice(None, None, None), 155), (slice(None, None, None), 156), (slice(None, None, None), 157), (slice(None, None, None), 158), (slice(None, None, None), 159), (slice(None, None, None), 160), (slice(None, None, None), 161), (slice(None, None, None), 162), (slice(None, None, None), 163), (slice(None, None, None), 164), (slice(None, None, None), 165), (slice(None, None, None), 166), (slice(None, None, None), 167), (slice(None, None, None), 168), (slice(None, None, None), 169), (slice(None, None, None), 170), (slice(None, None, None), 171), (slice(None, None, None), 172), (slice(None, None, None), 173), (slice(None, None, None), 174), (slice(None, None, None), 175), (slice(None, None, None), 176), (slice(None, None, None), 177), (slice(None, None, None), 178), (slice(None, None, None), 179), (slice(None, None, None), 180), (slice(None, None, None), 181), (slice(None, None, None), 182), (slice(None, None, None), 183), (slice(None, None, None), 184), (slice(None, None, None), 185), (slice(None, None, None), 186), (slice(None, None, None), 187), (slice(None, None, None), 188), (slice(None, None, None), 189), (slice(None, None, None), 190), (slice(None, None, None), 191), (slice(None, None, None), 192), (slice(None, None, None), 193), (slice(None, None, None), 194), (slice(None, None, None), 195), (slice(None, None, None), 196), (slice(None, None, None), 197), (slice(None, None, None), 198), (slice(None, None, None), 199), (slice(None, None, None), 200), (slice(None, None, None), 201), (slice(None, None, None), 202), (slice(None, None, None), 203), (slice(None, None, None), 204), (slice(None, None, None), 205), (slice(None, None, None), 206), (slice(None, None, None), 207), (slice(None, None, None), 208), (slice(None, None, None), 209), (slice(None, None, None), 210), (slice(None, None, None), 211), (slice(None, None, None), 212), (slice(None, None, None), 213), (slice(None, None, None), 214), (slice(None, None, None), 215), (slice(None, None, None), 216), (slice(None, None, None), 217), (slice(None, None, None), 218), (slice(None, None, None), 219), (slice(None, None, None), 220), (slice(None, None, None), 221), (slice(None, None, None), 222), (slice(None, None, None), 223), (slice(None, None, None), 224), (slice(None, None, None), 225), (slice(None, None, None), 226), (slice(None, None, None), 227), (slice(None, None, None), 228), (slice(None, None, None), 229), (slice(None, None, None), 230), (slice(None, None, None), 231), (slice(None, None, None), 232), (slice(None, None, None), 233), (slice(None, None, None), 234), (slice(None, None, None), 235), (slice(None, None, None), 236), (slice(None, None, None), 237), (slice(None, None, None), 238), (slice(None, None, None), 239), (slice(None, None, None), 240), (slice(None, None, None), 241), (slice(None, None, None), 242), (slice(None, None, None), 243), (slice(None, None, None), 244), (slice(None, None, None), 245), (slice(None, None, None), 246), (slice(None, None, None), 247), (slice(None, None, None), 248), (slice(None, None, None), 249), (slice(None, None, None), 250), (slice(None, None, None), 251), (slice(None, None, None), 252), (slice(None, None, None), 253), (slice(None, None, None), 254), (slice(None, None, None), 255), (slice(None, None, None), 256), (slice(None, None, None), 257), (slice(None, None, None), 258), (slice(None, None, None), 259), (slice(None, None, None), 260), (slice(None, None, None), 261), (slice(None, None, None), 262), (slice(None, None, None), 263), (slice(None, None, None), 264), (slice(None, None, None), 265), (slice(None, None, None), 266), (slice(None, None, None), 267), (slice(None, None, None), 268), (slice(None, None, None), 269), (slice(None, None, None), 270), (slice(None, None, None), 271), (slice(None, None, None), 272), (slice(None, None, None), 273), (slice(None, None, None), 274), (slice(None, None, None), 275), (slice(None, None, None), 276), (slice(None, None, None), 277), (slice(None, None, None), 278), (slice(None, None, None), 279), (slice(None, None, None), 280), (slice(None, None, None), 281), (slice(None, None, None), 282), (slice(None, None, None), 283), (slice(None, None, None), 284), (slice(None, None, None), 285), (slice(None, None, None), 286), (slice(None, None, None), 287), (slice(None, None, None), 288), (slice(None, None, None), 289), (slice(None, None, None), 290), (slice(None, None, None), 291), (slice(None, None, None), 292), (slice(None, None, None), 293), (slice(None, None, None), 294), (slice(None, None, None), 295), (slice(None, None, None), 296), (slice(None, None, None), 297), (slice(None, None, None), 298), (slice(None, None, None), 299), (slice(None, None, None), 300), (slice(None, None, None), 301), (slice(None, None, None), 302), (slice(None, None, None), 303), (slice(None, None, None), 304), (slice(None, None, None), 305), (slice(None, None, None), 306), (slice(None, None, None), 307), (slice(None, None, None), 308), (slice(None, None, None), 309), (slice(None, None, None), 310), (slice(None, None, None), 311), (slice(None, None, None), 312), (slice(None, None, None), 313), (slice(None, None, None), 314), (slice(None, None, None), 315), (slice(None, None, None), 316), (slice(None, None, None), 317), (slice(None, None, None), 318), (slice(None, None, None), 319), (slice(None, None, None), 320), (slice(None, None, None), 321), (slice(None, None, None), 322), (slice(None, None, None), 323), (slice(None, None, None), 324), (slice(None, None, None), 325), (slice(None, None, None), 326), (slice(None, None, None), 327), (slice(None, None, None), 328), (slice(None, None, None), 329), (slice(None, None, None), 330), (slice(None, None, None), 331), (slice(None, None, None), 332), (slice(None, None, None), 333), (slice(None, None, None), 334), (slice(None, None, None), 335), (slice(None, None, None), 336), (slice(None, None, None), 337), (slice(None, None, None), 338), (slice(None, None, None), 339), (slice(None, None, None), 340), (slice(None, None, None), 341), (slice(None, None, None), 342), (slice(None, None, None), 343), (slice(None, None, None), 344), (slice(None, None, None), 345), (slice(None, None, None), 346)]], {}, 339],
['where', 'torch', ['torch.cuda.BoolTensor', 'torch.cuda.LongTensor', 'torch.cuda.LongTensor'], [[(5,)], [(5,)], [(5,)]], {}, 1],
['setitem', 'torch.Tensor', ['torch.cuda.LongTensor', 'torch.cuda.LongTensor'], [[(5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347), (5, 347)], [(slice(None, None, None), 8), (slice(None, None, None), 9), (slice(None, None, None), 10), (slice(None, None, None), 11), (slice(None, None, None), 12), (slice(None, None, None), 13), (slice(None, None, None), 14), (slice(None, None, None), 15), (slice(None, None, None), 16), (slice(None, None, None), 17), (slice(None, None, None), 18), (slice(None, None, None), 19), (slice(None, None, None), 20), (slice(None, None, None), 21), (slice(None, None, None), 22), (slice(None, None, None), 23), (slice(None, None, None), 24), (slice(None, None, None), 25), (slice(None, None, None), 26), (slice(None, None, None), 27), (slice(None, None, None), 28), (slice(None, None, None), 29), (slice(None, None, None), 30), (slice(None, None, None), 31), (slice(None, None, None), 32), (slice(None, None, None), 33), (slice(None, None, None), 34), (slice(None, None, None), 35), (slice(None, None, None), 36), (slice(None, None, None), 37), (slice(None, None, None), 38), (slice(None, None, None), 39), (slice(None, None, None), 40), (slice(None, None, None), 41), (slice(None, None, None), 42), (slice(None, None, None), 43), (slice(None, None, None), 44), (slice(None, None, None), 45), (slice(None, None, None), 46), (slice(None, None, None), 47), (slice(None, None, None), 48), (slice(None, None, None), 49), (slice(None, None, None), 50), (slice(None, None, None), 51), (slice(None, None, None), 52), (slice(None, None, None), 53), (slice(None, None, None), 54), (slice(None, None, None), 55), (slice(None, None, None), 56), (slice(None, None, None), 57), (slice(None, None, None), 58), (slice(None, None, None), 59), (slice(None, None, None), 60), (slice(None, None, None), 61), (slice(None, None, None), 62), (slice(None, None, None), 63), (slice(None, None, None), 64), (slice(None, None, None), 65), (slice(None, None, None), 66), (slice(None, None, None), 67), (slice(None, None, None), 68), (slice(None, None, None), 69), (slice(None, None, None), 70), (slice(None, None, None), 71), (slice(None, None, None), 72), (slice(None, None, None), 73), (slice(None, None, None), 74), (slice(None, None, None), 75), (slice(None, None, None), 76), (slice(None, None, None), 77), (slice(None, None, None), 78), (slice(None, None, None), 79), (slice(None, None, None), 80), (slice(None, None, None), 81), (slice(None, None, None), 82), (slice(None, None, None), 83), (slice(None, None, None), 84), (slice(None, None, None), 85), (slice(None, None, None), 86), (slice(None, None, None), 87), (slice(None, None, None), 88), (slice(None, None, None), 89), (slice(None, None, None), 90), (slice(None, None, None), 91), (slice(None, None, None), 92), (slice(None, None, None), 93), (slice(None, None, None), 94), (slice(None, None, None), 95), (slice(None, None, None), 96), (slice(None, None, None), 97), (slice(None, None, None), 98), (slice(None, None, None), 99), (slice(None, None, None), 100), (slice(None, None, None), 101), (slice(None, None, None), 102), (slice(None, None, None), 103), (slice(None, None, None), 104), (slice(None, None, None), 105), (slice(None, None, None), 106), (slice(None, None, None), 107), (slice(None, None, None), 108), (slice(None, None, None), 109), (slice(None, None, None), 110), (slice(None, None, None), 111), (slice(None, None, None), 112), (slice(None, None, None), 113), (slice(None, None, None), 114), (slice(None, None, None), 115), (slice(None, None, None), 116), (slice(None, None, None), 117), (slice(None, None, None), 118), (slice(None, None, None), 119), (slice(None, None, None), 120), (slice(None, None, None), 121), (slice(None, None, None), 122), (slice(None, None, None), 123), (slice(None, None, None), 124), (slice(None, None, None), 125), (slice(None, None, None), 126), (slice(None, None, None), 127), (slice(None, None, None), 128), (slice(None, None, None), 129), (slice(None, None, None), 130), (slice(None, None, None), 131), (slice(None, None, None), 132), (slice(None, None, None), 133), (slice(None, None, None), 134), (slice(None, None, None), 135), (slice(None, None, None), 136), (slice(None, None, None), 137), (slice(None, None, None), 138), (slice(None, None, None), 139), (slice(None, None, None), 140), (slice(None, None, None), 141), (slice(None, None, None), 142), (slice(None, None, None), 143), (slice(None, None, None), 144), (slice(None, None, None), 145), (slice(None, None, None), 146), (slice(None, None, None), 147), (slice(None, None, None), 148), (slice(None, None, None), 149), (slice(None, None, None), 150), (slice(None, None, None), 151), (slice(None, None, None), 152), (slice(None, None, None), 153), (slice(None, None, None), 154), (slice(None, None, None), 155), (slice(None, None, None), 156), (slice(None, None, None), 157), (slice(None, None, None), 158), (slice(None, None, None), 159), (slice(None, None, None), 160), (slice(None, None, None), 161), (slice(None, None, None), 162), (slice(None, None, None), 163), (slice(None, None, None), 164), (slice(None, None, None), 165), (slice(None, None, None), 166), (slice(None, None, None), 167), (slice(None, None, None), 168), (slice(None, None, None), 169), (slice(None, None, None), 170), (slice(None, None, None), 171), (slice(None, None, None), 172), (slice(None, None, None), 173), (slice(None, None, None), 174), (slice(None, None, None), 175), (slice(None, None, None), 176), (slice(None, None, None), 177), (slice(None, None, None), 178), (slice(None, None, None), 179), (slice(None, None, None), 180), (slice(None, None, None), 181), (slice(None, None, None), 182), (slice(None, None, None), 183), (slice(None, None, None), 184), (slice(None, None, None), 185), (slice(None, None, None), 186), (slice(None, None, None), 187), (slice(None, None, None), 188), (slice(None, None, None), 189), (slice(None, None, None), 190), (slice(None, None, None), 191), (slice(None, None, None), 192), (slice(None, None, None), 193), (slice(None, None, None), 194), (slice(None, None, None), 195), (slice(None, None, None), 196), (slice(None, None, None), 197), (slice(None, None, None), 198), (slice(None, None, None), 199), (slice(None, None, None), 200), (slice(None, None, None), 201), (slice(None, None, None), 202), (slice(None, None, None), 203), (slice(None, None, None), 204), (slice(None, None, None), 205), (slice(None, None, None), 206), (slice(None, None, None), 207), (slice(None, None, None), 208), (slice(None, None, None), 209), (slice(None, None, None), 210), (slice(None, None, None), 211), (slice(None, None, None), 212), (slice(None, None, None), 213), (slice(None, None, None), 214), (slice(None, None, None), 215), (slice(None, None, None), 216), (slice(None, None, None), 217), (slice(None, None, None), 218), (slice(None, None, None), 219), (slice(None, None, None), 220), (slice(None, None, None), 221), (slice(None, None, None), 222), (slice(None, None, None), 223), (slice(None, None, None), 224), (slice(None, None, None), 225), (slice(None, None, None), 226), (slice(None, None, None), 227), (slice(None, None, None), 228), (slice(None, None, None), 229), (slice(None, None, None), 230), (slice(None, None, None), 231), (slice(None, None, None), 232), (slice(None, None, None), 233), (slice(None, None, None), 234), (slice(None, None, None), 235), (slice(None, None, None), 236), (slice(None, None, None), 237), (slice(None, None, None), 238), (slice(None, None, None), 239), (slice(None, None, None), 240), (slice(None, None, None), 241), (slice(None, None, None), 242), (slice(None, None, None), 243), (slice(None, None, None), 244), (slice(None, None, None), 245), (slice(None, None, None), 246), (slice(None, None, None), 247), (slice(None, None, None), 248), (slice(None, None, None), 249), (slice(None, None, None), 250), (slice(None, None, None), 251), (slice(None, None, None), 252), (slice(None, None, None), 253), (slice(None, None, None), 254), (slice(None, None, None), 255), (slice(None, None, None), 256), (slice(None, None, None), 257), (slice(None, None, None), 258), (slice(None, None, None), 259), (slice(None, None, None), 260), (slice(None, None, None), 261), (slice(None, None, None), 262), (slice(None, None, None), 263), (slice(None, None, None), 264), (slice(None, None, None), 265), (slice(None, None, None), 266), (slice(None, None, None), 267), (slice(None, None, None), 268), (slice(None, None, None), 269), (slice(None, None, None), 270), (slice(None, None, None), 271), (slice(None, None, None), 272), (slice(None, None, None), 273), (slice(None, None, None), 274), (slice(None, None, None), 275), (slice(None, None, None), 276), (slice(None, None, None), 277), (slice(None, None, None), 278), (slice(None, None, None), 279), (slice(None, None, None), 280), (slice(None, None, None), 281), (slice(None, None, None), 282), (slice(None, None, None), 283), (slice(None, None, None), 284), (slice(None, None, None), 285), (slice(None, None, None), 286), (slice(None, None, None), 287), (slice(None, None, None), 288), (slice(None, None, None), 289), (slice(None, None, None), 290), (slice(None, None, None), 291), (slice(None, None, None), 292), (slice(None, None, None), 293), (slice(None, None, None), 294), (slice(None, None, None), 295), (slice(None, None, None), 296), (slice(None, None, None), 297), (slice(None, None, None), 298), (slice(None, None, None), 299), (slice(None, None, None), 300), (slice(None, None, None), 301), (slice(None, None, None), 302), (slice(None, None, None), 303), (slice(None, None, None), 304), (slice(None, None, None), 305), (slice(None, None, None), 306), (slice(None, None, None), 307), (slice(None, None, None), 308), (slice(None, None, None), 309), (slice(None, None, None), 310), (slice(None, None, None), 311), (slice(None, None, None), 312), (slice(None, None, None), 313), (slice(None, None, None), 314), (slice(None, None, None), 315), (slice(None, None, None), 316), (slice(None, None, None), 317), (slice(None, None, None), 318), (slice(None, None, None), 319), (slice(None, None, None), 320), (slice(None, None, None), 321), (slice(None, None, None), 322), (slice(None, None, None), 323), (slice(None, None, None), 324), (slice(None, None, None), 325), (slice(None, None, None), 326), (slice(None, None, None), 327), (slice(None, None, None), 328), (slice(None, None, None), 329), (slice(None, None, None), 330), (slice(None, None, None), 331), (slice(None, None, None), 332), (slice(None, None, None), 333), (slice(None, None, None), 334), (slice(None, None, None), 335), (slice(None, None, None), 336), (slice(None, None, None), 337), (slice(None, None, None), 338), (slice(None, None, None), 339), (slice(None, None, None), 340), (slice(None, None, None), 341), (slice(None, None, None), 342), (slice(None, None, None), 343), (slice(None, None, None), 344), (slice(None, None, None), 345), (slice(None, None, None{}, 339],
]
