from ...config import Genfunc
from ...diopi_runtime import Dtype

efficientnet_config = {
    'linspace': dict(
        name=["linspace"],
        interface=["torch"],
        para=dict(
            start=[0],
            end=[0.0],
            steps=[23],
        ),
    ),

    'randperm': dict(
        name=["randperm"],
        no_output_ref=True,
        para=dict(
            n=[1281167],
        ),
    ),

    'pad': dict(
        name=["pad"],
        para=dict(
            pad=[[0, 1, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 1, 1], [2, 2, 2, 2], [2, 2, 2, 2], [1, 1, 1, 1], [1, 1, 1, 1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2], [1, 1, 1, 1], [1, 1, 1, 1]],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 260, 260), (32, 32, 130, 130), (32, 16, 130, 130), (32, 96, 130, 130), (32, 144, 65, 65), (32, 144, 65, 65), (32, 288, 33, 33), (32, 288, 33, 33), (32, 528, 17, 17), (32, 528, 17, 17), (32, 720, 17, 17), (32, 1248, 9, 9), (32, 1248, 9, 9), (32, 2112, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d': dict(
        name=["conv2d"],
        atol=1e-03,
        rtol=1e-03,
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 32, 1, 16, 1, 1, 96, 1, 1, 144, 1, 144, 1, 1, 288, 1, 288, 1, 1, 528, 1, 528, 1, 1, 720, 1, 720, 1, 1, 1248, 1, 1248, 1, 1, 2112, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 3, 261, 261), (32, 32, 132, 132), (32, 32, 130, 130), (32, 16, 132, 132), (32, 16, 130, 130), (32, 16, 130, 130), (32, 96, 131, 131), (32, 96, 65, 65), (32, 24, 65, 65), (32, 144, 67, 67), (32, 144, 65, 65), (32, 144, 69, 69), (32, 144, 33, 33), (32, 48, 33, 33), (32, 288, 37, 37), (32, 288, 33, 33), (32, 288, 35, 35), (32, 288, 17, 17), (32, 88, 17, 17), (32, 528, 19, 19), (32, 528, 17, 17), (32, 528, 21, 21), (32, 528, 17, 17), (32, 120, 17, 17), (32, 720, 21, 21), (32, 720, 17, 17), (32, 720, 21, 21), (32, 720, 9, 9), (32, 208, 9, 9), (32, 1248, 13, 13), (32, 1248, 9, 9), (32, 1248, 11, 11), (32, 1248, 9, 9), (32, 352, 9, 9), (32, 2112, 11, 11), (32, 2112, 9, 9), (32, 352, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32, 3, 3, 3), (32, 1, 3, 3), (16, 32, 1, 1), (16, 1, 3, 3), (16, 16, 1, 1), (96, 16, 1, 1), (96, 1, 3, 3), (24, 96, 1, 1), (144, 24, 1, 1), (144, 1, 3, 3), (24, 144, 1, 1), (144, 1, 5, 5), (48, 144, 1, 1), (288, 48, 1, 1), (288, 1, 5, 5), (48, 288, 1, 1), (288, 1, 3, 3), (88, 288, 1, 1), (528, 88, 1, 1), (528, 1, 3, 3), (88, 528, 1, 1), (528, 1, 5, 5), (120, 528, 1, 1), (720, 120, 1, 1), (720, 1, 5, 5), (120, 720, 1, 1), (720, 1, 5, 5), (208, 720, 1, 1), (1248, 208, 1, 1), (1248, 1, 5, 5), (208, 1248, 1, 1), (1248, 1, 3, 3), (352, 1248, 1, 1), (2112, 352, 1, 1), (2112, 1, 3, 3), (352, 2112, 1, 1), (1408, 352, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        atol=1e-03,
        rtol=1e-04,
        atol_half=1e-01,
        rtol_half=1e-02,
        para=dict(
            training=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 32, 130, 130), (32, 16, 130, 130), (32, 96, 130, 130), (32, 96, 65, 65), (32, 24, 65, 65), (32, 144, 65, 65), (32, 144, 33, 33), (32, 48, 33, 33), (32, 288, 33, 33), (32, 288, 17, 17), (32, 88, 17, 17), (32, 528, 17, 17), (32, 120, 17, 17), (32, 720, 17, 17), (32, 720, 9, 9), (32, 208, 9, 9), (32, 1248, 9, 9), (32, 352, 9, 9), (32, 2112, 9, 9), (32, 1408, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (48,), (288,), (288,), (88,), (528,), (120,), (720,), (720,), (208,), (1248,), (352,), (2112,), (1408,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (48,), (288,), (288,), (88,), (528,), (120,), (720,), (720,), (208,), (1248,), (352,), (2112,), (1408,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.positive,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (48,), (288,), (288,), (88,), (528,), (120,), (720,), (720,), (208,), (1248,), (352,), (2112,), (1408,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(32,), (16,), (96,), (96,), (24,), (144,), (144,), (48,), (288,), (288,), (88,), (528,), (120,), (720,), (720,), (208,), (1248,), (352,), (2112,), (1408,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        interface=["torch"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 32, 130, 130), (32, 8, 1, 1), (32, 32, 1, 1), (32, 16, 130, 130), (32, 4, 1, 1), (32, 16, 1, 1), (32, 96, 130, 130), (32, 96, 65, 65), (32, 96, 1, 1), (32, 144, 65, 65), (32, 6, 1, 1), (32, 144, 1, 1), (32, 144, 33, 33), (32, 288, 33, 33), (32, 12, 1, 1), (32, 288, 1, 1), (32, 288, 17, 17), (32, 528, 17, 17), (32, 22, 1, 1), (32, 528, 1, 1), (32, 720, 17, 17), (32, 30, 1, 1), (32, 720, 1, 1), (32, 720, 9, 9), (32, 1248, 9, 9), (32, 52, 1, 1), (32, 1248, 1, 1), (32, 2112, 9, 9), (32, 88, 1, 1), (32, 2112, 1, 1), (32, 1408, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 32, 130, 130), (32, 8, 1, 1), (32, 32, 130, 130), (32, 16, 130, 130), (32, 4, 1, 1), (32, 16, 130, 130), (32, 96, 130, 130), (32, 96, 65, 65), (32, 96, 65, 65), (32, 144, 65, 65), (32, 6, 1, 1), (32, 144, 65, 65), (32, 144, 33, 33), (32, 144, 33, 33), (32, 288, 33, 33), (32, 12, 1, 1), (32, 288, 33, 33), (32, 288, 17, 17), (32, 288, 17, 17), (32, 528, 17, 17), (32, 22, 1, 1), (32, 528, 17, 17), (32, 720, 17, 17), (32, 30, 1, 1), (32, 720, 17, 17), (32, 720, 9, 9), (32, 720, 9, 9), (32, 1248, 9, 9), (32, 52, 1, 1), (32, 1248, 9, 9), (32, 2112, 9, 9), (32, 88, 1, 1), (32, 2112, 9, 9), (32, 1408, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(32, 32, 130, 130), (32, 8, 1, 1), (32, 32, 1, 1), (32, 16, 130, 130), (32, 4, 1, 1), (32, 16, 1, 1), (32, 96, 130, 130), (32, 96, 65, 65), (32, 96, 1, 1), (32, 144, 65, 65), (32, 6, 1, 1), (32, 144, 1, 1), (32, 144, 33, 33), (32, 144, 1, 1), (32, 288, 33, 33), (32, 12, 1, 1), (32, 288, 1, 1), (32, 288, 17, 17), (32, 288, 1, 1), (32, 528, 17, 17), (32, 22, 1, 1), (32, 528, 1, 1), (32, 720, 17, 17), (32, 30, 1, 1), (32, 720, 1, 1), (32, 720, 9, 9), (32, 720, 1, 1), (32, 1248, 9, 9), (32, 52, 1, 1), (32, 1248, 1, 1), (32, 2112, 9, 9), (32, 88, 1, 1), (32, 2112, 1, 1), (32, 1408, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'adaptive_avg_pool2d': dict(
        name=["adaptive_avg_pool2d"],
        para=dict(
            output_size=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (1, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 32, 130, 130), (32, 16, 130, 130), (32, 96, 65, 65), (32, 144, 65, 65), (32, 144, 33, 33), (32, 288, 33, 33), (32, 288, 17, 17), (32, 528, 17, 17), (32, 720, 17, 17), (32, 720, 9, 9), (32, 1248, 9, 9), (32, 2112, 9, 9), (32, 1408, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        atol=1e-03,
        rtol=1e-03,
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 32, 1, 1), (32, 8, 1, 1), (32, 16, 1, 1), (32, 4, 1, 1), (32, 96, 1, 1), (32, 4, 1, 1), (32, 144, 1, 1), (32, 6, 1, 1), (32, 288, 1, 1), (32, 12, 1, 1), (32, 528, 1, 1), (32, 22, 1, 1), (32, 720, 1, 1), (32, 30, 1, 1), (32, 1248, 1, 1), (32, 52, 1, 1), (32, 2112, 1, 1), (32, 88, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(8, 32, 1, 1), (32, 8, 1, 1), (4, 16, 1, 1), (16, 4, 1, 1), (4, 96, 1, 1), (96, 4, 1, 1), (6, 144, 1, 1), (144, 6, 1, 1), (12, 288, 1, 1), (288, 12, 1, 1), (22, 528, 1, 1), (528, 22, 1, 1), (30, 720, 1, 1), (720, 30, 1, 1), (52, 1248, 1, 1), (1248, 52, 1, 1), (88, 2112, 1, 1), (2112, 88, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(8,), (32,), (4,), (16,), (4,), (96,), (6,), (144,), (12,), (288,), (22,), (528,), (30,), (720,), (52,), (1248,), (88,), (2112,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 16, 130, 130), (32, 24, 65, 65), (32, 48, 33, 33), (32, 88, 17, 17), (32, 120, 17, 17), (32, 208, 9, 9), (32, 352, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(32, 16, 130, 130), (32, 24, 65, 65), (32, 48, 33, 33), (32, 88, 17, 17), (32, 120, 17, 17), (32, 208, 9, 9), (32, 352, 9, 9)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'linear': dict(
        name=["linear"],
        atol=1e-03,
        rtol=1e-04,
        atol_half=1e-01,
        rtol_half=1e-02,
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 1408)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(1000, 1408)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cross_entropy': dict(
        name=["cross_entropy"],
        para=dict(
            reduction=['none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 1000)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(32,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[32],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(79)],
            lr=[0.1 for i in range(79)],
            momentum=[0.9 for i in range(79)],
            weight_decay=[0.0001 for i in range(79)],
            dampening=[0 for i in range(79)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": [(32, 3, 3, 3), (32,), (32, 1, 3, 3), (8, 32, 1, 1), (8,), (32, 8, 1, 1), (16, 32, 1, 1), (16,), (16, 1, 3, 3), (4, 16, 1, 1), (4,), (16, 4, 1, 1), (16, 16, 1, 1), (96, 16, 1, 1), (96,), (96, 1, 3, 3), (4, 96, 1, 1), (96, 4, 1, 1), (24, 96, 1, 1), (24,), (144, 24, 1, 1), (144,), (144, 1, 3, 3), (6, 144, 1, 1), (6,), (144, 6, 1, 1), (24, 144, 1, 1), (144, 1, 5, 5), (48, 144, 1, 1), (48,), (288, 48, 1, 1), (288,), (288, 1, 5, 5), (12, 288, 1, 1), (12,), (288, 12, 1, 1), (48, 288, 1, 1), (288, 1, 3, 3), (88, 288, 1, 1), (88,), (528, 88, 1, 1), (528,), (528, 1, 3, 3), (22, 528, 1, 1), (22,), (528, 22, 1, 1), (88, 528, 1, 1), (528, 1, 5, 5), (120, 528, 1, 1), (120,), (720, 120, 1, 1), (720,), (720, 1, 5, 5), (30, 720, 1, 1), (30,), (720, 30, 1, 1), (120, 720, 1, 1), (208, 720, 1, 1), (208,), (1248, 208, 1, 1), (1248,), (1248, 1, 5, 5), (52, 1248, 1, 1), (52,), (1248, 52, 1, 1), (208, 1248, 1, 1), (1248, 1, 3, 3), (352, 1248, 1, 1), (352,), (2112, 352, 1, 1), (2112,), (2112, 1, 3, 3), (88, 2112, 1, 1), (2112, 88, 1, 1), (352, 2112, 1, 1), (1408, 352, 1, 1), (1408,), (1000, 1408), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": [(32, 3, 3, 3), (32,), (32, 1, 3, 3), (8, 32, 1, 1), (8,), (32, 8, 1, 1), (16, 32, 1, 1), (16,), (16, 1, 3, 3), (4, 16, 1, 1), (4,), (16, 4, 1, 1), (16, 16, 1, 1), (96, 16, 1, 1), (96,), (96, 1, 3, 3), (4, 96, 1, 1), (96, 4, 1, 1), (24, 96, 1, 1), (24,), (144, 24, 1, 1), (144,), (144, 1, 3, 3), (6, 144, 1, 1), (6,), (144, 6, 1, 1), (24, 144, 1, 1), (144, 1, 5, 5), (48, 144, 1, 1), (48,), (288, 48, 1, 1), (288,), (288, 1, 5, 5), (12, 288, 1, 1), (12,), (288, 12, 1, 1), (48, 288, 1, 1), (288, 1, 3, 3), (88, 288, 1, 1), (88,), (528, 88, 1, 1), (528,), (528, 1, 3, 3), (22, 528, 1, 1), (22,), (528, 22, 1, 1), (88, 528, 1, 1), (528, 1, 5, 5), (120, 528, 1, 1), (120,), (720, 120, 1, 1), (720,), (720, 1, 5, 5), (30, 720, 1, 1), (30,), (720, 30, 1, 1), (120, 720, 1, 1), (208, 720, 1, 1), (208,), (1248, 208, 1, 1), (1248,), (1248, 1, 5, 5), (52, 1248, 1, 1), (52,), (1248, 52, 1, 1), (208, 1248, 1, 1), (1248, 1, 3, 3), (352, 1248, 1, 1), (352,), (2112, 352, 1, 1), (2112,), (2112, 1, 3, 3), (88, 2112, 1, 1), (2112, 88, 1, 1), (352, 2112, 1, 1), (1408, 352, 1, 1), (1408,), (1000, 1408), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'softmax': dict(
        name=["softmax"],
        saved_args=dict(output=0),
        para=dict(
            dim=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 1000), (16, 1000)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
