import numpy as np

densenet_config = {
    'adaptive_avg_pool2d': dict(
        name=["adaptive_avg_pool2d"],
        interface=["torch.nn.functional"],
        para=dict(
            output_size=[(1, 1), (1, 1), (1, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(128, 1024, 7, 7), (64, 1024, 7, 7), (16, 1024, 7, 7)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch"],
        para=dict(
            alpha=[0.0001, 0.0001, 0.0001, 0.0001, 0.0001],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(640,), (832,), (128, 832, 1, 1), (128, 608, 1, 1), (1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["other"],
                    "shape": [(640,), (832,), (128, 832, 1, 1), (128, 608, 1, 1), (1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'add_case_2': dict(
        name=["add"],
        interface=["torch"],
        is_inplace=[True],
        para=dict(
            alpha=[1, 1, 1, -0.1, -0.1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(128, 512, 7, 7), (128, 256, 14, 14), (704,), (288,), (1000, 1024), (1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["other"],
                    "shape": [(128, 512, 7, 7), (128, 256, 14, 14), (704,), (288,), (1000, 1024), (1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'add_case_3': dict(
        name=["add"],
        interface=["torch"],
        is_inplace=[True],
        para=dict(
            other=[1],
            alpha=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [np.int64],
                    "gen_fn": "Genfunc.randint",
                },
            ],
        ),
    ),

    'add_case_4': dict(
        name=["add"],
        interface=["torch"],
        para=dict(
            other=[0],
            alpha=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'argmax': dict(
        name=["argmax"],
        interface=["torch"],
        para=dict(
            dim=[1, 1],
            keepdim=[True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [False],
                    "shape": [(64, 1000), (16, 1000)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        atol=1e-01,
        rtol=1e-02,
        atol_half=1e-01,
        rtol_half=1e-02,
        interface=["torch.nn.functional"],
        para=dict(
            training=[False, False],
            momentum=[0.1, 0.1],
            eps=[1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [False],
                    "shape": [(64, 160, 56, 56), (16, 416, 14, 14)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(160,), (416,)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(160,), (416,)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["running_mean"],
                    "requires_grad": [False],
                    "shape": [(160,), (416,)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["running_var"],
                    "requires_grad": [False],
                    "shape": [(160,), (416,)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.positive",
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [[(64, 256, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14)], [(64, 512, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7)], [(128, 256, 14, 14), (128, 32, 14, 14)], [(64, 512, 7, 7), (64, 32, 7, 7)], [(64, 512, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7)], [(16, 128, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28)], [(16, 128, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28)], [(128, 128, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(64, 512, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7)], [(64, 256, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(128, 128, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28)], [(128, 512, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7)], [(128, 512, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7)], [(64, 512, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7)], [(16, 128, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28)], [(128, 512, 7, 7), (128, 32, 7, 7), (128, 32, 7, 7)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(16, 512, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7)], [(1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(64, 256, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14)], [(128, 128, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(64, 256, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(16, 128, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28), (16, 32, 28, 28)], [(16, 512, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7)], [(128, 64, 56, 56)], [(64, 256, 14, 14)], [(16, 512, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7)], [(64, 512, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7)], [(64, 256, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14)], [(64, 512, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7)], [(64, 512, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7)], [(16, 256, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14)], [(64, 512, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7), (64, 32, 7, 7)], [(128, 128, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28), (128, 32, 28, 28)], [(16, 256, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(16, 512, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7), (16, 32, 7, 7)], [(64, 256, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(16, 256, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14)], [(1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(16, 256, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14)], [(16, 256, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14), (16, 32, 14, 14)], [(64, 256, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14)], [(9408,), (64,), (64,), (64,), (64,), (8192,), (128,), (128,), (36864,), (96,), (96,), (12288,), (128,), (128,), (36864,), (128,), (128,), (16384,), (128,), (128,), (36864,), (160,), (160,), (20480,), (128,), (128,), (36864,), (192,), (192,), (24576,), (128,), (128,), (36864,), (224,), (224,), (28672,), (128,), (128,), (36864,), (128,), (128,), (16384,), (128,), (128,), (36864,), (160,), (160,), (20480,), (128,), (128,), (36864,), (192,), (192,), (24576,), (128,), (128,), (36864,), (224,), (224,), (28672,), (128,), (128,), (36864,), (256,), (256,), (32768,), (128,), (128,), (36864,), (288,), (288,), (36864,), (128,), (128,), (36864,), (320,), (320,), (40960,), (128,), (128,), (36864,), (352,), (352,), (45056,), (128,), (128,), (36864,), (384,), (384,), (49152,), (128,), (128,), (36864,), (416,), (416,), (53248,), (128,), (128,), (36864,), (448,), (448,), (57344,), (128,), (128,), (36864,), (480,), (480,), (61440,), (128,), (128,), (36864,), (256,), (256,), (32768,), (128,), (128,), (36864,), (288,), (288,), (36864,), (128,), (128,), (36864,), (320,), (320,), (40960,), (128,), (128,), (36864,), (352,), (352,), (45056,), (128,), (128,), (36864,), (384,), (384,), (49152,), (128,), (128,), (36864,), (416,), (416,), (53248,), (128,), (128,), (36864,), (448,), (448,), (57344,), (128,), (128,), (36864,), (480,), (480,), (61440,), (128,), (128,), (36864,), (512,), (512,), (65536,), (128,), (128,), (36864,), (544,), (544,), (69632,), (128,), (128,), (36864,), (576,), (576,), (73728,), (128,), (128,), (36864,), (608,), (608,), (77824,), (128,), (128,), (36864,), (640,), (640,), (81920,), (128,), (128,), (36864,), (672,), (672,), (86016,), (128,), (128,), (36864,), (704,), (704,), (90112,), (128,), (128,), (36864,), (736,), (736,), (94208,), (128,), (128,), (36864,), (768,), (768,), (98304,), (128,), (128,), (36864,), (800,), (800,), (102400,), (128,), (128,), (36864,), (832,), (832,), (106496,), (128,), (128,), (36864,), (864,), (864,), (110592,), (128,), (128,), (36864,), (896,), (896,), (114688,), (128,), (128,), (36864,), (928,), (928,), (118784,), (128,), (128,), (36864,), (960,), (960,), (122880,), (128,), (128,), (36864,), (992,), (992,), (126976,), (128,), (128,), (36864,), (512,), (512,), (65536,), (128,), (128,), (36864,), (544,), (544,), (69632,), (128,), (128,), (36864,), (576,), (576,), (73728,), (128,), (128,), (36864,), (608,), (608,), (77824,), (128,), (128,), (36864,), (640,), (640,), (81920,), (128,), (128,), (36864,), (672,), (672,), (86016,), (128,), (128,), (36864,), (704,), (704,), (90112,), (128,), (128,), (36864,), (736,), (736,), (94208,), (128,), (128,), (36864,), (768,), (768,), (98304,), (128,), (128,), (36864,), (800,), (800,), (102400,), (128,), (128,), (36864,), (832,), (832,), (106496,), (128,), (128,), (36864,), (864,), (864,), (110592,), (128,), (128,), (36864,), (896,), (896,), (114688,), (128,), (128,), (36864,), (928,), (928,), (118784,), (128,), (128,), (36864,), (960,), (960,), (122880,), (128,), (128,), (36864,), (992,), (992,), (126976,), (128,), (128,), (36864,), (256,), (256,), (32768,), (512,), (512,), (131072,), (1024,), (1024,), (524288,), (1024,), (1024,), (1024000,), (1000,), (3,), (3,), (64,), (64,), (64,), (64,), (128,), (128,), (96,), (96,), (128,), (128,), (128,), (128,), (128,), (128,), (160,), (160,), (128,), (128,), (192,), (192,), (128,), (128,), (224,), (224,), (128,), (128,), (128,), (128,), (128,), (128,), (160,), (160,), (128,), (128,), (192,), (192,), (128,), (128,), (224,), (224,), (128,), (128,), (256,), (256,), (128,), (128,), (288,), (288,), (128,), (128,), (320,), (320,), (128,), (128,), (352,), (352,), (128,), (128,), (384,), (384,), (128,), (128,), (416,), (416,), (128,), (128,), (448,), (448,), (128,), (128,), (480,), (480,), (128,), (128,), (256,), (256,), (128,), (128,), (288,), (288,), (128,), (128,), (320,), (320,), (128,), (128,), (352,), (352,), (128,), (128,), (384,), (384,), (128,), (128,), (416,), (416,), (128,), (128,), (448,), (448,), (128,), (128,), (480,), (480,), (128,), (128,), (512,), (512,), (128,), (128,), (544,), (544,), (128,), (128,), (576,), (576,), (128,), (128,), (608,), (608,), (128,), (128,), (640,), (640,), (128,), (128,), (672,), (672,), (128,), (128,), (704,), (704,), (128,), (128,), (736,), (736,), (128,), (128,), (768,), (768,), (128,), (128,), (800,), (800,), (128,), (128,), (832,), (832,), (128,), (128,), (864,), (864,), (128,), (128,), (896,), (896,), (128,), (128,), (928,), (928,), (128,), (128,), (960,), (960,), (128,), (128,), (992,), (992,), (128,), (128,), (512,), (512,), (128,), (128,), (544,), (544,), (128,), (128,), (576,), (576,), (128,), (128,), (608,), (608,), (128,), (128,), (640,), (640,), (128,), (128,), (672,), (672,), (128,), (128,), (704,), (704,), (128,), (128,), (736,), (736,), (128,), (128,), (768,), (768,), (128,), (128,), (800,), (800,), (128,), (128,), (832,), (832,), (128,), (128,), (864,), (864,), (128,), (128,), (896,), (896,), (128,), (128,), (928,), (928,), (128,), (128,), (960,), (960,), (128,), (128,), (992,), (992,), (128,), (128,), (256,), (256,), (512,), (512,), (1024,), (1024,), (1024,), (1024,)], [(128, 256, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14), (128, 32, 14, 14)], [(64, 256, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14), (64, 32, 14, 14)]],
                    "dtype": [np.int64],
                    "gen_fn": "Genfunc.randint",
                    "gen_policy": "gen_tensor_list_diff_shape",
                },
            ],
        ),
    ),

    'conv2d': dict(
        name=["conv2d"],
        atol=1e-03,
        rtol=1e-03,
        interface=["torch.nn.functional"],
        para=dict(
            stride=[(1, 1), (1, 1)],
            padding=[(0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1)],
            groups=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [False],
                    "shape": [(64, 1024, 14, 14), (64, 288, 14, 14)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(512, 1024, 1, 1), (128, 288, 1, 1)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [False],
                    "shape": [None, None],
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(128, 3, 224, 224), (64, 3, 224, 224), (16, 3, 224, 224)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["other"],
                    "shape": [(3, 1, 1), (3, 1, 1), (3, 1, 1)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'div_case_2': dict(
        name=["div"],
        interface=["torch"],
        para=dict(
            other=[1, 128, 1, 128, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), ()],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'fill_': dict(
        name=["fill_"],
        interface=["torch.Tensor"],
        para=dict(
            value=[1, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (1000,)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'flip': dict(
        name=["flip"],
        interface=["torch"],
        para=dict(
            dims=[(1,), (1,), (1,)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(128, 3, 224, 224), (64, 3, 224, 224), (16, 3, 224, 224)],
                    "dtype": [np.uint8],
                    "gen_fn": "Genfunc.randint",
                },
            ],
        ),
    ),

    'linear': dict(
        name=["linear"],
        atol=1e-03,
        rtol=1e-04,
        atol_half=1e-01,
        rtol_half=1e-02,
        interface=["torch.nn.functional"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(128, 1024), (64, 1024), (16, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(1000, 1024), (1000, 1024), (1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(1000,), (1000,), (1000,)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'log_softmax': dict(
        name=["log_softmax"],
        interface=["torch.nn.functional"],
        saved_args=dict(output=0),
        para=dict(
            dim=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(128, 1000)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        interface=["torch.nn.functional"],
        requires_backward=[0],
        para=dict(
            kernel_size=[(3, 3), (3, 3), (3, 3)],
            stride=[(2, 2), (2, 2), (2, 2)],
            padding=[(1, 1), (1, 1), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1)],
            ceil_mode=[False, False, False],
            return_indices=[True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(128, 64, 112, 112), (64, 64, 112, 112), (16, 64, 112, 112)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch"],
        para=dict(
            dim=[None, None, None, None, None, None],
            keepdim=[False, False, False, False, False, False],
            dtype=[None, None, None, None, None, None],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(192,), (960,), (128, 64, 1, 1), (64, 3, 7, 7), (), (1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch"],
        is_inplace=[True],
        para=dict(
            other=[0.9, 0.9, 0.9, 0.9, 0.9],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(128, 864, 1, 1), (128, 544, 1, 1), (896,), (64,), (1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'mul_case_2': dict(
        name=["mul"],
        interface=["torch"],
        para=dict(
            other=[1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(320,), (736,), (128, 672, 1, 1), (128, 256, 1, 1), (), (), (1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'nll_loss': dict(
        name=["nll_loss"],
        interface=["torch.nn.functional"],
        para=dict(
            weight=[None],
            reduction=['none'],
            ignore_index=[-100],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(128, 1000)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["target"],
                    "requires_grad": [False],
                    "shape": [(128,)],
                    "dtype": [np.int64],
                    "gen_fn": "Genfunc.randint",
                },
            ],
        ),
    ),

    'normal_': dict(
        name=["normal_"],
        no_output_ref=True,
        interface=["torch.nn.functional"],
        para=dict(
            mean=[0],
            std=[0.01],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1000, 1024)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        interface=["torch.nn.functional"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 768, 14, 14), (64, 512, 7, 7)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'softmax': dict(
        name=["softmax"],
        interface=["torch.nn.functional"],
        saved_args=dict(output=0),
        para=dict(
            dim=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [False],
                    "shape": [(64, 1000), (16, 1000)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch"],
        para=dict(
            alpha=[1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(128, 3, 224, 224), (64, 3, 224, 224), (16, 3, 224, 224)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["other"],
                    "shape": [(3, 1, 1), (3, 1, 1), (3, 1, 1)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch"],
        para=dict(
            dim=[None],
            keepdim=[False],
            dtype=[None],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(128,)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

    'dipu_fallback': dict(
        name=["dipu_fallback"],
        interface=["torch.nn.functional"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(128, 512, 14, 14), (128, 128, 56, 56), (128, 256, 28, 28), (64, 128, 56, 56), (64, 256, 28, 28), (64, 512, 14, 14), (16, 512, 14, 14), (16, 256, 28, 28), (16, 128, 56, 56)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
                {
                    "ins": ["grad_output"],
                    "requires_grad": [False],
                    "shape": [(128, 128, 28, 28), (128, 256, 14, 14), (128, 512, 7, 7), (128, 512, 7, 7), (128, 512, 7, 7), (128, 512, 7, 7), (128, 512, 7, 7), (128, 512, 7, 7), (128, 512, 7, 7)],
                    "dtype": [np.float32],
                    "gen_fn": "Genfunc.randn",
                },
            ],
        ),
    ),

}
