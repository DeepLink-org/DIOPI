from ...config import Genfunc
from ...diopi_runtime import Dtype

inceptionv3_config = {
    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32,), (32, 32, 3, 3), (64, 32, 3, 3), (64,), (80, 64, 1, 1), (80,), (192, 80, 3, 3), (192,), (64, 192, 1, 1), (48, 192, 1, 1), (48,), (64, 48, 5, 5), (96, 64, 3, 3), (96,), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (384,), (192, 768, 1, 1), (128, 768, 1, 1), (128,), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160,), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (320,), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (448,), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048), (1000,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'uniform': dict(
        name=["uniform"],
        no_output_ref=True,
        para=dict(
            start=[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
            end=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'erfinv': dict(
        name=["erfinv"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)],
                    "dtype": [Dtype.float32],
                    "gen_fn": dict(fn=Genfunc.uniform, low=-1, high=1),
                },
            ],
        ),
    ),

    'mul': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953, 0.14142135623730953],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        atol=1e-04,
        rtol=1e-05,
        is_inplace=[True],
        interface=["torch.Tensor"],
        para=dict(
            min=[-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
            max=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'fill_': dict(
        name=["fill_"],
        interface=["torch.Tensor"],
        para=dict(
            value=[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1000,), (32,), (32,), (64,), (64,), (80,), (80,), (192,), (192,), (48,), (48,), (96,), (96,), (384,), (384,), (128,), (128,), (160,), (160,), (320,), (320,), (448,), (448,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'randperm': dict(
        name=["randperm"],
        no_output_ref=True,
        para=dict(
            n=[1281167],
        ),
    ),

    'flip': dict(
        name=["flip"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(1,)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 299, 299)],
                    "dtype": [Dtype.uint8],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 299, 299)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 3, 299, 299)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(3, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d': dict(
        name=["conv2d"],
        atol=1e-03,
        rtol=1e-03,
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(0, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (2, 2), (1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 3), (3, 0), (3, 0), (0, 3), (0, 0), (0, 3), (3, 0), (3, 0), (0, 3), (0, 3), (3, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 1), (1, 0), (0, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 3, 299, 299), (32, 32, 149, 149), (32, 32, 147, 147), (32, 64, 73, 73), (32, 80, 73, 73), (32, 192, 35, 35), (32, 192, 35, 35), (32, 48, 35, 35), (32, 64, 35, 35), (32, 96, 35, 35), (32, 192, 35, 35), (32, 256, 35, 35), (32, 256, 35, 35), (32, 288, 35, 35), (32, 288, 35, 35), (32, 288, 35, 35), (32, 96, 35, 35), (32, 768, 17, 17), (32, 768, 17, 17), (32, 128, 17, 17), (32, 128, 17, 17), (32, 128, 17, 17), (32, 128, 17, 17), (32, 768, 17, 17), (32, 160, 17, 17), (32, 160, 17, 17), (32, 160, 17, 17), (32, 160, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17), (32, 1280, 8, 8), (32, 1280, 8, 8), (32, 384, 8, 8), (32, 384, 8, 8), (32, 1280, 8, 8), (32, 448, 8, 8), (32, 1280, 8, 8), (32, 2048, 8, 8), (32, 2048, 8, 8), (32, 2048, 8, 8), (32, 2048, 8, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32, 3, 3, 3), (32, 32, 3, 3), (64, 32, 3, 3), (80, 64, 1, 1), (192, 80, 3, 3), (64, 192, 1, 1), (48, 192, 1, 1), (64, 48, 5, 5), (96, 64, 3, 3), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (96, 96, 3, 3), (192, 768, 1, 1), (128, 768, 1, 1), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        atol=1e-03,
        rtol=1e-04,
        atol_half=1e-01,
        rtol_half=1e-02,
        para=dict(
            training=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 32, 149, 149), (32, 32, 147, 147), (32, 64, 147, 147), (32, 80, 73, 73), (32, 192, 71, 71), (32, 64, 35, 35), (32, 48, 35, 35), (32, 96, 35, 35), (32, 32, 35, 35), (32, 384, 17, 17), (32, 96, 17, 17), (32, 192, 17, 17), (32, 128, 17, 17), (32, 160, 17, 17), (32, 320, 8, 8), (32, 192, 8, 8), (32, 384, 8, 8), (32, 448, 8, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(32,), (32,), (64,), (80,), (192,), (64,), (48,), (96,), (32,), (384,), (96,), (192,), (128,), (160,), (320,), (192,), (384,), (448,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(32,), (32,), (64,), (80,), (192,), (64,), (48,), (96,), (32,), (384,), (96,), (192,), (128,), (160,), (320,), (192,), (384,), (448,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.positive,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(32,), (32,), (64,), (80,), (192,), (64,), (48,), (96,), (32,), (384,), (96,), (192,), (128,), (160,), (320,), (192,), (384,), (448,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(32,), (32,), (64,), (80,), (192,), (64,), (48,), (96,), (32,), (384,), (96,), (192,), (128,), (160,), (320,), (192,), (384,), (448,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 32, 149, 149), (32, 32, 147, 147), (32, 64, 147, 147), (32, 80, 73, 73), (32, 192, 71, 71), (32, 64, 35, 35), (32, 48, 35, 35), (32, 96, 35, 35), (32, 32, 35, 35), (32, 384, 17, 17), (32, 96, 17, 17), (32, 192, 17, 17), (32, 128, 17, 17), (32, 160, 17, 17), (32, 320, 8, 8), (32, 192, 8, 8), (32, 384, 8, 8), (32, 448, 8, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3],
            stride=[2, 2, 2, 2],
            padding=[0, 0, 0, 0],
            dilation=[1, 1, 1, 1],
            ceil_mode=[False, False, False, False],
            return_indices=[False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 64, 147, 147), (32, 192, 71, 71), (32, 288, 35, 35), (32, 768, 17, 17)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'avg_pool2d': dict(
        name=["avg_pool2d"],
        para=dict(
            kernel_size=[3, 3, 3, 3, 3, 3],
            stride=[1, 1, 1, 1, 1, 1],
            padding=[1, 1, 1, 1, 1, 1],
            ceil_mode=[False, False, False, False, False, False],
            count_include_pad=[True, True, True, True, True, True],
            divisor_override=[None, None, None, None, None, None],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 192, 35, 35), (32, 256, 35, 35), (32, 288, 35, 35), (32, 768, 17, 17), (32, 1280, 8, 8), (32, 2048, 8, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((32, 64, 35, 35), (32, 64, 35, 35), (32, 96, 35, 35), (32, 32, 35, 35)), ((32, 64, 35, 35), (32, 64, 35, 35), (32, 96, 35, 35), (32, 64, 35, 35)), ((32, 384, 17, 17), (32, 96, 17, 17), (32, 288, 17, 17)), ((32, 192, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17), (32, 192, 17, 17)), ((32, 320, 8, 8), (32, 192, 8, 8), (32, 768, 8, 8)), ((32, 384, 8, 8), (32, 384, 8, 8)), ((32, 320, 8, 8), (32, 768, 8, 8), (32, 768, 8, 8), (32, 192, 8, 8))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'adaptive_avg_pool2d': dict(
        name=["adaptive_avg_pool2d"],
        para=dict(
            output_size=[(1, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 2048, 8, 8)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'dropout': dict(
        name=["dropout"],
        no_output_ref=True,
        para=dict(
            p=[0.5],
            training=[True],
            inplace=[False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 2048, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'linear': dict(
        name=["linear"],
        atol=1e-03,
        rtol=1e-04,
        atol_half=1e-01,
        rtol_half=1e-02,
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 2048)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(1000, 2048)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat_1': dict(
        name=["cat"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,))],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'cross_entropy': dict(
        name=["cross_entropy"],
        para=dict(
            reduction=['none'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(32, 1000)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["target"],
                    "shape": [(32,)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[32, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(55)],
            lr=[0.1 for i in range(55)],
            momentum=[0.9 for i in range(55)],
            weight_decay=[0.0001 for i in range(55)],
            dampening=[0 for i in range(55)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": [(32, 3, 3, 3), (32,), (32, 32, 3, 3), (64, 32, 3, 3), (64,), (80, 64, 1, 1), (80,), (192, 80, 3, 3), (192,), (64, 192, 1, 1), (48, 192, 1, 1), (48,), (64, 48, 5, 5), (96, 64, 3, 3), (96,), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (384,), (192, 768, 1, 1), (128, 768, 1, 1), (128,), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160,), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (320,), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (448,), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": [(32, 3, 3, 3), (32,), (32, 32, 3, 3), (64, 32, 3, 3), (64,), (80, 64, 1, 1), (80,), (192, 80, 3, 3), (192,), (64, 192, 1, 1), (48, 192, 1, 1), (48,), (64, 48, 5, 5), (96, 64, 3, 3), (96,), (96, 96, 3, 3), (32, 192, 1, 1), (64, 256, 1, 1), (48, 256, 1, 1), (64, 288, 1, 1), (48, 288, 1, 1), (384, 288, 3, 3), (384,), (192, 768, 1, 1), (128, 768, 1, 1), (128,), (128, 128, 1, 7), (192, 128, 7, 1), (128, 128, 7, 1), (192, 128, 1, 7), (160, 768, 1, 1), (160,), (160, 160, 1, 7), (192, 160, 7, 1), (160, 160, 7, 1), (192, 160, 1, 7), (192, 192, 1, 7), (192, 192, 7, 1), (320, 192, 3, 3), (320,), (192, 192, 3, 3), (320, 1280, 1, 1), (384, 1280, 1, 1), (384, 384, 1, 3), (384, 384, 3, 1), (448, 1280, 1, 1), (448,), (384, 448, 3, 3), (192, 1280, 1, 1), (320, 2048, 1, 1), (384, 2048, 1, 1), (448, 2048, 1, 1), (192, 2048, 1, 1), (1000, 2048), (1000,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[50000],
        ),
    ),

    'softmax': dict(
        name=["softmax"],
        saved_args=dict(output=0),
        para=dict(
            dim=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 1000), (16, 1000)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'argmax': dict(
        name=["argmax"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(32, 1000), (16, 1000)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
