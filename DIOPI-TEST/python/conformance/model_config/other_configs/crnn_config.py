from ...config import Genfunc
from ...dtype import Dtype

crnn_config = {
    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 1, 3, 3), (64,), (128, 64, 3, 3), (128,), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 512, 2, 2), (1024, 512), (1024, 256), (1024,), (256, 512), (37, 512), (37,), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'normal_': dict(
        name=["normal_"],
        no_output_ref=True,
        para=dict(
            size=[(64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2)],
            mean=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            std=[0.05847053462046861, 0.034020690871988585, 0.024056261216234408, 0.020833333333333332, 0.017010345435994292, 0.01473139127471974, 0.02209708691207961],
        ),
    ),

    'fill_': dict(
        name=["fill_"],
        interface=["torch.Tensor"],
        para=dict(
            value=[0, 0, 0, 0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64,), (128,), (256,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'uniform': dict(
        name=["uniform"],
        no_output_ref=True,
        para=dict(
            start=[0, 0],
            end=[1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(256,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'randperm': dict(
        name=["randperm"],
        no_output_ref=True,
        para=dict(
            n=[2077],
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 32, 100), (1, 32, 112), (1, 32, 48), (1, 32, 64), (1, 32, 80), (1, 32, 96), (1, 32, 32), (1, 32, 128), (1, 32, 144), (1, 32, 192), (1, 32, 160), (1, 32, 224), (1, 32, 176), (1, 32, 272), (1, 32, 208), (1, 32, 288), (1, 32, 240)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 32, 100), (1, 32, 112), (1, 32, 48), (1, 32, 64), (1, 32, 80), (1, 32, 96), (1, 32, 32), (1, 32, 128), (1, 32, 144), (1, 32, 192), (1, 32, 160), (1, 32, 224), (1, 32, 176), (1, 32, 272), (1, 32, 208), (1, 32, 288), (1, 32, 240)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(64, 1, 32, 100), (64, 64, 16, 50), (64, 128, 8, 25), (64, 256, 8, 25), (64, 256, 4, 26), (64, 512, 4, 26), (64, 512, 2, 27), (1, 1, 32, 112), (1, 64, 16, 56), (1, 128, 8, 28), (1, 256, 8, 28), (1, 256, 4, 29), (1, 512, 4, 29), (1, 512, 2, 30), (1, 1, 32, 48), (1, 64, 16, 24), (1, 128, 8, 12), (1, 256, 8, 12), (1, 256, 4, 13), (1, 512, 4, 13), (1, 512, 2, 14), (1, 1, 32, 64), (1, 64, 16, 32), (1, 128, 8, 16), (1, 256, 8, 16), (1, 256, 4, 17), (1, 512, 4, 17), (1, 512, 2, 18), (1, 1, 32, 80), (1, 64, 16, 40), (1, 128, 8, 20), (1, 256, 8, 20), (1, 256, 4, 21), (1, 512, 4, 21), (1, 512, 2, 22), (1, 1, 32, 96), (1, 64, 16, 48), (1, 128, 8, 24), (1, 256, 8, 24), (1, 256, 4, 25), (1, 512, 4, 25), (1, 512, 2, 26), (1, 1, 32, 32), (1, 64, 16, 16), (1, 128, 8, 8), (1, 256, 8, 8), (1, 256, 4, 9), (1, 512, 4, 9), (1, 512, 2, 10), (1, 1, 32, 128), (1, 64, 16, 64), (1, 128, 8, 32), (1, 256, 8, 32), (1, 256, 4, 33), (1, 512, 4, 33), (1, 512, 2, 34), (1, 1, 32, 144), (1, 64, 16, 72), (1, 128, 8, 36), (1, 256, 8, 36), (1, 256, 4, 37), (1, 512, 4, 37), (1, 512, 2, 38), (1, 1, 32, 192), (1, 64, 16, 96), (1, 128, 8, 48), (1, 256, 8, 48), (1, 256, 4, 49), (1, 512, 4, 49), (1, 512, 2, 50), (1, 1, 32, 160), (1, 64, 16, 80), (1, 128, 8, 40), (1, 256, 8, 40), (1, 256, 4, 41), (1, 512, 4, 41), (1, 512, 2, 42), (1, 1, 32, 224), (1, 64, 16, 112), (1, 128, 8, 56), (1, 256, 8, 56), (1, 256, 4, 57), (1, 512, 4, 57), (1, 512, 2, 58), (1, 1, 32, 176), (1, 64, 16, 88), (1, 128, 8, 44), (1, 256, 8, 44), (1, 256, 4, 45), (1, 512, 4, 45), (1, 512, 2, 46), (1, 1, 32, 272), (1, 64, 16, 136), (1, 128, 8, 68), (1, 256, 8, 68), (1, 256, 4, 69), (1, 512, 4, 69), (1, 512, 2, 70), (1, 1, 32, 208), (1, 64, 16, 104), (1, 128, 8, 52), (1, 256, 8, 52), (1, 256, 4, 53), (1, 512, 4, 53), (1, 512, 2, 54), (1, 1, 32, 288), (1, 64, 16, 144), (1, 128, 8, 72), (1, 256, 8, 72), (1, 256, 4, 73), (1, 512, 4, 73), (1, 512, 2, 74), (1, 1, 32, 240), (1, 64, 16, 120), (1, 128, 8, 60), (1, 256, 8, 60), (1, 256, 4, 61), (1, 512, 4, 61), (1, 512, 2, 62)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2), (64, 1, 3, 3), (128, 64, 3, 3), (256, 128, 3, 3), (256, 256, 3, 3), (512, 256, 3, 3), (512, 512, 3, 3), (512, 512, 2, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,), (64,), (128,), (256,), (256,), (512,), (512,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 64, 32, 100), (64, 128, 16, 50), (64, 256, 8, 25), (64, 512, 4, 26), (64, 512, 1, 26), (1, 64, 32, 112), (1, 128, 16, 56), (1, 256, 8, 28), (1, 512, 4, 29), (1, 512, 1, 29), (1, 64, 32, 48), (1, 128, 16, 24), (1, 256, 8, 12), (1, 512, 4, 13), (1, 512, 1, 13), (1, 64, 32, 64), (1, 128, 16, 32), (1, 256, 8, 16), (1, 512, 4, 17), (1, 512, 1, 17), (1, 64, 32, 80), (1, 128, 16, 40), (1, 256, 8, 20), (1, 512, 4, 21), (1, 512, 1, 21), (1, 64, 32, 96), (1, 128, 16, 48), (1, 256, 8, 24), (1, 512, 4, 25), (1, 512, 1, 25), (1, 64, 32, 32), (1, 128, 16, 16), (1, 256, 8, 8), (1, 512, 4, 9), (1, 512, 1, 9), (1, 64, 32, 128), (1, 128, 16, 64), (1, 256, 8, 32), (1, 512, 4, 33), (1, 512, 1, 33), (1, 64, 32, 144), (1, 128, 16, 72), (1, 256, 8, 36), (1, 512, 4, 37), (1, 512, 1, 37), (1, 64, 32, 192), (1, 128, 16, 96), (1, 256, 8, 48), (1, 512, 4, 49), (1, 512, 1, 49), (1, 64, 32, 160), (1, 128, 16, 80), (1, 256, 8, 40), (1, 512, 4, 41), (1, 512, 1, 41), (1, 64, 32, 224), (1, 128, 16, 112), (1, 256, 8, 56), (1, 512, 4, 57), (1, 512, 1, 57), (1, 64, 32, 176), (1, 128, 16, 88), (1, 256, 8, 44), (1, 512, 4, 45), (1, 512, 1, 45), (1, 64, 32, 272), (1, 128, 16, 136), (1, 256, 8, 68), (1, 512, 4, 69), (1, 512, 1, 69), (1, 64, 32, 208), (1, 128, 16, 104), (1, 256, 8, 52), (1, 512, 4, 53), (1, 512, 1, 53), (1, 64, 32, 288), (1, 128, 16, 144), (1, 256, 8, 72), (1, 512, 4, 73), (1, 512, 1, 73), (1, 64, 32, 240), (1, 128, 16, 120), (1, 256, 8, 60), (1, 512, 4, 61), (1, 512, 1, 61)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2), 2, 2, (2, 2), (2, 2)],
            stride=[2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1), 2, 2, (2, 1), (2, 1)],
            padding=[0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1), 0, 0, (0, 1), (0, 1)],
            dilation=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            ceil_mode=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            return_indices=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(64, 64, 32, 100), (64, 128, 16, 50), (64, 256, 8, 25), (64, 512, 4, 26), (1, 64, 32, 112), (1, 128, 16, 56), (1, 256, 8, 28), (1, 512, 4, 29), (1, 64, 32, 48), (1, 128, 16, 24), (1, 256, 8, 12), (1, 512, 4, 13), (1, 64, 32, 64), (1, 128, 16, 32), (1, 256, 8, 16), (1, 512, 4, 17), (1, 64, 32, 80), (1, 128, 16, 40), (1, 256, 8, 20), (1, 512, 4, 21), (1, 64, 32, 96), (1, 128, 16, 48), (1, 256, 8, 24), (1, 512, 4, 25), (1, 64, 32, 32), (1, 128, 16, 16), (1, 256, 8, 8), (1, 512, 4, 9), (1, 64, 32, 128), (1, 128, 16, 64), (1, 256, 8, 32), (1, 512, 4, 33), (1, 64, 32, 144), (1, 128, 16, 72), (1, 256, 8, 36), (1, 512, 4, 37), (1, 64, 32, 192), (1, 128, 16, 96), (1, 256, 8, 48), (1, 512, 4, 49), (1, 64, 32, 160), (1, 128, 16, 80), (1, 256, 8, 40), (1, 512, 4, 41), (1, 64, 32, 224), (1, 128, 16, 112), (1, 256, 8, 56), (1, 512, 4, 57), (1, 64, 32, 176), (1, 128, 16, 88), (1, 256, 8, 44), (1, 512, 4, 45), (1, 64, 32, 272), (1, 128, 16, 136), (1, 256, 8, 68), (1, 512, 4, 69), (1, 64, 32, 208), (1, 128, 16, 104), (1, 256, 8, 52), (1, 512, 4, 53), (1, 64, 32, 288), (1, 128, 16, 144), (1, 256, 8, 72), (1, 512, 4, 73), (1, 64, 32, 240), (1, 128, 16, 120), (1, 256, 8, 60), (1, 512, 4, 61)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(64, 256, 8, 25), (64, 512, 4, 26), (64, 512, 1, 26), (1, 256, 8, 28), (1, 512, 4, 29), (1, 512, 1, 29), (1, 256, 8, 12), (1, 512, 4, 13), (1, 512, 1, 13), (1, 256, 8, 16), (1, 512, 4, 17), (1, 512, 1, 17), (1, 256, 8, 20), (1, 512, 4, 21), (1, 512, 1, 21), (1, 256, 8, 24), (1, 512, 4, 25), (1, 512, 1, 25), (1, 256, 8, 8), (1, 512, 4, 9), (1, 512, 1, 9), (1, 256, 8, 32), (1, 512, 4, 33), (1, 512, 1, 33), (1, 256, 8, 36), (1, 512, 4, 37), (1, 512, 1, 37), (1, 256, 8, 48), (1, 512, 4, 49), (1, 512, 1, 49), (1, 256, 8, 40), (1, 512, 4, 41), (1, 512, 1, 41), (1, 256, 8, 56), (1, 512, 4, 57), (1, 512, 1, 57), (1, 256, 8, 44), (1, 512, 4, 45), (1, 512, 1, 45), (1, 256, 8, 68), (1, 512, 4, 69), (1, 512, 1, 69), (1, 256, 8, 52), (1, 512, 4, 53), (1, 512, 1, 53), (1, 256, 8, 72), (1, 512, 4, 73), (1, 512, 1, 73), (1, 256, 8, 60), (1, 512, 4, 61), (1, 512, 1, 61)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.positive,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,), (256,), (512,), (512,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(2, 0, 1), (1, 0, 2), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2), (2, 0, 1), (1, 0, 2)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 512, 26), (26, 64, 37), (64, 26, 37), (1, 512, 29), (29, 1, 37), (1, 512, 13), (13, 1, 37), (1, 512, 17), (17, 1, 37), (1, 512, 21), (21, 1, 37), (1, 512, 25), (25, 1, 37), (1, 512, 9), (9, 1, 37), (1, 512, 33), (33, 1, 37), (1, 512, 37), (37, 1, 37), (1, 512, 49), (49, 1, 37), (1, 512, 41), (41, 1, 37), (1, 512, 57), (57, 1, 37), (1, 512, 45), (45, 1, 37), (1, 512, 69), (69, 1, 37), (1, 512, 53), (53, 1, 37), (1, 512, 73), (73, 1, 37), (1, 512, 61), (61, 1, 37)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'linear': dict(
        name=["linear"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1664, 512), (1664, 512), (29, 512), (29, 512), (13, 512), (13, 512), (17, 512), (17, 512), (21, 512), (21, 512), (25, 512), (25, 512), (9, 512), (9, 512), (33, 512), (33, 512), (37, 512), (37, 512), (49, 512), (49, 512), (41, 512), (41, 512), (57, 512), (57, 512), (45, 512), (45, 512), (69, 512), (69, 512), (53, 512), (53, 512), (73, 512), (73, 512), (61, 512), (61, 512)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512), (256, 512), (37, 512)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,), (256,), (37,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'adadelta': dict(
        name=["adadelta"],
        interface=["CustomizedTest"],
        para=dict(
            lr=[1.0 for i in range(17)],
            rho=[0.9 for i in range(17)],
            eps=[1e-06 for i in range(17)],
            weight_decay=[0 for i in range(17)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": [(64, 1, 3, 3), (64,), (128, 64, 3, 3), (128,), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 512, 2, 2), (1024, 512), (1024, 256), (1024,), (256, 512), (37, 512), (37,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["square_avg", "acc_delta"],
                    "shape": [(64, 1, 3, 3), (64,), (128, 64, 3, 3), (128,), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 512, 2, 2), (1024, 512), (1024, 256), (1024,), (256, 512), (37, 512), (37,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.positive,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            end=[2077],
        ),
    ),

    'softmax': dict(
        name=["softmax"],
        saved_args=dict(output=0),
        para=dict(
            dim=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 29, 37), (1, 13, 37), (1, 17, 37), (1, 21, 37), (1, 25, 37), (1, 9, 37), (1, 33, 37), (1, 37, 37), (1, 49, 37), (1, 41, 37), (1, 57, 37), (1, 45, 37), (1, 69, 37), (1, 53, 37), (1, 73, 37), (1, 61, 37)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
