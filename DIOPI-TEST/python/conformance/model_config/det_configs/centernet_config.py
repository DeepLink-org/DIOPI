from ...config import Genfunc
from ...dtype import Dtype

centernet_config = {
    'conv2d': dict(
        name=["conv2d"],
        para=dict(
            bias=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
            stride=[(2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2), (1, 1), (2, 2), (1, 1), (1, 1), (1, 1)],
            padding=[(3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1), (3, 3), (1, 1), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (0, 0), (1, 1), (1, 1), (1, 1)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 3, 512, 512), (16, 64, 128, 128), (16, 64, 128, 128), (16, 128, 64, 64), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 32, 32), (16, 128, 64, 64), (1, 3, 448, 672), (1, 64, 112, 168), (1, 64, 112, 168), (1, 128, 56, 84), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 28, 42), (1, 128, 56, 84)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3), (64, 3, 7, 7), (64, 64, 3, 3), (128, 64, 3, 3), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (128, 256, 3, 3), (64, 128, 3, 3)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1, 1.1920928955078125e-07],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), ()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'batch_norm': dict(
        name=["batch_norm"],
        para=dict(
            training=[True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False],
            momentum=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
            eps=[1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 256, 256), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 64, 224, 336), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_mean"],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["running_var"],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.positive,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,), (64,), (64,), (128,), (256,), (512,), (256,), (128,), (64,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'relu': dict(
        name=["relu"],
        para=dict(
            inplace=[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 256, 256), (16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 64, 224, 336), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3, 3],
            stride=[2, 2],
            padding=[1, 1],
            dilation=[1, 1],
            ceil_mode=[False, False],
            return_indices=[False, False],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 256, 256), (1, 64, 224, 336)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_1': dict(
        name=["add"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 64, 128, 128), (16, 128, 64, 64), (16, 256, 32, 32), (16, 512, 16, 16), (1, 64, 112, 168), (1, 128, 56, 84), (1, 256, 28, 42), (1, 512, 14, 21)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv_transpose2d': dict(
        name=["conv_transpose2d"],
        para=dict(
            bias=[None, None, None, None, None, None],
            stride=[(2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2)],
            padding=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            output_padding=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            groups=[1, 1, 1, 1, 1, 1],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 256, 16, 16), (16, 128, 32, 32), (16, 64, 64, 64), (1, 256, 14, 21), (1, 128, 28, 42), (1, 64, 56, 84)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "shape": [(256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4), (256, 256, 4, 4), (128, 128, 4, 4), (64, 64, 4, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'conv2d_1': dict(
        name=["conv2d"],
        para=dict(
            stride=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            padding=[(1, 1), (0, 0), (0, 0), (1, 1), (0, 0), (0, 0)],
            dilation=[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)],
            groups=[1, 1, 1, 1, 1, 1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 64, 128, 128), (16, 64, 128, 128), (16, 64, 128, 128), (1, 64, 112, 168), (1, 64, 112, 168), (1, 64, 112, 168)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["weight"],
                    "requires_grad": [True],
                    "shape": [(64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1), (64, 64, 3, 3), (80, 64, 1, 1), (2, 64, 1, 1)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["bias"],
                    "requires_grad": [True],
                    "shape": [(64,), (80,), (2,), (64,), (80,), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sigmoid': dict(
        name=["sigmoid"],
        interface=["torch.Tensor"],
        saved_args=dict(output=0),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(16, 80, 128, 128), (1, 80, 112, 168)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_2': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(7, 1), (), (1, 21), (1, 19), (1, 17), (1, 31), (1, 9), (6, 1), (1, 7), (1, 23), (1, 43), (1, 11), (1, 1), (1, 41), (1, 3), (12, 1), (1, 13), (1, 5), (1, 15), (2, 1), (3, 1), (1, 37), (1, 47), (1, 49), (1, 33), (9, 1), (1, 27), (1, 29), (1, 39), (1, 51), (4, 1), (16, 80, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(7, 1), (), (21, 1), (19, 1), (17, 1), (31, 1), (9, 1), (6, 1), (7, 1), (23, 1), (43, 1), (11, 1), (1, 1), (41, 1), (3, 1), (12, 1), (13, 1), (5, 1), (15, 1), (2, 1), (3, 1), (37, 1), (47, 1), (49, 1), (33, 1), (9, 1), (27, 1), (29, 1), (39, 1), (51, 1), (4, 1), (16, 80, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0.25, 0.25, 0.7, 1, 1, 1, 1, 1, 0.25, 1, 1, 1, 1, 0.25, 1, 1, 1, 0.25, 1, 1, 1, 0.25, 0.25, 1, 1, 1, 1, 0.25, 1, 1, 1, 1, 0.25, 35.0, 4.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(7, 1), (), (), (21, 21), (19, 19), (17, 17), (31, 31), (9, 9), (6, 1), (7, 7), (23, 23), (43, 43), (11, 11), (1, 1), (41, 41), (1, 1), (3, 3), (12, 1), (13, 13), (5, 5), (15, 15), (2, 1), (3, 1), (37, 37), (47, 47), (49, 49), (33, 33), (9, 1), (27, 27), (29, 29), (39, 39), (51, 51), (4, 1), (), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[2, 1.3, 2, 8, 2.4, 24.5, 20.055555555555554, 16.055555555555557, 53.38888888888889, 4.5, 2, 2.7222222222222228, 29.388888888888893, 102.72222222222223, 6.722222222222221, 2, 93.38888888888889, 0.05555555555555555, 0.5, 2, 9.388888888888888, 1.388888888888889, 12.5, 2, 2, 76.05555555555556, 122.72222222222221, 133.38888888888886, 60.5, 2, 40.5, 46.722222222222214, 84.5, 144.5, 2, 2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(7, 1), (), (), (), (), (21, 21), (19, 19), (17, 17), (31, 31), (9, 9), (6, 1), (7, 7), (23, 23), (43, 43), (11, 11), (1, 1), (41, 41), (1, 1), (3, 3), (12, 1), (13, 13), (5, 5), (15, 15), (2, 1), (3, 1), (37, 37), (47, 47), (49, 49), (33, 33), (9, 1), (27, 27), (29, 29), (39, 39), (51, 51), (4, 1), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'cat': dict(
        name=["cat"],
        interface=["torch"],
        para=dict(
            dim=[1, 1, 1, 1, 1, 1, 1, 1, -1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((7, 1), (7, 1)), ((6, 1), (6, 1)), ((1, 1), (1, 1)), ((12, 1), (12, 1)), ((2, 1), (2, 1)), ((3, 1), (3, 1)), ((9, 1), (9, 1)), ((4, 1), (4, 1)), ((1, 100, 4), (1, 100, 1))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (16, 2, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (16, 2, 128, 128), (1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_1': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (1, 21), (21, 1), (1, 19), (19, 1), (1, 17), (17, 1), (1, 31), (31, 1), (1, 9), (9, 1), (1, 7), (7, 1), (1, 23), (23, 1), (1, 43), (43, 1), (1, 11), (11, 1), (1, 41), (41, 1), (1, 1), (1, 3), (3, 1), (1, 13), (13, 1), (1, 5), (5, 1), (1, 15), (15, 1), (1, 37), (37, 1), (1, 47), (47, 1), (1, 49), (49, 1), (1, 33), (33, 1), (1, 27), (27, 1), (1, 29), (29, 1), (1, 39), (39, 1), (1, 51), (51, 1), (16, 80, 128, 128), (16, 2, 128, 128), (1, 80, 112, 168)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (1, 21), (21, 1), (1, 19), (19, 1), (1, 17), (17, 1), (1, 31), (31, 1), (1, 9), (9, 1), (1, 7), (7, 1), (1, 23), (23, 1), (1, 43), (43, 1), (1, 11), (11, 1), (1, 41), (41, 1), (1, 1), (1, 3), (3, 1), (1, 13), (13, 1), (1, 5), (5, 1), (1, 15), (15, 1), (1, 37), (37, 1), (1, 47), (47, 1), (1, 49), (49, 1), (1, 33), (33, 1), (1, 27), (27, 1), (1, 29), (29, 1), (1, 39), (39, 1), (1, 51), (51, 1), (16, 80, 128, 128), (16, 2, 128, 128), (1, 80, 112, 168)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'pow': dict(
        name=["pow"],
        interface=["torch.Tensor"],
        para=dict(
            exponent=[2, 4.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (16, 80, 128, 128), (16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_2': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[4, 2, 0.7, 16, -0.6, -0.7, 4.8, 1.1920928955078125e-07, 1.0, 0.1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_1': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[65.95589938786749, 106.4723317199121, 56.456617055709245, 91.05976531583529, 63.407948012009896, 108.28975886481602, 96.75344692664702, 158.38947743616052, 51.93917105840615, 84.00547554698444, 51.78175920087594, 83.50205835786325, 32.683070624847204, 55.37180348420801, 22.55700379948889, 36.37613427140452, 114.20634765086396, 203.71357995050306, 130.7055822019473, 212.2045924632641, 36.88958100227539, 62.67304170255342, 21.756019899224874, 35.12808594095329, 37.01274095719017, 60.48182594409043, 130.2986653327654, 210.73867481433018, 63.71971170804408, 104.34382955223083, 72.73129524897621, 121.58583484261231, 61.2773874515765, 101.87944775566856, 75.18468471973696, 123.40712442713752, 30.538122147520383, 49.41280692574801, 26.87273677788687, 43.499174965236406, 57.444287717807505, 96.8318553117981, 141.7264985478192, 238.10956314793407, 29.97893343992265, 49.460754249581555, 3.280684649491502, 5.297093209692271, 11.270842509286545, 18.573013975780324, 3.6903075828651932, 6.421371254573473, 1.434046868583857, 2.427704716545005, 10.864423848801474, 18.69783106990621, 31.65448191940499, 51.665361416644515, 31.032479283934315, 53.39514037461649, 16.20954248515747, 28.23327898052558, 37.4654479492647, 60.41256271981019, 30.12725694994692, 50.77804316797517, 16.000268933897058, 27.177222824079863, 23.130156730783842, 37.58193197971766, 16.84155032598877, 31.036412665332513, 4.562577756454284, 7.471512160032903, 48.09314337255494, 77.58555006007884, 35.2678610279157, 58.32671651460418, 66.29256445154691, 108.46083142372181, 41.58579293254037, 78.07243231448601, 122.74931182979194, 203.596990093174, 150.0916386745111, 246.41048070242468, 152.03369409648968, 248.72490451299805, 104.95806454246382, 171.39386065069542, 57.7279533810311, 93.14989180750561, 6.970199639459118, 12.096478137259428, 36.30249599986635, 58.780805587102584, 45.54980693822286, 73.50853612208925, 6.652262034785112, 10.878566113399033, 8.600205316975904, 15.258606530158234, 48.540336902833964, 78.54045160974376, 32.37910394174478, 57.836418194172865, 52.530487799348485, 85.10656233878208, 48.815998494186054, 80.57726905934763, 40.72789853098242, 66.40813967899568, 6.876629168207415, 11.491920618502075, 52.54910742730318, 84.93772994818028, 14.086297680676523, 23.287900161786002, 10.162247703207576, 17.167630560519992, 10.207705814511186, 16.576123892538366, 34.56677683190718, 60.392292586937366, 9.687512600798257, 15.788184970666158, 19.043774422059332, 34.19108827718306, 9.34556618074954, 15.509819611927512, 12.562379751056948, 21.634656216574715, 11.676449044134669, 19.007875115494894, 7.412620412224844, 12.468871151902018, 9.186810733604895, 16.195521661095082, 99.31106925495516, 169.32596153573144, 99.7221726535779, 162.55046091521857, 90.2563677203027, 146.43664639102468, 119.37167861871592, 194.7540917413547, 100.1385319741482, 164.95324858501576, 4.327216428284113, 7.0562311217847, 4.300311791404886, 7.164704105845294, 71.3742064316655, 135.79942700541855, 156.7963697363558, 254.10280276887934, 105.82884822763357, 177.29927030306695, 58.04781081008783, 93.75080207990223, 20.415517014294238, 34.00551784844079, 16.81270239045234, 29.02790699939672],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_3': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[106.15579463399537, 90.99160224816079, 91.74075012978147, 152.12609130668545, 83.3380317685899, 83.48520990832748, 48.11714627474285, 36.36558384622145, 147.55519359294, 208.41840242346643, 53.987325805750466, 35.004300098568244, 58.377500950173435, 209.07481279137858, 100.13364604523547, 110.02882257333758, 93.68122477316359, 117.66729695815019, 48.96549676095276, 43.06052131702251, 85.46759025721387, 212.29744942238472, 46.48949026476979, 5.278486804294886, 17.515841044608734, 5.107422995339265, 2.114680872078542, 15.444972650535231, 50.026662812819126, 44.13971652826185, 22.37847566514983, 60.40905887804618, 44.836029387647606, 23.427671116134896, 36.834569665749285, 19.39529399620482, 7.169805888976054, 77.48753364957327, 54.45207136713786, 104.33693636034413, 44.023955326368906, 188.50149203653535, 234.8125, 239.31103910496898, 165.7350636652516, 92.97724751081579, 9.71112958943665, 58.14221435277255, 73.34806389102918, 10.478473213159742, 11.290411359727997, 77.83255577379718, 41.655074884963, 84.0529240595992, 75.63582696257443, 64.47606220649838, 10.409816188160532, 84.404118239463, 21.762873906358564, 15.051572009138749, 16.270980671481322, 47.3466067619951, 15.348775192253738, 24.10745091155689, 14.33626745192503, 17.830453705548358, 18.5358004201814, 11.076324962297294, 12.282312866499776, 144.21417584837144, 157.95144873108953, 144.07806315067538, 188.78727901728442, 155.73088767164978, 6.849454270502938, 6.548111318603274, 70.22066919940667, 250.77100641072923, 159.41838257592818, 93.35635063092923, 31.10181074850687, 23.719987718858803, 1e-12, 1e-06],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (16, 80, 128, 128), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'lt': dict(
        name=["lt"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (21, 21), (19, 19), (17, 17), (31, 31), (9, 9), (7, 7), (23, 23), (43, 43), (11, 11), (41, 41), (1, 1), (3, 3), (13, 13), (5, 5), (15, 15), (37, 37), (47, 47), (49, 49), (33, 33), (27, 27), (29, 29), (39, 39), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'arange': dict(
        name=["arange"],
        interface=["torch"],
        para=dict(
            start=[-10, -9, -8, -15, -4, -3, -11, -21, -5, -20, 0, -1, -6, -2, -7, -18, -23, -24, -16, -13, -14, -19, -25],
            end=[11, 10, 9, 16, 5, 4, 12, 22, 6, 21, 1, 2, 7, 3, 8, 19, 24, 25, 17, 14, 15, 20, 26],
            dtype=[Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32, Dtype.float32],
        ),
    ),

    'neg': dict(
        name=["neg"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(21, 21), (19, 19), (17, 17), (31, 31), (9, 9), (7, 7), (23, 23), (43, 43), (11, 11), (41, 41), (1, 1), (3, 3), (13, 13), (5, 5), (15, 15), (37, 37), (47, 47), (49, 49), (33, 33), (27, 27), (29, 29), (39, 39), (51, 51), (16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'exp': dict(
        name=["exp"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(21, 21), (19, 19), (17, 17), (31, 31), (9, 9), (7, 7), (23, 23), (43, 43), (11, 11), (41, 41), (1, 1), (3, 3), (13, 13), (5, 5), (15, 15), (37, 37), (47, 47), (49, 49), (33, 33), (27, 27), (29, 29), (39, 39), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max': dict(
        name=["max"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(21, 21), (19, 19), (17, 17), (31, 31), (9, 9), (7, 7), (23, 23), (43, 43), (11, 11), (41, 41), (1, 1), (3, 3), (13, 13), (5, 5), (15, 15), (37, 37), (47, 47), (49, 49), (33, 33), (27, 27), (29, 29), (39, 39), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gt': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[10, 11, 9, 8, 15, 16, 4, 5, 3, 12, 21, 22, 6, 20, 0, 1, 2, 7, 18, 19, 23, 24, 25, 17, 13, 14, 26],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_2': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[128],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_3': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[10, 9, 8, 15, 4, 3, 11, 21, 5, 20, 0, 1, 6, 2, 7, 18, 23, 24, 16, 13, 14, 19, 25],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_4': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[11, 10, 9, 16, 5, 4, 12, 22, 6, 21, 1, 2, 7, 3, 8, 19, 24, 25, 17, 14, 15, 20, 26],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'maximum': dict(
        name=["maximum"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(21, 21), (19, 19), (17, 17), (31, 31), (9, 9), (7, 7), (23, 23), (43, 43), (11, 11), (41, 41), (1, 1), (3, 3), (13, 13), (5, 5), (15, 15), (37, 37), (47, 47), (49, 49), (33, 33), (27, 27), (29, 29), (39, 39), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(21, 21), (19, 19), (17, 17), (31, 31), (9, 9), (7, 7), (23, 23), (43, 43), (11, 11), (41, 41), (1, 1), (3, 3), (13, 13), (5, 5), (15, 15), (37, 37), (47, 47), (49, 49), (33, 33), (27, 27), (29, 29), (39, 39), (51, 51)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sub_4': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.int32],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'eq': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sum': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'gt_1': dict(
        name=["gt"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'sub_5': dict(
        name=["sub"],
        interface=["torch.Tensor"],
        para=dict(
            other=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'log': dict(
        name=["log"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.rand,
                },
            ],
        ),
    ),

    'mul_3': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(16, 80, 128, 128)],
                    "dtype": [Dtype.bool],
                    "gen_fn": Genfunc.mask,
                },
            ],
        ),
    ),

    'sum_1': dict(
        name=["sum"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 80, 128, 128), (16, 2, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_1': dict(
        name=["div"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_4': dict(
        name=["mul"],
        interface=["torch.Tensor"],
        para=dict(
            other=[2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'abs': dict(
        name=["abs"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(16, 2, 128, 128)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mean': dict(
        name=["mean"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'add_5': dict(
        name=["add"],
        interface=["torch.Tensor"],
        para=dict(
            other=[0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'norm': dict(
        name=["norm"],
        interface=["torch"],
        para=dict(
            p=[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,), (90,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack': dict(
        name=["stack"],
        interface=["torch"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ())],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'div_2': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[35.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'reciprocal': dict(
        name=["reciprocal"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'clamp': dict(
        name=["clamp"],
        interface=["torch"],
        para=dict(
            max=[1.0],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'mul_5': dict(
        name=["mul"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'sgd': dict(
        name=["sgd"],
        interface=["CustomizedTest"],
        para=dict(
            nesterov=[False for i in range(25)],
            lr=[2.000000000000002e-05 for i in range(25)],
            momentum=[0.9 for i in range(25)],
            weight_decay=[0.0001 for i in range(25)],
            dampening=[0 for i in range(25)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["param", "param_grad"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["buf"],
                    "shape": [(64, 3, 7, 7), (64,), (64, 64, 3, 3), (128, 64, 3, 3), (128,), (128, 128, 3, 3), (128, 64, 1, 1), (256, 128, 3, 3), (256,), (256, 256, 3, 3), (256, 128, 1, 1), (512, 256, 3, 3), (512,), (512, 512, 3, 3), (512, 256, 1, 1), (256, 512, 3, 3), (256, 256, 4, 4), (128, 256, 3, 3), (128, 128, 4, 4), (64, 128, 3, 3), (64, 64, 4, 4), (80, 64, 1, 1), (80,), (2, 64, 1, 1), (2,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'max_pool2d_1': dict(
        name=["max_pool2d"],
        para=dict(
            kernel_size=[3],
            stride=[1],
            padding=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "requires_grad": [True],
                    "shape": [(1, 80, 112, 168)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'eq_1': dict(
        name=["eq"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 80, 112, 168)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 80, 112, 168)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'topk': dict(
        name=["topk"],
        interface=["torch"],
        para=dict(
            k=[100],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 1505280)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_3': dict(
        name=["div"],
        interface=["torch.Tensor"],
        para=dict(
            other=[18816, 168],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 100), (1, 100)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'div_4': dict(
        name=["div"],
        interface=["torch"],
        para=dict(
            other=[18816, 168],
            rounding_mode=['trunc', 'trunc'],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 100), (1, 100)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'remainder': dict(
        name=["remainder"],
        interface=["torch.Tensor"],
        para=dict(
            other=[18816, 168],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 100), (1, 100)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'permute': dict(
        name=["permute"],
        interface=["torch.Tensor"],
        para=dict(
            dims=[(0, 2, 3, 1)],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 2, 112, 168)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'gather': dict(
        name=["gather"],
        interface=["torch.Tensor"],
        para=dict(
            dim=[1],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 18816, 2)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["index"],
                    "shape": [(1, 100, 2)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
            ],
        ),
    ),

    'add_6': dict(
        name=["add"],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(1, 100)],
                    "dtype": [Dtype.int64],
                    "gen_fn": Genfunc.randint,
                },
                {
                    "ins": ["other"],
                    "shape": [(1, 100)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'stack_1': dict(
        name=["stack"],
        interface=["torch"],
        para=dict(
            dim=[2],
        ),
        tensor_para=dict(
            args=[
                {
                    "ins": ["tensors"],
                    "shape": [((1, 100), (1, 100), (1, 100), (1, 100))],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
            seq_name='tensors',
        ),
    ),

    'sub_6': dict(
        name=["sub"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

    'div_5': dict(
        name=["div"],
        is_inplace=[True],
        interface=["torch.Tensor"],
        tensor_para=dict(
            args=[
                {
                    "ins": ["input"],
                    "shape": [(100, 4)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
                {
                    "ins": ["other"],
                    "shape": [(4,)],
                    "dtype": [Dtype.float32],
                    "gen_fn": Genfunc.randn,
                },
            ],
        ),
    ),

}
