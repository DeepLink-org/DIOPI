// Copyright (c) 2023 Huawei Technologies Co., Ltd
// Copyright (c) 2022, Facebook CORPORATION.
// All rights reserved.
//
// Licensed under the BSD 3-Clause License  (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <ATen/ATen.h>
#include <ATen/Tensor.h>
#include <c10/core/Device.h>
#include <diopi/diopirt.h>

#include <algorithm>
#include <iostream>
#include <tuple>
#include <vector>

#include "torch_npu/csrc/framework/DIOPIAdapter.h"

#if defined(NDEBUG)
#define OP_NOT_IMPL
#else
#define OP_NOT_IMPL std::cout << __FILE__ << ":" << __LINE__ << ":" << __FUNCTION__ << ": not impled yet" << std::endl;
#endif

// Autogenerated file by gen_backend_stubs.py. Do not edit directly!
namespace at_npu::native {

struct NPUNativeFunctions {
    static at::Tensor argmax(const at::Tensor& self, c10::optional<int64_t> dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor argmin(const at::Tensor& self, c10::optional<int64_t> dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor _embedding_bag_dense_backward(const at::Tensor& grad, const at::Tensor& indices, const at::Tensor& offset2bag, const at::Tensor& bag_size,
                                                    const at::Tensor& maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode,
                                                    const c10::optional<at::Tensor>& per_sample_weights, int64_t padding_idx) {
        OP_NOT_IMPL
    }
    static at::Tensor nan_to_num(const at::Tensor& self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) { OP_NOT_IMPL }
    static at::Tensor& nan_to_num_(at::Tensor& self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) { OP_NOT_IMPL }
    static at::Tensor& nan_to_num_out(const at::Tensor& self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf,
                                      at::Tensor& out) {
        OP_NOT_IMPL
    }

    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> slow_conv_dilated2d_backward(const at::Tensor& grad_output, const at::Tensor& self,
                                                                                         const at::Tensor& weight, at::IntArrayRef kernel_size,
                                                                                         at::IntArrayRef stride, at::IntArrayRef padding,
                                                                                         at::IntArrayRef dilation, ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor& npu_dtype_cast_(at::Tensor& self, const at::Tensor& src) { OP_NOT_IMPL }
    static at::Tensor npu_roi_alignbk(const at::Tensor& self, const at::Tensor& rois, at::IntArrayRef xdiff_shape, int64_t pooled_width, int64_t pooled_height,
                                      double spatial_scale, int64_t sample_num, c10::optional<int64_t> roi_end_mode) {
        OP_NOT_IMPL
    }
    static at::Tensor clone(const at::Tensor& self, c10::optional<at::MemoryFormat> memory_format);
    static at::Tensor& clamp_out(const at::Tensor& self, const c10::optional<at::Scalar>& min, const c10::optional<at::Scalar>& max, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> batch_norm_gather_stats_update(const at::Tensor& input, const at::Tensor& mean, const at::Tensor& invstd,
                                                                               const c10::optional<at::Tensor>& running_mean,
                                                                               const c10::optional<at::Tensor>& running_var, double momentum, double eps,
                                                                               const at::Tensor& counts) {
        OP_NOT_IMPL
    }
    static at::Tensor& pow_out(const at::Tensor& self, const at::Tensor& exponent, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& npu_transpose_out(const at::Tensor& self, at::IntArrayRef perm, bool require_contiguous, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& asin_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& logical_and_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_dropout_gen_mask(at::IntArrayRef size, double p, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                           c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& mse_loss_out(const at::Tensor& self, const at::Tensor& target, int64_t reduction, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& _softmax_backward_data_out(const at::Tensor& grad_output, const at::Tensor& output, int64_t dim, at::ScalarType input_dtype,
                                                  at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor&, at::Tensor&> max_pool2d_with_indices_out(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                                                              at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode,
                                                                              at::Tensor& out, at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_gru(
        const at::Tensor& input, const at::Tensor& hx, const at::Tensor& weight_input, const at::Tensor& weight_hidden, const at::Tensor& bias_input,
        const at::Tensor& bias_hidden, const at::Tensor& seq_length, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional,
        bool batch_first) {
        OP_NOT_IMPL
    }
    static void _cummax_helper(const at::Tensor& self, at::Tensor& values, at::Tensor& indices, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor& replication_pad1d_out(const at::Tensor& self, at::IntArrayRef padding, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& upsample_trilinear3d_out(const at::Tensor& self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d,
                                                c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor le(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& _add_relu_(at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& addmm_out(const at::Tensor& self, const at::Tensor& mat1, const at::Tensor& mat2, const at::Scalar& beta, const at::Scalar& alpha,
                                 at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor scalar_tensor(const at::Scalar& s, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                    c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor&, at::Tensor&> linalg_qr_out(const at::Tensor& A, c10::string_view mode, at::Tensor& Q, at::Tensor& R) { OP_NOT_IMPL }
    static at::Tensor& reflection_pad1d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef padding, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor tril(const at::Tensor& self, int64_t diagonal) { OP_NOT_IMPL }
    static at::Tensor& hardshrink_out(const at::Tensor& self, const at::Scalar& lambd, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& cumsum_(at::Tensor& self, int64_t dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor& nonzero_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_bounding_box_decode(const at::Tensor& rois, const at::Tensor& deltas, double means0, double means1, double means2, double means3,
                                              double stds0, double stds1, double stds2, double stds3, at::IntArrayRef max_shape, double wh_ratio_clip) {
        OP_NOT_IMPL
    }
    static at::Tensor& index_select_out(const at::Tensor& self, at::Dimname dim, const at::Tensor& index, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor upsample_nearest1d_backward(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                  c10::optional<double> scales) {
        OP_NOT_IMPL
    }
    static ::std::vector<at::Tensor> _foreach_mul(at::TensorList tensors, const at::Scalar& scalar) { OP_NOT_IMPL }
    static at::Tensor& replication_pad2d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef padding, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& _log_softmax_backward_data_out(const at::Tensor& grad_output, const at::Tensor& output, int64_t dim, at::ScalarType input_dtype,
                                                      at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor ctc_loss(const at::Tensor& log_probs, const at::Tensor& targets, const at::Tensor& input_lengths, const at::Tensor& target_lengths,
                               int64_t blank, int64_t reduction, bool zero_infinity) {
        OP_NOT_IMPL
    }
    static at::Tensor& npu_format_cast_(at::Tensor& self, int64_t acl_format) { OP_NOT_IMPL }
    static at::Tensor index_copy(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& source) { OP_NOT_IMPL }
    static at::Tensor unsqueeze(const at::Tensor& self, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor& bernoulli_(at::Tensor& self, const at::Tensor& p, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor im2col(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
        OP_NOT_IMPL
    }
    static at::Tensor floor(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor upsample_nearest1d(const at::Tensor& self, at::IntArrayRef output_size, c10::optional<double> scales) { OP_NOT_IMPL }
    static at::Tensor sgn(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor logical_or(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& eq_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor linalg_cross(const at::Tensor& self, const at::Tensor& other, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor& logsumexp_out(const at::Tensor& self, at::DimnameList dim, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_sign_bits_pack(const at::Tensor& self, int64_t size) { OP_NOT_IMPL }
    static at::Tensor& sub_(at::Tensor& self, const at::Scalar& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> npu_deformable_conv2d(const at::Tensor& input, const at::Tensor& weight, const at::Tensor& offset,
                                                                      const c10::optional<at::Tensor>& bias, at::IntArrayRef kernel_size,
                                                                      at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups,
                                                                      int64_t deformable_groups, bool modulated) {
        OP_NOT_IMPL
    }
    static at::Tensor& sub_out(const at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor div(const at::Tensor& self, const at::Scalar& other, c10::optional<c10::string_view> rounding_mode) { OP_NOT_IMPL }
    static at::Tensor bitwise_and(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor quantize_per_channel(const at::Tensor& self, const at::Tensor& scales, const at::Tensor& zero_points, int64_t axis,
                                           at::ScalarType dtype) {
        OP_NOT_IMPL
    }
    static at::Tensor xlogy(const at::Scalar& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& bitwise_xor_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& cumprod_(at::Tensor& self, at::Dimname dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor mish_backward(const at::Tensor& grad_output, const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> native_layer_norm_backward(const at::Tensor& grad_out, const at::Tensor& input,
                                                                                       at::IntArrayRef normalized_shape, const at::Tensor& mean,
                                                                                       const at::Tensor& rstd, const c10::optional<at::Tensor>& weight,
                                                                                       const c10::optional<at::Tensor>& bias,
                                                                                       ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> std_mean(const at::Tensor& self, at::DimnameList dim, c10::optional<int64_t> correction, bool keepdim) {
        OP_NOT_IMPL
    }
    static at::Tensor _convolution(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                   at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups,
                                   bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) {
        OP_NOT_IMPL
    }
    static at::Tensor replication_pad1d_backward(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef padding) { OP_NOT_IMPL }
    static at::Tensor eye(int64_t n, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                          c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& pow_out(const at::Tensor& self, const at::Scalar& exponent, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_get_float_status(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor decode_jpeg(const at::Tensor& self, at::IntArrayRef image_shape, int64_t channels, bool try_recover_truncated) { OP_NOT_IMPL }
    static at::Tensor& reciprocal_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor arange(const at::Scalar& end, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                             c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& upsample_trilinear3d_backward_out(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                         bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h,
                                                         c10::optional<double> scales_w, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor atanh(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& cosh_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& log10_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor npu_transpose(const at::Tensor& self, at::IntArrayRef perm, bool require_contiguous) { OP_NOT_IMPL }
    static at::Tensor replication_pad2d_backward(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef padding) { OP_NOT_IMPL }
    static at::Tensor& relu_(at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> _aminmax(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor one_hot(const at::Tensor& self, int64_t num_classes) { OP_NOT_IMPL }
    static at::Tensor& avg_pool2d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                               at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override,
                                               at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor isclose(const at::Tensor& self, const at::Tensor& other, double rtol, double atol, bool equal_nan) { OP_NOT_IMPL }
    static at::Tensor& addr_out(const at::Tensor& self, const at::Tensor& vec1, const at::Tensor& vec2, const at::Scalar& beta, const at::Scalar& alpha,
                                at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor arange(const at::Scalar& start, const at::Scalar& end, const at::Scalar& step, c10::optional<at::ScalarType> dtype,
                             c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor mish(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& cos_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor dot(const at::Tensor& self, const at::Tensor& tensor) { OP_NOT_IMPL }
    static at::Tensor& threshold_(at::Tensor& self, const at::Scalar& threshold, const at::Scalar& value) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> native_layer_norm(const at::Tensor& input, at::IntArrayRef normalized_shape,
                                                                              const c10::optional<at::Tensor>& weight, const c10::optional<at::Tensor>& bias,
                                                                              double eps) {
        OP_NOT_IMPL
    }
    static at::Tensor& lerp_(at::Tensor& self, const at::Tensor& end, const at::Tensor& weight) { OP_NOT_IMPL }
    static at::Tensor bitwise_not(const at::Tensor& self) { OP_NOT_IMPL }
    static int64_t get_npu_format(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> _npu_ciou(const at::Tensor& self, const at::Tensor& gtboxes, bool trans, bool is_cross, int64_t mode,
                                                          bool atan_sub_flag) {
        OP_NOT_IMPL
    }
    static at::Tensor upsample_nearest2d_backward(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                  c10::optional<double> scales_h, c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static at::Tensor& npu_broadcast_out(const at::Tensor& self, at::IntArrayRef size, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& sgn_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor bernoulli(const at::Tensor& self, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor& atanh_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static void _foreach_mul_(at::TensorList self, at::TensorList other) { OP_NOT_IMPL }
    static at::Tensor __rshift__(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& binary_cross_entropy_out(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight, int64_t reduction,
                                                at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor full(at::IntArrayRef size, const at::Scalar& fill_value, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                           c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& fmod_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor hardsigmoid(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& slow_conv3d_forward_out(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size,
                                               const c10::optional<at::Tensor>& bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor& output) {
        OP_NOT_IMPL
    }
    static at::Tensor _softmax(const at::Tensor& self, int64_t dim, bool half_to_float) { OP_NOT_IMPL }
    static at::Tensor& sigmoid_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& abs_(at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> _aminmax(const at::Tensor& self, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor ceil(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> convolution_backward(const at::Tensor& grad_output, const at::Tensor& input,
                                                                                 const at::Tensor& weight, at::OptionalIntArrayRef bias_sizes,
                                                                                 at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation,
                                                                                 bool transposed, at::IntArrayRef output_padding, int64_t groups,
                                                                                 ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor _adaptive_avg_pool2d(const at::Tensor& self, at::IntArrayRef output_size) { OP_NOT_IMPL }
    static at::Tensor unsafe_empty_with_format(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                               c10::optional<at::Device> device, c10::optional<bool> pin_memory, int64_t acl_format, bool keep_format);
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_lstm_backward(
        const c10::optional<at::Tensor>& grady, const c10::optional<at::Tensor>& gradh, const c10::optional<at::Tensor>& gradc, const at::Tensor& input,
        const at::Tensor& weight, const at::Tensor& bias, const at::Tensor& hx, const at::Tensor& cx, const at::Tensor& y_output, const at::Tensor& h_output,
        const at::Tensor& c_output, const at::Tensor& i, const at::Tensor& j, const at::Tensor& f, const at::Tensor& o, const at::Tensor& tanhc) {
        OP_NOT_IMPL
    }
    static at::Tensor bitwise_or(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& normal_out(double mean, const at::Tensor& std, c10::optional<at::Generator> generator, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& hardsigmoid_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor to(const at::Tensor& self, at::ScalarType dtype, bool non_blocking, bool copy, c10::optional<at::MemoryFormat> memory_format) {
        OP_NOT_IMPL
    }
    static at::Tensor _adaptive_avg_pool2d_backward(const at::Tensor& grad_output, const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor npu_clear_float_status(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> multilabel_margin_loss_forward_out(const at::Tensor& self, const at::Tensor& target, int64_t reduction,
                                                                                     at::Tensor& output, at::Tensor& is_target) {
        OP_NOT_IMPL
    }
    static at::Tensor take(const at::Tensor& self, const at::Tensor& index) { OP_NOT_IMPL }
    static at::Tensor& norm_out(const at::Tensor& self, const c10::optional<at::Scalar>& p, at::IntArrayRef dim, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& bitwise_or_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& uniform_(at::Tensor& self, double from, double to, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor& hardswish_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& cumsum_out(const at::Tensor& self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& round_(at::Tensor& self, int64_t decimals) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> _pad_packed_sequence(const at::Tensor& data, const at::Tensor& batch_sizes, bool batch_first,
                                                                     const at::Scalar& padding_value, int64_t total_length) {
        OP_NOT_IMPL
    }
    static at::Tensor& sign_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor true_divide(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static void _cummin_helper(const at::Tensor& self, at::Tensor& values, at::Tensor& indices, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor& all_out(const at::Tensor& self, int64_t dim, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& mish_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& eq_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& avg_pool2d_out(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode,
                                      bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& normal_(at::Tensor& self, double mean, double std, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor& hardsigmoid_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor avg_pool2d_backward(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                          at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> batch_norm_backward_reduce(const at::Tensor& grad_out, const at::Tensor& input,
                                                                                                   const at::Tensor& mean, const at::Tensor& invstd,
                                                                                                   const c10::optional<at::Tensor>& weight, bool input_g,
                                                                                                   bool weight_g, bool bias_g) {
        OP_NOT_IMPL
    }
    static at::Tensor cumprod(const at::Tensor& self, int64_t dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor asin(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor triu_indices(int64_t row, int64_t col, int64_t offset, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                   c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor log_sigmoid(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& maximum_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor cos(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& silu_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& image_normalize_(at::Tensor& self, c10::optional<at::ArrayRef<double>> mean, c10::optional<at::ArrayRef<double>> variance,
                                        int64_t dtype) {
        OP_NOT_IMPL
    }
    static at::Tensor elu_backward(const at::Tensor& grad_output, const at::Scalar& alpha, const at::Scalar& scale, const at::Scalar& input_scale,
                                   bool is_result, const at::Tensor& self_or_result) {
        OP_NOT_IMPL
    }
    static at::Tensor& npu_sort_v2_out(const at::Tensor& self, int64_t dim, bool descending, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor lift_fresh_copy(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor rsub(const at::Tensor& self, const at::Scalar& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor _conv_depthwise2d(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor>& bias,
                                        at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor&, at::Tensor&> min_out(const at::Tensor& self, int64_t dim, bool keepdim, at::Tensor& min, at::Tensor& min_indices) {
        OP_NOT_IMPL
    }
    static at::Tensor clamp(const at::Tensor& self, const c10::optional<at::Tensor>& min, const c10::optional<at::Tensor>& max) { OP_NOT_IMPL }
    static at::Tensor npu_scatter(const at::Tensor& self, const at::Tensor& indices, const at::Tensor& updates, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor& bitwise_not_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor empty_with_format(at::IntArrayRef size, c10::optional<at::DimnameList> names, c10::optional<at::ScalarType> dtype,
                                        c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, int64_t acl_format);
    static at::Tensor& reciprocal_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor soft_margin_loss_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target, int64_t reduction) {
        OP_NOT_IMPL
    }
    static at::Tensor& sum_out(const at::Tensor& self, at::DimnameList dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> kthvalue_out(const at::Tensor& self, int64_t k, int64_t dim, bool keepdim, at::Tensor& values,
                                                               at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor& take_out(const at::Tensor& self, const at::Tensor& index, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor embedding_backward(const at::Tensor& grad, const at::Tensor& indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq,
                                         bool sparse) {
        OP_NOT_IMPL
    }
    static at::Tensor& rsqrt_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& ceil_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor abs(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor all(const at::Tensor& self, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& fill_diagonal_(at::Tensor& self, const at::Scalar& fill_value, bool wrap) { OP_NOT_IMPL }
    static at::Tensor& soft_margin_loss_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target, int64_t reduction,
                                                     at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor clamp_max(const at::Tensor& self, const at::Scalar& max) { OP_NOT_IMPL }
    static at::Tensor& scatter_add_(at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& src) { OP_NOT_IMPL }
    static at::Tensor select_backward(const at::Tensor& grad_output, c10::SymIntArrayRef input_sizes, int64_t dim, c10::SymInt index) { OP_NOT_IMPL }
    static at::Tensor& randperm_out(int64_t n, c10::optional<at::Generator> generator, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_addcmul(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar& value) {
        OP_NOT_IMPL
    }
    static at::Tensor var(const at::Tensor& self, at::OptionalIntArrayRef dim, bool unbiased, bool keepdim) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> _linalg_svd_out(const at::Tensor& A, bool full_matrices, bool compute_uv,
                                                                               c10::optional<c10::string_view> driver, at::Tensor& U, at::Tensor& S,
                                                                               at::Tensor& Vh) {
        OP_NOT_IMPL
    }
    static at::Tensor dropout(const at::Tensor& input, double p, bool train) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> _embedding_bag_forward_only(const at::Tensor& weight, const at::Tensor& indices,
                                                                                                    const at::Tensor& offsets, bool scale_grad_by_freq,
                                                                                                    int64_t mode, bool sparse,
                                                                                                    const c10::optional<at::Tensor>& per_sample_weights,
                                                                                                    bool include_last_offset, int64_t padding_idx) {
        OP_NOT_IMPL
    }
    static at::Tensor std(const at::Tensor& self, at::OptionalIntArrayRef dim, c10::optional<int64_t> correction, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor _softmax_backward_data(const at::Tensor& grad_output, const at::Tensor& output, int64_t dim, at::ScalarType input_dtype) { OP_NOT_IMPL }
    static at::Tensor multinomial(const at::Tensor& self, int64_t num_samples, bool replacement, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor searchsorted(const at::Tensor& sorted_sequence, const at::Scalar& self, bool out_int32, bool right, c10::optional<c10::string_view> side,
                                   const c10::optional<at::Tensor>& sorter) {
        OP_NOT_IMPL
    }
    static at::Tensor& glu_out(const at::Tensor& self, int64_t dim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& log_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& soft_margin_loss_out(const at::Tensor& self, const at::Tensor& target, int64_t reduction, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& set_(at::Tensor& self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) { OP_NOT_IMPL }
    static at::Tensor& _slow_conv2d_forward_out(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size,
                                                const c10::optional<at::Tensor>& bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor& output) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_stride_copy(const at::Tensor& self, at::IntArrayRef shape, at::IntArrayRef stride, const at::Scalar& storage_offset) { OP_NOT_IMPL }
    static at::Tensor crop_and_resize(const at::Tensor& self, c10::optional<at::ArrayRef<double>> boxes, at::IntArrayRef box_index, at::IntArrayRef crop_size,
                                      double extrapolation_value, c10::string_view method) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_lstm_cell_backward(
        const c10::optional<at::Tensor>& grady, const c10::optional<at::Tensor>& gradh, const c10::optional<at::Tensor>& gradc, const at::Tensor& input,
        const at::Tensor& w_ih, const at::Tensor& w_hh, const at::Tensor& h, const at::Tensor& c, const at::Tensor& y_output, const at::Tensor& h_output,
        const at::Tensor& c_output, const at::Tensor& i, const at::Tensor& j, const at::Tensor& f, const at::Tensor& o, const at::Tensor& tanhc) {
        OP_NOT_IMPL
    }
    static at::Tensor& var_out(const at::Tensor& self, at::OptionalIntArrayRef dim, c10::optional<int64_t> correction, bool keepdim, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& addbmm_out(const at::Tensor& self, const at::Tensor& batch1, const at::Tensor& batch2, const at::Scalar& beta, const at::Scalar& alpha,
                                  at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor eye(int64_t n, int64_t m, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                          c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& remainder_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_rotary_mul(const at::Tensor& self, const at::Tensor& r1, const at::Tensor& r2) { OP_NOT_IMPL }
    static bool check_match(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> min_out(const at::Tensor& self, at::Dimname dim, bool keepdim, at::Tensor& min, at::Tensor& min_indices) {
        OP_NOT_IMPL
    }
    static at::Tensor& vdot_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    __attribute__((__visibility__("default"))) static at::Tensor npu_format_cast(const at::Tensor& self, int64_t acl_format) { OP_NOT_IMPL }
    static at::Tensor silu(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor convolution_overrideable(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                               at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding,
                                               int64_t groups) {
        OP_NOT_IMPL
    }
    static at::Tensor atan(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor batch_norm_backward_elemt(const at::Tensor& grad_out, const at::Tensor& input, const at::Tensor& mean, const at::Tensor& invstd,
                                                const c10::optional<at::Tensor>& weight, const at::Tensor& mean_dy, const at::Tensor& mean_dy_xmu,
                                                const at::Tensor& count) {
        OP_NOT_IMPL
    }
    static at::Tensor sinc(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor normal(const at::Tensor& mean, double std, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor& avg_pool3d_out(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode,
                                      bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& mm_out(const at::Tensor& self, const at::Tensor& mat2, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& index_fill_(at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor new_empty_strided(const at::Tensor& self, c10::SymIntArrayRef size, c10::SymIntArrayRef stride, c10::optional<at::ScalarType> dtype,
                                        c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor exp(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> nll_loss2d_forward(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight,
                                                                   int64_t reduction, int64_t ignore_index) {
        OP_NOT_IMPL
    }
    static at::Tensor& max_pool2d_with_indices_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef kernel_size,
                                                            at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode,
                                                            const at::Tensor& indices, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    __attribute__((__visibility__("default"))) static at::Tensor npu_format_cast(const at::Tensor& self, const at::Tensor& dst) { OP_NOT_IMPL }
    static at::Tensor npu_ciou(const at::Tensor& self, const at::Tensor& gtboxes, bool trans, bool is_cross, int64_t mode, bool atan_sub_flag) { OP_NOT_IMPL }
    static at::Tensor& xlogy_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& tan_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor smooth_l1_loss(const at::Tensor& self, const at::Tensor& target, int64_t reduction, double beta) { OP_NOT_IMPL }
    static at::Tensor all(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor isin(const at::Tensor& elements, const at::Scalar& test_element, bool assume_unique, bool invert) { OP_NOT_IMPL }
    static at::Tensor conv_transpose2d(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                       at::IntArrayRef padding, at::IntArrayRef output_padding, int64_t groups, at::IntArrayRef dilation) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> grid_sampler_2d_backward(const at::Tensor& grad_output, const at::Tensor& input, const at::Tensor& grid,
                                                                         int64_t interpolation_mode, int64_t padding_mode, bool align_corners,
                                                                         ::std::array<bool, 2> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_silu_backward(const at::Tensor& grad_output, const at::Tensor& x0, const at::Tensor& x1) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_mul(at::TensorList tensors1, at::TensorList tensors2) { OP_NOT_IMPL }
    static at::Tensor& std_out(const at::Tensor& self, at::DimnameList dim, c10::optional<int64_t> correction, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& baddbmm_out(const at::Tensor& self, const at::Tensor& batch1, const at::Tensor& batch2, const at::Scalar& beta, const at::Scalar& alpha,
                                   at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& addcdiv_(at::Tensor& self, const at::Tensor& tensor1, const at::Tensor& tensor2, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor batch_norm_elemt(const at::Tensor& input, const c10::optional<at::Tensor>& weight, const c10::optional<at::Tensor>& bias,
                                       const at::Tensor& mean, const at::Tensor& invstd, double eps) {
        OP_NOT_IMPL
    }
    static at::Tensor range(const at::Scalar& start, const at::Scalar& end, const at::Scalar& step, c10::optional<at::ScalarType> dtype,
                            c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& addbmm_(at::Tensor& self, const at::Tensor& batch1, const at::Tensor& batch2, const at::Scalar& beta, const at::Scalar& alpha) {
        OP_NOT_IMPL
    }
    static at::Tensor& slow_conv_transpose2d_out(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size,
                                                 const c10::optional<at::Tensor>& bias, at::IntArrayRef stride, at::IntArrayRef padding,
                                                 at::IntArrayRef output_padding, at::IntArrayRef dilation, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor&, at::Tensor&> median_out(const at::Tensor& self, at::Dimname dim, bool keepdim, at::Tensor& values, at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_alloc_float_status(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& ones_out(at::IntArrayRef size, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& frac_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static void _foreach_addcdiv_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) { OP_NOT_IMPL }
    static at::Tensor complex(const at::Tensor& real, const at::Tensor& imag) { OP_NOT_IMPL }
    static at::Tensor& reflection_pad2d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef padding, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor max(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_fused_attention_score_grad(const at::Tensor& grad_output, const at::Tensor& softmax_output,
                                                                                           const at::Tensor& query_layer, const at::Tensor& key_layer,
                                                                                           const at::Tensor& value_layer, const at::Tensor& mask,
                                                                                           const at::Scalar& scale, double keep_prob, bool query_transpose,
                                                                                           bool key_transpose, bool value_transpose, bool dx_transpose) {
        OP_NOT_IMPL
    }
    static at::Tensor& index_put_(at::Tensor& self, const c10::List<c10::optional<at::Tensor>>& indices, const at::Tensor& values, bool accumulate) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_slice(const at::Tensor& self, at::IntArrayRef offsets, at::IntArrayRef size) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> npu_fused_attention_qkv_grad(const at::Tensor& grad_output_query, const at::Tensor& grad_output_key,
                                                                  const at::Tensor& grad_output_value, const at::Tensor& query_kernel,
                                                                  const at::Tensor& key_kernel, const at::Tensor& value_kernel, const at::Tensor& hidden_states,
                                                                  const at::Tensor& grad_output_ln) {
        OP_NOT_IMPL
    }
    static void _foreach_add_(at::TensorList self, const at::Scalar& scalar) { OP_NOT_IMPL }
    static bool is_set_to(const at::Tensor& self, const at::Tensor& tensor) { OP_NOT_IMPL }
    static at::Tensor& xlogy_out(const at::Scalar& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor cat(const at::ITensorListRef& tensors, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor clamp_min(const at::Tensor& self, const at::Tensor& min) { OP_NOT_IMPL }
    static at::Tensor& logaddexp2_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor bucketize(const at::Tensor& self, const at::Tensor& boundaries, bool out_int32, bool right) { OP_NOT_IMPL }
    static at::Tensor& addcdiv_out(const at::Tensor& self, const at::Tensor& tensor1, const at::Tensor& tensor2, const at::Scalar& value, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor normal(double mean, const at::Tensor& std, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_add(at::TensorList tensors, const at::Scalar& scalar) { OP_NOT_IMPL }
    static at::Tensor col2im(const at::Tensor& self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation,
                             at::IntArrayRef padding, at::IntArrayRef stride) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_conv_transpose2d(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef padding,
                                           at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups) {
        OP_NOT_IMPL
    }
    static at::Tensor& erf_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& floor_divide_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> npu_apply_adam_w_out(const at::Scalar& beta1_power, const at::Scalar& beta2_power,
                                                                                    const at::Scalar& lr, const at::Scalar& weight_decay,
                                                                                    const at::Scalar& beta1, const at::Scalar& beta2, const at::Scalar& epsilon,
                                                                                    const at::Tensor& grad, const c10::optional<at::Tensor>& max_grad_norm,
                                                                                    c10::optional<bool> amsgrad, c10::optional<bool> maximize, at::Tensor& var,
                                                                                    at::Tensor& m, at::Tensor& v) {
        OP_NOT_IMPL
    }
    static at::Tensor& upsample_nearest1d_out(const at::Tensor& self, at::IntArrayRef output_size, c10::optional<double> scales, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& logical_not_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& __irshift__(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor addbmm(const at::Tensor& self, const at::Tensor& batch1, const at::Tensor& batch2, const at::Scalar& beta, const at::Scalar& alpha) {
        OP_NOT_IMPL
    }
    static at::Tensor& norm_out(const at::Tensor& self, const c10::optional<at::Scalar>& p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype,
                                at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor tril_indices(int64_t row, int64_t col, int64_t offset, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                   c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor _dim_arange(const at::Tensor& like, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor& masked_select_out(const at::Tensor& self, const at::Tensor& mask, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& bitwise_xor_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& remainder_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& minimum_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& add_(at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& replication_pad1d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef padding, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor scatter(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor npu_convolution(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                      at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
        OP_NOT_IMPL
    }
    static at::Tensor& div_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> triangular_solve_out(const at::Tensor& self, const at::Tensor& A, bool upper, bool transpose,
                                                                       bool unitriangular, at::Tensor& X, at::Tensor& M) {
        OP_NOT_IMPL
    }
    static at::Tensor upsample_bilinear2d(const at::Tensor& self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h,
                                          c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static at::Tensor remainder(const at::Scalar& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor div(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& mish_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& floor_divide_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_nms_with_mask(const at::Tensor& input, const at::Scalar& iou_threshold) { OP_NOT_IMPL }
    static at::Tensor& sin_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor real(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& ge_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& le_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor any(const at::Tensor& self, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& addmv_(at::Tensor& self, const at::Tensor& mat, const at::Tensor& vec, const at::Scalar& beta, const at::Scalar& alpha) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> matmul_backward(const at::Tensor& grad, const at::Tensor& self, const at::Tensor& other,
                                                                ::std::array<bool, 2> mask) {
        OP_NOT_IMPL
    }
    static at::Tensor& logical_or_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& diag_out(const at::Tensor& self, int64_t diagonal, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor avg_pool3d_backward(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                          at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> _prelu_kernel_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& weight) {
        OP_NOT_IMPL
    }
    static at::Tensor pow(const at::Tensor& self, const at::Scalar& exponent) { OP_NOT_IMPL }
    static at::Tensor& bucketize_out(const at::Tensor& self, const at::Tensor& boundaries, bool out_int32, bool right, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor acosh(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& elu_(at::Tensor& self, const at::Scalar& alpha, const at::Scalar& scale, const at::Scalar& input_scale) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> kthvalue_out(const at::Tensor& self, int64_t k, at::Dimname dim, bool keepdim, at::Tensor& values,
                                                               at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> native_batch_norm_out(const at::Tensor& input, const c10::optional<at::Tensor>& weight,
                                                                                     const c10::optional<at::Tensor>& bias,
                                                                                     const c10::optional<at::Tensor>& running_mean,
                                                                                     const c10::optional<at::Tensor>& running_var, bool training,
                                                                                     double momentum, double eps, at::Tensor& out, at::Tensor& save_mean,
                                                                                     at::Tensor& save_invstd) {
        OP_NOT_IMPL
    }
    static at::Tensor expm1(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& random_(at::Tensor& self, int64_t to, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor slow_conv_dilated2d(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor>& bias,
                                          at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_dropout_with_add_softmax(const at::Tensor& self, const at::Tensor& x1, const at::Scalar& alpha,
                                                                                         double prob, int64_t dim) {
        OP_NOT_IMPL
    }
    static at::Tensor& isin_out(const at::Scalar& element, const at::Tensor& test_elements, bool assume_unique, bool invert, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor fmod(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& exp_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& hardtanh_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Scalar& min_val, const at::Scalar& max_val,
                                             at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& true_divide_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& sigmoid_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> topk_out(const at::Tensor& self, int64_t k, int64_t dim, bool largest, bool sorted, at::Tensor& values,
                                                           at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor repeat_interleave(const at::Tensor& self, const at::Tensor& repeats, c10::optional<int64_t> dim, c10::optional<int64_t> output_size) {
        OP_NOT_IMPL
    }
    static at::Tensor prod(const at::Tensor& self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor& ceil_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& pow_(at::Tensor& self, const at::Scalar& exponent) { OP_NOT_IMPL }
    static at::Tensor& npu_stride_copy_out(const at::Tensor& self, at::IntArrayRef shape, at::IntArrayRef stride, const at::Scalar& storage_offset,
                                           at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor sqrt(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor silu_backward(const at::Tensor& grad_output, const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> _slow_conv2d_backward(const at::Tensor& grad_output, const at::Tensor& self,
                                                                                  const at::Tensor& weight, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                                                                  at::IntArrayRef padding, ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor& mul_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& trunc_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor npu_mish(const at::Tensor& self) { OP_NOT_IMPL }
    static void _foreach_div_(at::TensorList self, at::TensorList other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> _native_batch_norm_legit(const at::Tensor& input, const c10::optional<at::Tensor>& weight,
                                                                                     const c10::optional<at::Tensor>& bias, at::Tensor& running_mean,
                                                                                     at::Tensor& running_var, bool training, double momentum, double eps) {
        OP_NOT_IMPL
    }
    static at::Tensor slow_conv_transpose2d(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size,
                                            const c10::optional<at::Tensor>& bias, at::IntArrayRef stride, at::IntArrayRef padding,
                                            at::IntArrayRef output_padding, at::IntArrayRef dilation) {
        OP_NOT_IMPL
    }
    static at::Tensor _adaptive_avg_pool3d_backward(const at::Tensor& grad_output, const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& clamp_min_(at::Tensor& self, const at::Tensor& min) { OP_NOT_IMPL }
    static at::Tensor& scatter_(at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& src) { OP_NOT_IMPL }
    static at::Tensor flip(const at::Tensor& self, at::IntArrayRef dims) { OP_NOT_IMPL }
    static void _foreach_div_(at::TensorList self, at::ArrayRef<at::Scalar> scalars) { OP_NOT_IMPL }
    static at::Tensor ge(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor eq(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static void _foreach_add_(at::TensorList self, at::TensorList other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& mul_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor mse_loss(const at::Tensor& self, const at::Tensor& target, int64_t reduction) { OP_NOT_IMPL }
    static at::Tensor bitwise_xor(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& true_divide_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& triu_out(const at::Tensor& self, int64_t diagonal, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& celu_(at::Tensor& self, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor ctc_loss(const at::Tensor& log_probs, const at::Tensor& targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths,
                               int64_t blank, int64_t reduction, bool zero_infinity) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> std_mean(const at::Tensor& self, at::OptionalIntArrayRef dim, c10::optional<int64_t> correction, bool keepdim) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> max_pool2d_with_indices(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                                                        at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_bmmV2(const at::Tensor& self, const at::Tensor& mat2, at::IntArrayRef output_sizes) { OP_NOT_IMPL }
    static at::Tensor erfinv(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_rotary_mul_backward(const at::Tensor& grad, const at::Tensor& self, const at::Tensor& r1,
                                                                                    const at::Tensor& r2) {
        OP_NOT_IMPL
    }
    static at::Tensor& avg_pool3d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                               at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override,
                                               at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static ::std::vector<at::Tensor> _foreach_addcdiv(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
        OP_NOT_IMPL
    }
    static at::Tensor hann_window(int64_t window_length, bool periodic, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                  c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& log2_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> median(const at::Tensor& self, at::Dimname dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& cumprod_(at::Tensor& self, int64_t dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor& silu_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& logical_or_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor ne(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& gt_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> nll_loss_forward(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight,
                                                                 int64_t reduction, int64_t ignore_index) {
        OP_NOT_IMPL
    }
    static at::Tensor soft_margin_loss(const at::Tensor& self, const at::Tensor& target, int64_t reduction) { OP_NOT_IMPL }
    static at::Tensor npu_indexing(const at::Tensor& self, at::IntArrayRef begin, at::IntArrayRef end, at::IntArrayRef strides, int64_t begin_mask,
                                   int64_t end_mask, int64_t ellipsis_mask, int64_t new_axis_mask, int64_t shrink_axis_mask) {
        OP_NOT_IMPL
    }
    static void _foreach_sqrt_(at::TensorList self) { OP_NOT_IMPL }
    static at::Tensor format_contiguous(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_div(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) { OP_NOT_IMPL }
    static at::Tensor ge(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor hamming_window(int64_t window_length, bool periodic, double alpha, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                     c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& amin_out(const at::Tensor& self, at::IntArrayRef dim, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor mul(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor sigmoid_backward(const at::Tensor& grad_output, const at::Tensor& output) { OP_NOT_IMPL }
    static at::Tensor squeeze(const at::Tensor& self) { OP_NOT_IMPL }
    static void _foreach_mul_(at::TensorList self, at::ArrayRef<at::Scalar> scalars) { OP_NOT_IMPL }
    static at::Tensor adaptive_avg_pool1d(const at::Tensor& self, at::IntArrayRef output_size) { OP_NOT_IMPL }
    static at::Tensor& npu_conv3d_out(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                      at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_iou(const at::Tensor& bboxes, const at::Tensor& gtboxes, int64_t mode) { OP_NOT_IMPL }
    static at::Tensor inverse(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor unfold(const at::Tensor& self, int64_t dimension, int64_t size, int64_t step) { OP_NOT_IMPL }
    static at::Tensor& eye_out(int64_t n, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor median(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor upsample_bicubic2d(const at::Tensor& self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h,
                                         c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static at::Tensor where(const at::Tensor& condition, const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_fused_attention_score_backward(const at::Tensor& grad_output, const at::Tensor& softmax_output,
                                                                                               const at::Tensor& query_layer, const at::Tensor& key_layer,
                                                                                               const at::Tensor& value_layer, const at::Tensor& mask,
                                                                                               const at::Scalar& scale, double keep_prob, bool query_transpose,
                                                                                               bool key_transpose, bool value_transpose, bool dx_transpose) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> max(const at::Tensor& self, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> max_pool3d_with_indices(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                                                        at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> npu_min(const at::Tensor& self, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& std_out(const at::Tensor& self, at::OptionalIntArrayRef dim, bool unbiased, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_one_hot(const at::Tensor& self, int64_t num_classes, int64_t depth, const at::Scalar& on_value, const at::Scalar& off_value) {
        OP_NOT_IMPL
    }
    static at::Tensor& linalg_cross_out(const at::Tensor& self, const at::Tensor& other, int64_t dim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor sign(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> npu_ciou_backward(const at::Tensor& grad, const at::Tensor& bboxes, const at::Tensor& gtboxes,
                                                                  const c10::optional<at::Tensor>& atan_sub, bool trans, bool is_cross, int64_t mode) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_silu(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> log_sigmoid_forward(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> median(const at::Tensor& self, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& sinh_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor bmm(const at::Tensor& self, const at::Tensor& mat2) { OP_NOT_IMPL }
    static at::Tensor& pow_out(const at::Scalar& self, const at::Tensor& exponent, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& logical_xor_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> linalg_qr(const at::Tensor& A, c10::string_view mode) { OP_NOT_IMPL }
    static at::Tensor index_select(const at::Tensor& self, int64_t dim, const at::Tensor& index) { OP_NOT_IMPL }
    static at::Tensor minimum(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor adaptive_avg_pool2d(const at::Tensor& self, at::IntArrayRef output_size) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> max_pool3d_with_indices_out(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
                                                                              at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode,
                                                                              at::Tensor& out, at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_broadcast(const at::Tensor& self, at::IntArrayRef size) { OP_NOT_IMPL }
    static at::Tensor empty_like(const at::Tensor& self, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                 c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
        OP_NOT_IMPL
    }
    static at::Tensor& tril_out(const at::Tensor& self, int64_t diagonal, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor adaptive_avg_pool3d(const at::Tensor& self, at::IntArrayRef output_size) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> batch_norm_stats(const at::Tensor& input, double eps) { OP_NOT_IMPL }
    static at::Tensor& max_unpool3d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& indices, at::IntArrayRef output_size,
                                                 at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor exp2(const at::Tensor& self) { OP_NOT_IMPL }
    static void _amp_foreach_non_finite_check_and_unscale_(at::TensorList self, at::Tensor& found_inf, const at::Tensor& inv_scale) { OP_NOT_IMPL }
    static at::Tensor blackman_window(int64_t window_length, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                      c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& __ior__(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& elu_out(const at::Tensor& self, const at::Scalar& alpha, const at::Scalar& scale, const at::Scalar& input_scale, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_apply_adam(const at::Scalar& beta1_power, const at::Scalar& beta2_power, const at::Scalar& lr,
                                                                           const at::Scalar& beta1, const at::Scalar& beta2, const at::Scalar& epsilon,
                                                                           const at::Tensor& grad, c10::optional<bool> use_locking,
                                                                           c10::optional<bool> use_nesterov) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_softmax_cross_entropy_with_logits(const at::Tensor& self, const at::Tensor& labels) { OP_NOT_IMPL }
    static at::Tensor masked_select(const at::Tensor& self, const at::Tensor& mask) { OP_NOT_IMPL }
    static at::Tensor& __irshift__(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor remainder(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor smooth_l1_loss_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target, int64_t reduction, double beta) {
        OP_NOT_IMPL
    }
    static at::Tensor quantize_per_tensor(const at::Tensor& self, double scale, int64_t zero_point, at::ScalarType dtype) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> convolution_backward_overrideable(const at::Tensor& grad_output, const at::Tensor& input,
                                                                                              const at::Tensor& weight, at::IntArrayRef stride,
                                                                                              at::IntArrayRef padding, at::IntArrayRef dilation,
                                                                                              bool transposed, at::IntArrayRef output_padding, int64_t groups,
                                                                                              ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor tanh_backward(const at::Tensor& grad_output, const at::Tensor& output) { OP_NOT_IMPL }
    static at::Tensor& cos_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& atanh_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& upsample_bicubic2d_out(const at::Tensor& self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h,
                                              c10::optional<double> scales_w, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor roll(const at::Tensor& self, at::IntArrayRef shifts, at::IntArrayRef dims) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> var_mean(const at::Tensor& self, at::OptionalIntArrayRef dim, bool unbiased, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor image_normalize(const at::Tensor& self, c10::optional<at::ArrayRef<double>> mean, c10::optional<at::ArrayRef<double>> variance,
                                      int64_t dtype) {
        OP_NOT_IMPL
    }
    static at::Tensor& sub_(at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor upsample_nearest3d_backward(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                  c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> batch_norm_gather_stats_with_counts(const at::Tensor& input, const at::Tensor& mean, const at::Tensor& invstd,
                                                                                    const c10::optional<at::Tensor>& running_mean,
                                                                                    const c10::optional<at::Tensor>& running_var, double momentum, double eps,
                                                                                    const at::Tensor& counts) {
        OP_NOT_IMPL
    }
    static at::Tensor reverse(const at::Tensor& self, at::IntArrayRef axis) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> npu_fused_attention_layernorm_qkv_fwd(const at::Tensor& x, const at::Tensor& kernel_query, const at::Tensor& kernel_key,
                                                                           const at::Tensor& kernel_value, const at::Tensor& gamma, const at::Tensor& beta,
                                                                           const c10::optional<at::Tensor>& bias_query,
                                                                           const c10::optional<at::Tensor>& bias_key,
                                                                           const c10::optional<at::Tensor>& bias_value, int64_t seq_len, int64_t num_heads,
                                                                           double eps) {
        OP_NOT_IMPL
    }
    static at::Tensor _cdist_backward(const at::Tensor& grad, const at::Tensor& x1, const at::Tensor& x2, double p, const at::Tensor& cdist) { OP_NOT_IMPL }
    static at::Tensor& tril_(at::Tensor& self, int64_t diagonal) { OP_NOT_IMPL }
    static at::Tensor frac(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor index_fill(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& value) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_mul(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) { OP_NOT_IMPL }
    static at::Tensor gather(const at::Tensor& self, int64_t dim, const at::Tensor& index, bool sparse_grad) { OP_NOT_IMPL }
    static at::Tensor max_unpool3d_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& indices, at::IntArrayRef output_size,
                                            at::IntArrayRef stride, at::IntArrayRef padding) {
        OP_NOT_IMPL
    }
    static at::Tensor empty_with_format(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                        c10::optional<at::Device> device, c10::optional<bool> pin_memory, int64_t acl_format);
    static at::Tensor& eye_out(int64_t n, int64_t m, at::Tensor& out);
    static at::Tensor searchsorted(const at::Tensor& sorted_sequence, const at::Tensor& self, bool out_int32, bool right, c10::optional<c10::string_view> side,
                                   const c10::optional<at::Tensor>& sorter) {
        OP_NOT_IMPL
    }
    static at::Tensor _add_relu(const at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& acosh_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor _pin_memory(const at::Tensor& self, c10::optional<at::Device> device) { OP_NOT_IMPL }
    static at::Tensor div(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor to(const at::Tensor& self, at::Device device, at::ScalarType dtype, bool non_blocking, bool copy,
                         c10::optional<at::MemoryFormat> memory_format) {
        OP_NOT_IMPL
    }
    static at::Tensor& replication_pad2d_out(const at::Tensor& self, at::IntArrayRef padding, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> npu_nms_v4(const at::Tensor& self, const at::Tensor& scores, const at::Scalar& max_output_size,
                                                           const at::Tensor& iou_threshold, const at::Tensor& scores_threshold, bool pad_to_max_output_size) {
        OP_NOT_IMPL
    }
    static at::Tensor gt(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor mm(const at::Tensor& self, const at::Tensor& mat2) { OP_NOT_IMPL }
    static at::Tensor lt(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& logical_and_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static void check_memory_overlaps(at::TensorList inputs, at::TensorList outputs) { OP_NOT_IMPL }
    static at::Tensor& upsample_nearest2d_backward_out(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                       c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& __ilshift__(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor _nnpack_spatial_convolution(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias,
                                                  at::IntArrayRef padding, at::IntArrayRef stride) {
        OP_NOT_IMPL
    }
    static at::Tensor& softshrink_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Scalar& lambd, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor matmul(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor mv(const at::Tensor& self, const at::Tensor& vec) { OP_NOT_IMPL }
    static at::Tensor& clamp_max_(at::Tensor& self, const at::Scalar& max) { OP_NOT_IMPL }
    static at::Tensor& searchsorted_out(const at::Tensor& sorted_sequence, const at::Tensor& self, bool out_int32, bool right,
                                        c10::optional<c10::string_view> side, const c10::optional<at::Tensor>& sorter, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor _prelu_kernel(const at::Tensor& self, const at::Tensor& weight) { OP_NOT_IMPL }
    static at::Tensor& gather_out(const at::Tensor& self, at::Dimname dim, const at::Tensor& index, bool sparse_grad, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor log1p(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor grid_sampler_2d(const at::Tensor& input, const at::Tensor& grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
        OP_NOT_IMPL
    }
    static at::Tensor& index_fill_(at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& value) { OP_NOT_IMPL }
    static at::Tensor& bitwise_and_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& gcd_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& mse_loss_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target, int64_t reduction,
                                             at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor gelu_backward(const at::Tensor& grad_output, const at::Tensor& self, c10::string_view approximate) { OP_NOT_IMPL }
    static at::Tensor range(const at::Scalar& start, const at::Scalar& end, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                            c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& bitwise_and_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& nll_loss_out(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight, int64_t reduction,
                                    int64_t ignore_index, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor cumsum(const at::Tensor& self, int64_t dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> median_out(const at::Tensor& self, int64_t dim, bool keepdim, at::Tensor& values, at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor& std_out(const at::Tensor& self, at::DimnameList dim, bool unbiased, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor selu(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> slow_conv_transpose2d_backward(const at::Tensor& grad_output, const at::Tensor& self,
                                                                                           const at::Tensor& weight, at::IntArrayRef kernel_size,
                                                                                           at::IntArrayRef stride, at::IntArrayRef padding,
                                                                                           at::IntArrayRef output_padding, at::IntArrayRef dilation,
                                                                                           ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor& binary_cross_entropy_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target,
                                                         const c10::optional<at::Tensor>& weight, int64_t reduction, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& softplus_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Scalar& beta, const at::Scalar& threshold,
                                             at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& sinh_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& add_(at::Tensor& self, const at::Scalar& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor addcmul(const at::Tensor& self, const at::Tensor& tensor1, const at::Tensor& tensor2, const at::Scalar& value) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> _linalg_svd(const at::Tensor& A, bool full_matrices, bool compute_uv,
                                                                        c10::optional<c10::string_view> driver) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_rotated_overlaps(const at::Tensor& self, const at::Tensor& query_boxes, bool trans) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> _embedding_bag(const at::Tensor& weight, const at::Tensor& indices,
                                                                                       const at::Tensor& offsets, bool scale_grad_by_freq, int64_t mode,
                                                                                       bool sparse, const c10::optional<at::Tensor>& per_sample_weights,
                                                                                       bool include_last_offset, int64_t padding_idx) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> native_group_norm(const at::Tensor& input, const c10::optional<at::Tensor>& weight,
                                                                              const c10::optional<at::Tensor>& bias, int64_t N, int64_t C, int64_t HxW,
                                                                              int64_t group, double eps) {
        OP_NOT_IMPL
    }
    static at::Tensor& all_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor reciprocal(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& bmm_out(const at::Tensor& self, const at::Tensor& mat2, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor upsample_nearest2d(const at::Tensor& self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static at::Tensor nll_loss2d(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight, int64_t reduction,
                                 int64_t ignore_index) {
        OP_NOT_IMPL
    }
    static at::Tensor replication_pad2d(const at::Tensor& self, at::IntArrayRef padding) { OP_NOT_IMPL }
    static at::Tensor& neg_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor hamming_window(int64_t window_length, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                     c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor norm(const at::Tensor& self, const c10::optional<at::Scalar>& p, at::ScalarType dtype) { OP_NOT_IMPL }
    __attribute__((__visibility__("default"))) static at::Tensor& npu_slice_out(const at::Tensor& self, at::IntArrayRef offsets, at::IntArrayRef size,
                                                                                at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& sinc_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor rrelu_with_noise(const at::Tensor& self, const at::Tensor& noise, const at::Scalar& lower, const at::Scalar& upper, bool training,
                                       c10::optional<at::Generator> generator) {
        OP_NOT_IMPL
    }
    static at::Tensor& masked_fill_(at::Tensor& self, const at::Tensor& mask, const at::Scalar& value) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_add(at::TensorList tensors1, at::TensorList tensors2, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& mv_out(const at::Tensor& self, const at::Tensor& vec, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> min(const at::Tensor& self, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& __ior__(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& any_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor maximum(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& max_unpool2d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& indices, at::IntArrayRef output_size,
                                                 at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& upsample_nearest1d_backward_out(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                       c10::optional<double> scales, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& nll_loss_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target,
                                             const c10::optional<at::Tensor>& weight, int64_t reduction, int64_t ignore_index, const at::Tensor& total_weight,
                                             at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& npu_silu_(at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> _dropout_with_byte_mask(const at::Tensor& self, double p) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> sort_out(const at::Tensor& self, int64_t dim, bool descending, at::Tensor& values, at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor& fill_(at::Tensor& self, const at::Tensor& value) { OP_NOT_IMPL }
    static at::Tensor _npu_format_cast(const at::Tensor& self, int64_t acl_format) { OP_NOT_IMPL }
    static at::Tensor sinh(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor index_put(const at::Tensor& self, const c10::List<c10::optional<at::Tensor>>& indices, const at::Tensor& values, bool accumulate) {
        OP_NOT_IMPL
    }
    static at::Tensor& threshold_out(const at::Tensor& self, const at::Scalar& threshold, const at::Scalar& value, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& cumprod_out(const at::Tensor& self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& logspace_out(const at::Scalar& start, const at::Scalar& end, int64_t steps, double base, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& upsample_linear1d_out(const at::Tensor& self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales,
                                             at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor hardswish_backward(const at::Tensor& grad_output, const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& isposinf_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor gt(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& arange_out(const at::Scalar& start, const at::Scalar& end, const at::Scalar& step, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor full(at::IntArrayRef size, const at::Scalar& fill_value, c10::optional<at::DimnameList> names, c10::optional<at::ScalarType> dtype,
                           c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& nll_loss2d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target,
                                               const c10::optional<at::Tensor>& weight, int64_t reduction, int64_t ignore_index, const at::Tensor& total_weight,
                                               at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& elu_backward_out(const at::Tensor& grad_output, const at::Scalar& alpha, const at::Scalar& scale, const at::Scalar& input_scale,
                                        bool is_result, const at::Tensor& self_or_result, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& atan_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor gelu(const at::Tensor& self, c10::string_view approximate) { OP_NOT_IMPL }
    static at::Tensor& bitwise_and_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& le_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor log_softmax(const at::Tensor& self, int64_t dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor glu_backward(const at::Tensor& grad_output, const at::Tensor& self, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor threshold_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Scalar& threshold) { OP_NOT_IMPL }
    static at::Tensor& leaky_relu_out(const at::Tensor& self, const at::Scalar& negative_slope, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_bert_apply_adam(const at::Scalar& lr, const at::Scalar& beta1, const at::Scalar& beta2,
                                                                                const at::Scalar& epsilon, const at::Tensor& grad,
                                                                                const at::Scalar& max_grad_norm, const at::Scalar& global_grad_norm,
                                                                                const at::Scalar& weight_decay, const c10::optional<at::Scalar>& step_size,
                                                                                int64_t adam_mode) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_dropout_backward(const at::Tensor& grad_output, const at::Tensor& mask, double p) { OP_NOT_IMPL }
    static at::Tensor index(const at::Tensor& self, const c10::List<c10::optional<at::Tensor>>& indices) { OP_NOT_IMPL }
    static at::Tensor logsumexp(const at::Tensor& self, at::IntArrayRef dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor rsub(const at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& fmod_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& one_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor npu_layer_norm_eval(const at::Tensor& input, at::IntArrayRef normalized_shape, const c10::optional<at::Tensor>& weight,
                                          const c10::optional<at::Tensor>& bias, double eps) {
        OP_NOT_IMPL
    }
    static at::Tensor max_unpool2d_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& indices, at::IntArrayRef output_size) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_batch_nms(const at::Tensor& self, const at::Tensor& scores, double score_threshold,
                                                                                      double iou_threshold, int64_t max_size_per_class, int64_t max_total_size,
                                                                                      bool change_coordinate_frame, bool transpose_box) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> npu_nms_rotated(const at::Tensor& self, const at::Tensor& scores, double iou_threshold, double scores_threshold,
                                                                int64_t max_output_size, int64_t mode) {
        OP_NOT_IMPL
    }
    static at::Tensor& masked_scatter_(at::Tensor& self, const at::Tensor& mask, const at::Tensor& source) { OP_NOT_IMPL }
    static at::Tensor& erfc_(at::Tensor& self) { OP_NOT_IMPL }
    __attribute__((__visibility__("default"))) static at::Tensor npu_dtype_cast(const at::Tensor& self, at::ScalarType dtype) { OP_NOT_IMPL }
    static at::Tensor asinh(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor as_strided(const at::Tensor& self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset);
    static at::Tensor& sum_out(const at::Tensor& self, at::OptionalIntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& addcmul_out(const at::Tensor& self, const at::Tensor& tensor1, const at::Tensor& tensor2, const at::Scalar& value, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor max_unpool2d(const at::Tensor& self, const at::Tensor& indices, at::IntArrayRef output_size) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, int64_t, int64_t, int64_t> npu_fusion_attention(
        const at::Tensor& query, const at::Tensor& key, const at::Tensor& value, int64_t head_num, c10::string_view input_layout,
        const c10::optional<at::Tensor>& pse, const c10::optional<at::Tensor>& padding_mask, const c10::optional<at::Tensor>& atten_mask, double scale,
        double keep_prob, int64_t pre_tockens, int64_t next_tockens, int64_t inner_precise, bool gen_mask_parallel, bool sync) {
        OP_NOT_IMPL
    }
    static at::Tensor xlogy(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& exp2_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor empty(c10::SymIntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                            c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format);
    static at::Tensor diag_embed(const at::Tensor& self, int64_t offset, int64_t dim1, int64_t dim2) { OP_NOT_IMPL }
    static at::Tensor& scatter_(at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor max_pool3d_with_indices_backward(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef kernel_size,
                                                       at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode,
                                                       const at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor _log_softmax_backward_data(const at::Tensor& grad_output, const at::Tensor& output, int64_t dim, at::ScalarType input_dtype) {
        OP_NOT_IMPL
    }
    static at::Tensor& round_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor npu_stride_add(const at::Tensor& self, const at::Tensor& other, const at::Scalar& offset1, const at::Scalar& offset2,
                                     const at::Scalar& c1_len) {
        OP_NOT_IMPL
    }
    static at::Tensor nll_loss2d_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target,
                                          const c10::optional<at::Tensor>& weight, int64_t reduction, int64_t ignore_index, const at::Tensor& total_weight) {
        OP_NOT_IMPL
    }
    static at::Tensor native_dropout_backward(const at::Tensor& grad_output, const at::Tensor& mask, double scale) { OP_NOT_IMPL }
    static at::Tensor& cumprod_out(const at::Tensor& self, at::Dimname dim, c10::optional<at::ScalarType> dtype, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& min_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& add_out(const at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor bartlett_window(int64_t window_length, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                      c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& stack_out(at::TensorList tensors, int64_t dim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor norm(const at::Tensor& self, const c10::optional<at::Scalar>& p, at::IntArrayRef dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& atan2_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor multilabel_margin_loss(const at::Tensor& self, const at::Tensor& target, int64_t reduction) { OP_NOT_IMPL }
    static at::Tensor& clamp_(at::Tensor& self, const c10::optional<at::Tensor>& min, const c10::optional<at::Tensor>& max) { OP_NOT_IMPL }
    static at::Tensor affine_grid_generator(const at::Tensor& theta, at::IntArrayRef size, bool align_corners) { OP_NOT_IMPL }
    static at::Tensor npu_scaled_masked_softmax(const at::Tensor& x, const at::Tensor& mask, const at::Scalar& scale, bool fixed_triu_mask) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> kthvalue(const at::Tensor& self, int64_t k, at::Dimname dim, bool keepdim) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> npu_dropout_do_mask(const at::Tensor& self, const at::Tensor& mask, double p) { OP_NOT_IMPL }
    static at::Tensor clamp(const at::Tensor& self, const c10::optional<at::Scalar>& min, const c10::optional<at::Scalar>& max) { OP_NOT_IMPL }
    static at::Tensor& logical_not_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& log2_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& adaptive_max_pool2d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& indices,
                                                        at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& bernoulli_out(const at::Tensor& self, c10::optional<at::Generator> generator, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor hardswish(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& set_(at::Tensor& self, const at::Tensor& source) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> var_mean(const at::Tensor& self, at::DimnameList dim, bool unbiased, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor remainder(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor npu_convolution_transpose(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias,
                                                at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation,
                                                int64_t groups) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> _symeig_helper(const at::Tensor& self, bool eigenvectors, bool upper) { OP_NOT_IMPL }
    static at::Tensor& smooth_l1_loss_out(const at::Tensor& self, const at::Tensor& target, int64_t reduction, double beta, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& mul_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor div(const at::Tensor& self, const at::Tensor& other, c10::optional<c10::string_view> rounding_mode) { OP_NOT_IMPL }
    static at::Tensor embedding_dense_backward(const at::Tensor& grad_output, const at::Tensor& indices, int64_t num_weights, int64_t padding_idx,
                                               bool scale_grad_by_freq) {
        OP_NOT_IMPL
    }
    static at::Tensor ne(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> lstm(const at::Tensor& data, const at::Tensor& batch_sizes, at::TensorList hx,
                                                                 at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train,
                                                                 bool bidirectional) {
        OP_NOT_IMPL
    }
    static at::Tensor zeros(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                            c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor hann_window(int64_t window_length, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                  c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor reflection_pad2d(const at::Tensor& self, at::IntArrayRef padding) { OP_NOT_IMPL }
    static at::Tensor& clamp_min_out(const at::Tensor& self, const at::Scalar& min, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor stack(at::TensorList tensors, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor trunc(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& put_(at::Tensor& self, const at::Tensor& index, const at::Tensor& source, bool accumulate) { OP_NOT_IMPL }
    static at::Tensor& remainder_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_ptiou(const at::Tensor& bboxes, const at::Tensor& gtboxes, int64_t mode) { OP_NOT_IMPL }
    static at::Tensor& var_out(const at::Tensor& self, at::OptionalIntArrayRef dim, bool unbiased, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& max_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_softmax_cross_entropy_with_logits_backward(const at::Tensor& grad, const at::Tensor& self, const at::Tensor& labels) { OP_NOT_IMPL }
    static at::Tensor& erf_(at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_deformable_conv2dbk(const at::Tensor& input, const at::Tensor& grad_output,
                                                                                                const at::Tensor& offset_out, const at::Tensor& weight,
                                                                                                const at::Tensor& offset, at::IntArrayRef kernel_size,
                                                                                                at::IntArrayRef stride, at::IntArrayRef padding,
                                                                                                at::IntArrayRef dilation, int64_t groups,
                                                                                                int64_t deformable_groups, bool modulated) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_normalize_batch(const at::Tensor& self, const at::Tensor& seq_len, int64_t normalize_type) { OP_NOT_IMPL }
    static at::Tensor pdist(const at::Tensor& self, double p) { OP_NOT_IMPL }
    static at::Tensor upsample_bicubic2d_backward(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners,
                                                  c10::optional<double> scales_h, c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static at::Tensor& upsample_nearest2d_out(const at::Tensor& self, at::IntArrayRef output_size, c10::optional<double> scales_h,
                                              c10::optional<double> scales_w, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& div_(at::Tensor& self, const at::Scalar& other, c10::optional<c10::string_view> rounding_mode) { OP_NOT_IMPL }
    static at::Tensor var(const at::Tensor& self, at::OptionalIntArrayRef dim, c10::optional<int64_t> correction, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& random_(at::Tensor& self, int64_t from, c10::optional<int64_t> to, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor embedding(const at::Tensor& weight, const at::Tensor& indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) { OP_NOT_IMPL }
    static at::Tensor triu(const at::Tensor& self, int64_t diagonal) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> kthvalue(const at::Tensor& self, int64_t k, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& isneginf_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> npu_diou_backward(const at::Tensor& grad, const at::Tensor& bboxes, const at::Tensor& gtboxes, bool trans,
                                                                  bool is_cross, int64_t mode) {
        OP_NOT_IMPL
    }
    static at::Tensor& max_unpool2d_out(const at::Tensor& self, const at::Tensor& indices, at::IntArrayRef output_size, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_addcmul(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
        OP_NOT_IMPL
    }
    static at::Tensor& xlogy_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor logsumexp(const at::Tensor& self, at::DimnameList dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor convolution(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                  at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups) {
        OP_NOT_IMPL
    }
    static at::Tensor tanh(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_lstm_data(
        const at::Tensor& input, const at::Tensor& batch_sizes, const at::Tensor& weight, const at::Tensor& bias, const at::Tensor& seq_mask,
        const at::Tensor& h, const at::Tensor& c, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first,
        bool flag_seq, bool direction) {
        OP_NOT_IMPL
    }
    static at::Tensor diag(const at::Tensor& self, int64_t diagonal) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> native_dropout(const at::Tensor& input, double p, c10::optional<bool> train) { OP_NOT_IMPL }
    static at::Tensor view(const at::Tensor& self, at::IntArrayRef size) { OP_NOT_IMPL }
    static at::Tensor& cosh_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor ones_like(const at::Tensor& self, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                                c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
        OP_NOT_IMPL
    }
    static at::Tensor& lt_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& triu_(at::Tensor& self, int64_t diagonal) { OP_NOT_IMPL }
    static at::Tensor acos(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor log2(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor _pdist_forward(const at::Tensor& self, double p) { OP_NOT_IMPL }
    static at::Tensor nll_loss(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight, int64_t reduction,
                               int64_t ignore_index) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> min(const at::Tensor& self, at::Dimname dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor ones(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                           c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& neg_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor conv_transpose3d(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                       at::IntArrayRef padding, at::IntArrayRef output_padding, int64_t groups, at::IntArrayRef dilation) {
        OP_NOT_IMPL
    }
    static at::Tensor bitwise_xor(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& embedding_renorm_(at::Tensor& self, const at::Tensor& indices, double max_norm, double norm_type) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> var_mean(const at::Tensor& self, at::OptionalIntArrayRef dim, c10::optional<int64_t> correction, bool keepdim) {
        OP_NOT_IMPL
    }
    static at::Tensor scatter_add(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& src) { OP_NOT_IMPL }
    static at::Tensor& clamp_max_out(const at::Tensor& self, const at::Tensor& max, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> triangular_solve(const at::Tensor& self, const at::Tensor& A, bool upper, bool transpose, bool unitriangular) {
        OP_NOT_IMPL
    }
    static at::Tensor contiguous(const at::Tensor& self, at::MemoryFormat memory_format);
    static at::Tensor& rsqrt_(at::Tensor& self) { OP_NOT_IMPL }
    static void _foreach_addcmul_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar& value) { OP_NOT_IMPL }
    static bool _amp_foreach_non_finite_check(at::TensorList scaled_grads) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> npu_bert_apply_adam_out(const at::Scalar& lr, const at::Scalar& beta1, const at::Scalar& beta2,
                                                                                       const at::Scalar& epsilon, const at::Tensor& grad,
                                                                                       const at::Scalar& max_grad_norm, const at::Scalar& global_grad_norm,
                                                                                       const at::Scalar& weight_decay,
                                                                                       const c10::optional<at::Scalar>& step_size, int64_t adam_mode,
                                                                                       at::Tensor& var, at::Tensor& m, at::Tensor& v) {
        OP_NOT_IMPL
    }
    static at::Tensor binary_cross_entropy(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight, int64_t reduction) {
        OP_NOT_IMPL
    }
    static bool equal(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor relu(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor logical_and(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor argsort(const at::Tensor& self, at::Dimname dim, bool descending) { OP_NOT_IMPL }
    static at::Tensor& gt_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& log_sigmoid_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& buffer, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& addcmul_(at::Tensor& self, const at::Tensor& tensor1, const at::Tensor& tensor2, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor& ne_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& reflection_pad2d_out(const at::Tensor& self, at::IntArrayRef padding, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& round_out(const at::Tensor& self, int64_t decimals, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor sub(const at::Tensor& self, const at::Scalar& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor min(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& complex_out(const at::Tensor& real, const at::Tensor& imag, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& isin_out(const at::Tensor& elements, const at::Scalar& test_element, bool assume_unique, bool invert, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& lt_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_ps_roi_pooling(const at::Tensor& self, const at::Tensor& rois, double spatial_scale, int64_t group_size, int64_t output_dim) {
        OP_NOT_IMPL
    }
    static at::Tensor& rrelu_with_noise_out(const at::Tensor& self, const at::Tensor& noise, const at::Scalar& lower, const at::Scalar& upper, bool training,
                                            c10::optional<at::Generator> generator, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor _weight_norm(const at::Tensor& v, const at::Tensor& g, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor pow(const at::Tensor& self, const at::Tensor& exponent) { OP_NOT_IMPL }
    static at::Tensor sum(const at::Tensor& self, at::OptionalIntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> unique_consecutive(const at::Tensor& self, bool return_inverse, bool return_counts,
                                                                               c10::optional<int64_t> dim) {
        OP_NOT_IMPL
    }
    static at::Tensor& div_out(const at::Tensor& self, const at::Tensor& other, c10::optional<c10::string_view> rounding_mode, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& xlogy_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& erfinv_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& atan2_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_add(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> lstm(const at::Tensor& input, at::TensorList hx, at::TensorList params, bool has_biases,
                                                                 int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
        OP_NOT_IMPL
    }
    static ::std::vector<at::Tensor> _foreach_addcdiv(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar& value) {
        OP_NOT_IMPL
    }
    static at::Tensor& exp2_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_lstm(
        const at::Tensor& input, const at::Tensor& weight, const at::Tensor& bias, const at::Tensor& seq_mask, const at::Tensor& h, const at::Tensor& c,
        bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, bool flag_seq, bool direction) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> npu_ifmr(const at::Tensor& data, const at::Tensor& data_min, const at::Tensor& data_max,
                                                         const at::Tensor& cumsum, double min_percentile, double max_percentile, double search_start,
                                                         double search_end, double search_step, bool with_offset) {
        OP_NOT_IMPL
    }
    static at::Tensor fast_gelu(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor randperm(int64_t n, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                               c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static int64_t npu_change_data_ptr(const at::Tensor& dst, const at::Tensor& src, int64_t index) { OP_NOT_IMPL }
    static at::Tensor _reshape_alias(const at::Tensor& self, at::IntArrayRef size, at::IntArrayRef stride) { OP_NOT_IMPL }
    static at::Tensor add(const at::Tensor& self, const at::Scalar& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& range_out(const at::Scalar& start, const at::Scalar& end, const at::Scalar& step, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor bitwise_and(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& ne_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor any(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& arange_out(const at::Scalar& end, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& hardtanh_out(const at::Tensor& self, const at::Scalar& min_val, const at::Scalar& max_val, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor hardtanh_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Scalar& min_val, const at::Scalar& max_val) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> npu_max(const at::Tensor& self, int64_t dim, bool keepdim) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> conv_tbc_backward(const at::Tensor& self, const at::Tensor& input, const at::Tensor& weight,
                                                                              const at::Tensor& bias, int64_t pad) {
        OP_NOT_IMPL
    }
    static at::Tensor softshrink(const at::Tensor& self, const at::Scalar& lambd) { OP_NOT_IMPL }
    static at::Tensor& set_(at::Tensor& self, at::Storage source) { OP_NOT_IMPL }
    static void _foreach_addcmul_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) { OP_NOT_IMPL }
    static at::Tensor npu_mish_backward(const at::Tensor& grad, const at::Tensor& input) { OP_NOT_IMPL }
    static at::Tensor constant_pad_nd(const at::Tensor& self, at::IntArrayRef pad, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor npu_anchor_response_flags(const at::Tensor& self, at::IntArrayRef featmap_size, at::IntArrayRef stride, int64_t num_base_anchors) {
        OP_NOT_IMPL
    }
    static at::Tensor squeeze(const at::Tensor& self, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor& upsample_bilinear2d_out(const at::Tensor& self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h,
                                               c10::optional<double> scales_w, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& clamp_(at::Tensor& self, const c10::optional<at::Scalar>& min, const c10::optional<at::Scalar>& max) { OP_NOT_IMPL }
    static at::Tensor& cat_out(const at::ITensorListRef& tensors, int64_t dim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor conv_tbc(const at::Tensor& self, const at::Tensor& weight, const at::Tensor& bias, int64_t pad) { OP_NOT_IMPL }
    static at::Tensor& div_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor npu_giou(const at::Tensor& self, const at::Tensor& gtboxes, bool trans, bool is_cross, int64_t mode) { OP_NOT_IMPL }
    static at::Tensor& pow_(at::Tensor& self, const at::Tensor& exponent) { OP_NOT_IMPL }
    static at::Tensor& normal_out(double mean, double std, at::IntArrayRef size, c10::optional<at::Generator> generator, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& var_out(const at::Tensor& self, at::DimnameList dim, bool unbiased, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> _ctc_loss(const at::Tensor& log_probs, const at::Tensor& targets, at::IntArrayRef input_lengths,
                                                          at::IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
        OP_NOT_IMPL
    }
    static at::Tensor gather(const at::Tensor& self, at::Dimname dim, const at::Tensor& index, bool sparse_grad) { OP_NOT_IMPL }
    static at::Tensor& sign_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& matmul_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor empty_strided(c10::SymIntArrayRef size, c10::SymIntArrayRef stride, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                    c10::optional<at::Device> device, c10::optional<bool> pin_memory);
    static at::Tensor& hardshrink_backward_out(const at::Tensor& grad_out, const at::Tensor& self, const at::Scalar& lambd, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor floor_divide(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor lerp(const at::Tensor& self, const at::Tensor& end, const at::Tensor& weight) { OP_NOT_IMPL }
    static at::Tensor pow(const at::Scalar& self, const at::Tensor& exponent) { OP_NOT_IMPL }
    static at::Tensor slow_conv3d(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor>& bias,
                                  at::IntArrayRef stride, at::IntArrayRef padding) {
        OP_NOT_IMPL
    }
    static at::Tensor ones(at::IntArrayRef size, c10::optional<at::DimnameList> names, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                           c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_sign_bits_unpack(const at::Tensor& input, int64_t size, at::ScalarType dtype) { OP_NOT_IMPL }
    static at::Tensor& div_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> nll_loss2d_forward_out(const at::Tensor& self, const at::Tensor& target,
                                                                         const c10::optional<at::Tensor>& weight, int64_t reduction, int64_t ignore_index,
                                                                         at::Tensor& output, at::Tensor& total_weight) {
        OP_NOT_IMPL
    }
    static at::Tensor& frac_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor zeros_like(const at::Tensor& self, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                 c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> _pack_padded_sequence(const at::Tensor& input, const at::Tensor& lengths, bool batch_first) { OP_NOT_IMPL }
    static at::Tensor& upsample_nearest3d_backward_out(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                       c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w,
                                                       at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& where_out(const at::Tensor& condition, const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor repeat(const at::Tensor& self, at::IntArrayRef repeats) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> topk(const at::Tensor& self, int64_t k, int64_t dim, bool largest, bool sorted) { OP_NOT_IMPL }
    static at::Tensor glu(const at::Tensor& self, int64_t dim) { OP_NOT_IMPL }
    static at::Tensor& eq_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor clamp_min(const at::Tensor& self, const at::Scalar& min) { OP_NOT_IMPL }
    static at::Tensor neg(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_lstm_cell(
        const at::Tensor& input, const at::Tensor& w_ih, const at::Tensor& w_hh, const at::Tensor& h, const at::Tensor& c,
        const c10::optional<at::Tensor>& bias) {
        OP_NOT_IMPL
    }
    static at::Tensor& _add_relu_out(const at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor round(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& clamp_max_out(const at::Tensor& self, const at::Scalar& max, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_sub_sample(const at::Tensor& self, int64_t per_images, double positive_fraction) { OP_NOT_IMPL }
    static at::Tensor softshrink_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Scalar& lambd) { OP_NOT_IMPL }
    static at::Tensor hardshrink_backward(const at::Tensor& grad_out, const at::Tensor& self, const at::Scalar& lambd) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> multilabel_margin_loss_forward(const at::Tensor& self, const at::Tensor& target, int64_t reduction) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> native_group_norm_backward(const at::Tensor& grad_out, const at::Tensor& input,
                                                                                       const at::Tensor& mean, const at::Tensor& rstd,
                                                                                       const c10::optional<at::Tensor>& weight, int64_t N, int64_t C,
                                                                                       int64_t HxW, int64_t group, ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static ::std::vector<at::Tensor> where(const at::Tensor& condition) { OP_NOT_IMPL }
    static at::Tensor leaky_relu_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Scalar& negative_slope, bool self_is_result) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> npu_max(const at::Tensor& self, at::Dimname dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor log(const at::Tensor& self) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_div(at::TensorList tensors1, at::TensorList tensors2) { OP_NOT_IMPL }
    static at::Tensor mul(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor adaptive_max_pool2d_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& indices) { OP_NOT_IMPL }
    static at::Tensor prod(const at::Tensor& self, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor scatter_add(const at::Tensor& self, at::Dimname dim, const at::Tensor& index, const at::Tensor& src) { OP_NOT_IMPL }
    static at::Tensor mean(const at::Tensor& self, at::OptionalIntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor& addmm_(at::Tensor& self, const at::Tensor& mat1, const at::Tensor& mat2, const at::Scalar& beta, const at::Scalar& alpha) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_layernorm_grad(const at::Tensor& grad_out, const at::Tensor& input,
                                                                               at::IntArrayRef normalized_shape, const at::Tensor& mean, const at::Tensor& rstd,
                                                                               const c10::optional<at::Tensor>& weight, const c10::optional<at::Tensor>& bias) {
        OP_NOT_IMPL
    }
    static at::Tensor& bitwise_not_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& leaky_relu_(at::Tensor& self, const at::Scalar& negative_slope) { OP_NOT_IMPL }
    static at::Tensor& adaptive_avg_pool2d_out(const at::Tensor& self, at::IntArrayRef output_size, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& cumsum_out(const at::Tensor& self, at::Dimname dim, c10::optional<at::ScalarType> dtype, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor bartlett_window(int64_t window_length, bool periodic, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                      c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& clamp_max_(at::Tensor& self, const at::Tensor& max) { OP_NOT_IMPL }
    static at::Tensor& acos_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> nll_loss_forward_out(const at::Tensor& self, const at::Tensor& target,
                                                                       const c10::optional<at::Tensor>& weight, int64_t reduction, int64_t ignore_index,
                                                                       at::Tensor& output, at::Tensor& total_weight) {
        OP_NOT_IMPL
    }
    static at::Tensor& normal_out(const at::Tensor& mean, const at::Tensor& std, c10::optional<at::Generator> generator, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor sum(const at::Tensor& self, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor& reflection_pad1d_out(const at::Tensor& self, at::IntArrayRef padding, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor isfinite(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor isnan(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, c10::optional<at::ScalarType> dtype,
                                     c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor repeat_interleave(const at::Tensor& self, int64_t repeats, c10::optional<int64_t> dim, c10::optional<int64_t> output_size) { OP_NOT_IMPL }
    static at::Tensor& bitwise_or_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor mean(const at::Tensor& self, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor index_add(const at::Tensor& self, at::Dimname dim, const at::Tensor& index, const at::Tensor& source, const at::Scalar& alpha) {
        OP_NOT_IMPL
    }
    static at::Tensor& floor_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor erf(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor npu_roi_align(const at::Tensor& self, const at::Tensor& rois, double spatial_scale, int64_t pooled_height, int64_t pooled_width,
                                    int64_t sample_num, int64_t roi_end_mode) {
        OP_NOT_IMPL
    }
    static at::Tensor tan(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& signbit_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor addmm(const at::Tensor& self, const at::Tensor& mat1, const at::Tensor& mat2, const at::Scalar& beta, const at::Scalar& alpha) {
        OP_NOT_IMPL
    }
    static at::Tensor& le_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& remainder_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor _ctc_loss_backward(const at::Tensor& grad, const at::Tensor& log_probs, const at::Tensor& targets, at::IntArrayRef input_lengths,
                                         at::IntArrayRef target_lengths, const at::Tensor& neg_log_likelihood, const at::Tensor& log_alpha, int64_t blank,
                                         bool zero_infinity) {
        OP_NOT_IMPL
    }
    static at::Tensor& addmv_out(const at::Tensor& self, const at::Tensor& mat, const at::Tensor& vec, const at::Scalar& beta, const at::Scalar& alpha,
                                 at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor sum(const at::Tensor& self, at::DimnameList dim, bool keepdim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor npu_fused_attention_score(const at::Tensor& query_layer, const at::Tensor& key_layer, const at::Tensor& value_layer,
                                                const at::Tensor& attention_mask, const at::Scalar& scale, double keep_prob, bool query_transpose,
                                                bool key_transpose, bool bmm_score_transpose_a, bool bmm_score_transpose_b, bool value_transpose,
                                                bool dx_transpose) {
        OP_NOT_IMPL
    }
    static at::Tensor lt(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor cosh(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& linspace_out(const at::Scalar& start, const at::Scalar& end, int64_t steps, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& div_(at::Tensor& self, const at::Tensor& other, c10::optional<c10::string_view> rounding_mode) { OP_NOT_IMPL }
    static at::Tensor img_to_tensor(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor max_unpool3d(const at::Tensor& self, const at::Tensor& indices, at::IntArrayRef output_size, at::IntArrayRef stride,
                                   at::IntArrayRef padding) {
        OP_NOT_IMPL
    }
    static at::Tensor& xlogy_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor logspace(const at::Scalar& start, const at::Scalar& end, int64_t steps, double base, c10::optional<at::ScalarType> dtype,
                               c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor eq(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor>
    npu_multi_head_attention_backward(const at::Tensor& query, const at::Tensor& key, const at::Tensor& value, const at::Tensor& query_weight,
                                      const at::Tensor& key_weight, const at::Tensor& value_weight, const at::Tensor& out_proj_weight,
                                      const c10::optional<at::Tensor>& query_bias, const c10::optional<at::Tensor>& key_bias,
                                      const c10::optional<at::Tensor>& value_bias, const c10::optional<at::Tensor>& out_proj_bias, const at::Tensor& query_res,
                                      const at::Tensor& key_res, const at::Tensor& value_res, const at::Tensor& attn_scores, const at::Tensor& attn_res,
                                      const at::Tensor& context, const at::Tensor& y_grad, const at::Tensor& dropout_mask, int64_t attn_head_num,
                                      int64_t attn_dim_per_head, int64_t src_len, int64_t tgt_len, double dropout_prob, bool softmax_use_float) {
        OP_NOT_IMPL
    }
    static at::Tensor softmax(const at::Tensor& self, at::Dimname dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor& ger_out(const at::Tensor& self, const at::Tensor& vec2, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& lerp_out(const at::Tensor& self, const at::Tensor& end, const at::Scalar& weight, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& copy_memory_(at::Tensor& self, const at::Tensor& src, bool non_blocking) { OP_NOT_IMPL }
    static at::Tensor npu_rotated_box_decode(const at::Tensor& self, const at::Tensor& deltas, const at::Tensor& weight) { OP_NOT_IMPL }
    static at::Tensor upsample_linear1d_backward(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners,
                                                 c10::optional<double> scales) {
        OP_NOT_IMPL
    }
    static at::Tensor affine_grid_generator_backward(const at::Tensor& grad, at::IntArrayRef size, bool align_corners) { OP_NOT_IMPL }
    static at::Tensor& batch_norm_elemt_out(const at::Tensor& input, const c10::optional<at::Tensor>& weight, const c10::optional<at::Tensor>& bias,
                                            const at::Tensor& mean, const at::Tensor& invstd, double eps, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor nonzero(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor __xor__(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& acos_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& log_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor var(const at::Tensor& self, at::DimnameList dim, bool unbiased, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& cat_out(at::TensorList tensors, at::Dimname dim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& scatter_out(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& src, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& gt_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& index_select_out(const at::Tensor& self, int64_t dim, const at::Tensor& index, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& log10_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& nll_loss2d_out(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight, int64_t reduction,
                                      int64_t ignore_index, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& sin_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& multinomial_out(const at::Tensor& self, int64_t num_samples, bool replacement, c10::optional<at::Generator> generator, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> var_mean(const at::Tensor& self, bool unbiased) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_conv_transpose3d_backward(const at::Tensor& input, const at::Tensor& grad_output,
                                                                                          const at::Tensor& weight, at::IntArrayRef padding,
                                                                                          at::IntArrayRef output_padding, at::IntArrayRef stride,
                                                                                          at::IntArrayRef dilation, int64_t groups,
                                                                                          ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static void _foreach_add_(at::TensorList self, at::ArrayRef<at::Scalar> scalars) { OP_NOT_IMPL }
    static at::Tensor npu_masked_fill_range(const at::Tensor& self, const at::Tensor& start, const at::Tensor& end, const at::Tensor& value, int64_t axis) {
        OP_NOT_IMPL
    }
    static at::Tensor& upsample_bilinear2d_backward_out(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                        bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w,
                                                        at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor& expm1_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> batch_norm_reduce(const at::Tensor& input, double eps) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> sort_out(const at::Tensor& self, at::Dimname dim, bool descending, at::Tensor& values, at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor& adaptive_avg_pool3d_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::Tensor& grad_input) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_conv3d_backward(const at::Tensor& input, const at::Tensor& grad, const at::Tensor& weight,
                                                                                at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation,
                                                                                int64_t groups, ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> npu_apply_adam_out(const at::Scalar& beta1_power, const at::Scalar& beta2_power,
                                                                                  const at::Scalar& lr, const at::Scalar& beta1, const at::Scalar& beta2,
                                                                                  const at::Scalar& epsilon, const at::Tensor& grad,
                                                                                  c10::optional<bool> use_locking, c10::optional<bool> use_nesterov,
                                                                                  at::Tensor& var, at::Tensor& m, at::Tensor& v) {
        OP_NOT_IMPL
    }
    static at::Tensor& full_out(at::IntArrayRef size, const at::Scalar& fill_value, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& softshrink_out(const at::Tensor& self, const at::Scalar& lambd, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> adaptive_max_pool2d_out(const at::Tensor& self, at::IntArrayRef output_size, at::Tensor& out,
                                                                          at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_linear(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias) { OP_NOT_IMPL }
    static at::Tensor replication_pad1d(const at::Tensor& self, at::IntArrayRef padding) { OP_NOT_IMPL }
    static at::Tensor __rshift__(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> aminmax_out(const at::Tensor& self, c10::optional<int64_t> dim, bool keepdim, at::Tensor& min,
                                                              at::Tensor& max) {
        OP_NOT_IMPL
    }
    static at::Tensor& masked_fill_(at::Tensor& self, const at::Tensor& mask, const at::Tensor& value) { OP_NOT_IMPL }
    static at::Tensor& bitwise_and_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor atan2(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& clamp_out(const at::Tensor& self, const c10::optional<at::Tensor>& min, const c10::optional<at::Tensor>& max, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_conv_transpose2d_backward(const at::Tensor& input, const at::Tensor& grad_output,
                                                                                          const at::Tensor& weight, at::IntArrayRef padding,
                                                                                          at::IntArrayRef output_padding, at::IntArrayRef stride,
                                                                                          at::IntArrayRef dilation, int64_t groups,
                                                                                          ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_apply_adam_w(const at::Scalar& beta1_power, const at::Scalar& beta2_power, const at::Scalar& lr,
                                                                             const at::Scalar& weight_decay, const at::Scalar& beta1, const at::Scalar& beta2,
                                                                             const at::Scalar& epsilon, const at::Tensor& grad,
                                                                             const c10::optional<at::Tensor>& max_grad_norm, c10::optional<bool> amsgrad,
                                                                             c10::optional<bool> maximize) {
        OP_NOT_IMPL
    }
    static at::Tensor& logaddexp_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor ger(const at::Tensor& self, const at::Tensor& vec2) { OP_NOT_IMPL }
    static at::Tensor& max_unpool3d_out(const at::Tensor& self, const at::Tensor& indices, at::IntArrayRef output_size, at::IntArrayRef stride,
                                        at::IntArrayRef padding, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor _slow_conv2d_forward(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor>& bias,
                                           at::IntArrayRef stride, at::IntArrayRef padding) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> grid_sampler_3d_backward(const at::Tensor& grad_output, const at::Tensor& input, const at::Tensor& grid,
                                                                         int64_t interpolation_mode, int64_t padding_mode, bool align_corners,
                                                                         ::std::array<bool, 2> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor& sqrt_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& erfc_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& clamp_min_(at::Tensor& self, const at::Scalar& min) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> max_out(const at::Tensor& self, at::Dimname dim, bool keepdim, at::Tensor& max, at::Tensor& max_values) {
        OP_NOT_IMPL
    }
    static at::Tensor& softplus_out(const at::Tensor& self, const at::Scalar& beta, const at::Scalar& threshold, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor true_divide(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& floor_divide_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& bernoulli_(at::Tensor& self, double p, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor& std_out(const at::Tensor& self, at::OptionalIntArrayRef dim, c10::optional<int64_t> correction, bool keepdim, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor norm(const at::Tensor& self, const at::Scalar& p) { OP_NOT_IMPL }
    static at::Tensor& exp_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor linspace(const at::Scalar& start, const at::Scalar& end, int64_t steps, c10::optional<at::ScalarType> dtype,
                               c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static void _foreach_sub_(at::TensorList self, const at::Scalar& scalar) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> max(const at::Tensor& self, at::Dimname dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor _embedding_bag_backward(const at::Tensor& grad, const at::Tensor& indices, const at::Tensor& offsets, const at::Tensor& offset2bag,
                                              const at::Tensor& bag_size, const at::Tensor& maximum_indices, int64_t num_weights, bool scale_grad_by_freq,
                                              int64_t mode, bool sparse, const c10::optional<at::Tensor>& per_sample_weights, int64_t padding_idx) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_sort_v2(const at::Tensor& self, int64_t dim, bool descending) { OP_NOT_IMPL }
    static at::Tensor& npu_conv2d_out(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                      at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor pixel_unshuffle(const at::Tensor& self, int64_t downscale_factor) { OP_NOT_IMPL }
    static at::Tensor& tanh_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& asinh_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& amax_out(const at::Tensor& self, at::IntArrayRef dim, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> npu_linear_backward(const at::Tensor& grad, const at::Tensor& input, const at::Tensor& weight) { OP_NOT_IMPL }
    static at::Tensor npu_pad(const at::Tensor& input, at::IntArrayRef paddings) { OP_NOT_IMPL }
    static at::Tensor cat(at::TensorList tensors, at::Dimname dim) { OP_NOT_IMPL }
    static at::Tensor npu_reshape(const at::Tensor& self, at::IntArrayRef shape, bool can_refresh) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> slogdet(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& gt_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor addmv(const at::Tensor& self, const at::Tensor& mat, const at::Tensor& vec, const at::Scalar& beta, const at::Scalar& alpha) {
        OP_NOT_IMPL
    }
    static at::Tensor& eq_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor mean(const at::Tensor& self, at::DimnameList dim, bool keepdim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor logaddexp(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& bitwise_xor_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor npu_conv3d(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                 at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
        OP_NOT_IMPL
    }
    static at::Tensor& sinc_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor hardtanh(const at::Tensor& self, const at::Scalar& min_val, const at::Scalar& max_val) { OP_NOT_IMPL }
    static void _foreach_addcdiv_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar& value) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> gru(const at::Tensor& input, const at::Tensor& hx, at::TensorList params, bool has_biases, int64_t num_layers,
                                                    double dropout, bool train, bool bidirectional, bool batch_first) {
        OP_NOT_IMPL
    }
    static at::Tensor normal(const at::Tensor& mean, const at::Tensor& std, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static void _foreach_mul_(at::TensorList self, const at::Scalar& scalar) { OP_NOT_IMPL }
    static at::Tensor avg_pool2d(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode,
                                 bool count_include_pad, c10::optional<int64_t> divisor_override) {
        OP_NOT_IMPL
    }
    static at::Tensor addr(const at::Tensor& self, const at::Tensor& vec1, const at::Tensor& vec2, const at::Scalar& beta, const at::Scalar& alpha) {
        OP_NOT_IMPL
    }
    static at::Tensor& zeros_out(at::IntArrayRef size, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor elu(const at::Tensor& self, const at::Scalar& alpha, const at::Scalar& scale, const at::Scalar& input_scale) { OP_NOT_IMPL }
    static at::Tensor& addr_(at::Tensor& self, const at::Tensor& vec1, const at::Tensor& vec2, const at::Scalar& beta, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& prod_out(const at::Tensor& self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor renorm(const at::Tensor& self, const at::Scalar& p, int64_t dim, const at::Scalar& maxnorm) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> native_batch_norm(const at::Tensor& input, const c10::optional<at::Tensor>& weight,
                                                                              const c10::optional<at::Tensor>& bias,
                                                                              const c10::optional<at::Tensor>& running_mean,
                                                                              const c10::optional<at::Tensor>& running_var, bool training, double momentum,
                                                                              double eps) {
        OP_NOT_IMPL
    }
    static at::Tensor __lshift__(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> _conv_depthwise2d_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& weight,
                                                                           at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding,
                                                                           at::IntArrayRef dilation, ::std::array<bool, 2> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor dropout_with_byte_mask(const at::Tensor& self, double p, bool train) { OP_NOT_IMPL }
    static at::Tensor grid_sampler_3d(const at::Tensor& input, const at::Tensor& grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
        OP_NOT_IMPL
    }
    static at::Tensor norm(const at::Tensor& self, const c10::optional<at::Scalar>& p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) { OP_NOT_IMPL }
    static at::Tensor& expm1_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& renorm_(at::Tensor& self, const at::Scalar& p, int64_t dim, const at::Scalar& maxnorm) { OP_NOT_IMPL }
    static at::Tensor upsample_trilinear3d(const at::Tensor& self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d,
                                           c10::optional<double> scales_h, c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static at::Tensor& npu_view_copy(at::Tensor& self, const at::Tensor& other, bool non_blocking) { OP_NOT_IMPL }
    static at::Tensor& logsumexp_out(const at::Tensor& self, at::IntArrayRef dim, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_convolution_backward(const at::Tensor& input, const at::Tensor& grad_output,
                                                                                     const at::Tensor& weight, at::IntArrayRef stride, at::IntArrayRef padding,
                                                                                     at::IntArrayRef dilation, int64_t groups,
                                                                                     ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor& inverse_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& baddbmm_(at::Tensor& self, const at::Tensor& batch1, const at::Tensor& batch2, const at::Scalar& beta, const at::Scalar& alpha) {
        OP_NOT_IMPL
    }
    static at::Tensor avg_pool3d(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode,
                                 bool count_include_pad, c10::optional<int64_t> divisor_override) {
        OP_NOT_IMPL
    }
    static at::Tensor& trunc_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor mse_loss_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target, int64_t reduction) { OP_NOT_IMPL }
    static at::Tensor npu_conv2d(const at::Tensor& input, const at::Tensor& weight, const c10::optional<at::Tensor>& bias, at::IntArrayRef stride,
                                 at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
        OP_NOT_IMPL
    }
    static at::Tensor& mean_out(const at::Tensor& self, at::DimnameList dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& argmin_out(const at::Tensor& self, c10::optional<int64_t> dim, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& copy_(at::Tensor& self, const at::Tensor& src, bool non_blocking);
    static at::Tensor count_nonzero(const at::Tensor& self, at::IntArrayRef dim) { OP_NOT_IMPL }
    static at::Tensor& randperm_out(int64_t n, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor randperm(int64_t n, c10::optional<at::Generator> generator, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                               c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& set_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor batch_norm(const at::Tensor& input, const c10::optional<at::Tensor>& weight, const c10::optional<at::Tensor>& bias,
                                 const c10::optional<at::Tensor>& running_mean, const c10::optional<at::Tensor>& running_var, bool training, double momentum,
                                 double eps, bool cudnn_enabled) {
        OP_NOT_IMPL
    }
    static at::Tensor log_softmax(const at::Tensor& self, at::Dimname dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor& index_add_out(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& source, const at::Scalar& alpha,
                                     at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& ne_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& asin_(at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> _unique2(const at::Tensor& self, bool sorted, bool return_inverse, bool return_counts) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> npu_dropout_with_add_softmax_backward(const at::Tensor& grad, const at::Tensor& mask,
                                                                                      const at::Tensor& softmax_out, const at::Scalar& alpha, double prob,
                                                                                      int64_t dim) {
        OP_NOT_IMPL
    }
    static at::Tensor logaddexp2(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor xlogy(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static bool is_pinned(const at::Tensor& self, c10::optional<at::Device> device) { OP_NOT_IMPL }
    static at::Tensor& glu_backward_out(const at::Tensor& grad_output, const at::Tensor& self, int64_t dim, at::Tensor& grad_input) { OP_NOT_IMPL }
    static at::Tensor bernoulli(const at::Tensor& self, double p, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor& hardtanh_(at::Tensor& self, const at::Scalar& min_val, const at::Scalar& max_val) { OP_NOT_IMPL }
    static at::Tensor& lt_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> sort(const at::Tensor& self, int64_t dim, bool descending) { OP_NOT_IMPL }
    static at::Tensor reflection_pad2d_backward(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef padding) { OP_NOT_IMPL }
    static at::Tensor count_nonzero(const at::Tensor& self, c10::optional<int64_t> dim) { OP_NOT_IMPL }
    static at::Tensor sigmoid(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor scatter(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& src) { OP_NOT_IMPL }
    static at::Tensor npu_grid_assign_positive(const at::Tensor& self, const at::Tensor& overlaps, const at::Tensor& box_responsible_flags,
                                               const at::Tensor& max_overlaps, const at::Tensor& argmax_overlaps, const at::Tensor& gt_max_overlaps,
                                               const at::Tensor& gt_argmax_overlaps, int64_t num_gts, double pos_iou_thr, double min_pos_iou,
                                               bool gt_max_assign_all) {
        OP_NOT_IMPL
    }
    static at::Tensor sin(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor softplus_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Scalar& beta, const at::Scalar& threshold) {
        OP_NOT_IMPL
    }
    static at::Tensor log10(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor sub(const at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& __ilshift__(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& slow_conv3d_out(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor>& bias,
                                       at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor amax(const at::Tensor& self, at::IntArrayRef dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor& npu_indexing_out(const at::Tensor& self, at::IntArrayRef begin, at::IntArrayRef end, at::IntArrayRef strides, int64_t begin_mask,
                                        int64_t end_mask, int64_t ellipsis_mask, int64_t new_axis_mask, int64_t shrink_axis_mask, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& upsample_bicubic2d_backward_out(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size,
                                                       bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w,
                                                       at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static const at::Tensor& resize_as_(const at::Tensor& self, const at::Tensor& the_template, c10::optional<at::MemoryFormat> memory_format) { OP_NOT_IMPL }
    static void _foreach_div_(at::TensorList self, const at::Scalar& scalar) { OP_NOT_IMPL }
    static at::Tensor __lshift__(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& ne_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor bincount(const at::Tensor& self, const c10::optional<at::Tensor>& weights, int64_t minlength) { OP_NOT_IMPL }
    static at::Tensor& sigmoid_backward_out(const at::Tensor& grad_output, const at::Tensor& output, at::Tensor& grad_input) { OP_NOT_IMPL }
    static at::Tensor& acosh_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor npu_bounding_box_encode(const at::Tensor& anchor_box, const at::Tensor& ground_truth_box, double means0, double means1, double means2,
                                              double means3, double stds0, double stds1, double stds2, double stds3) {
        OP_NOT_IMPL
    }
    static at::Tensor to(const at::Tensor& self, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device,
                         c10::optional<bool> pin_memory, bool non_blocking, bool copy, c10::optional<at::MemoryFormat> memory_format) {
        OP_NOT_IMPL
    }
    static at::Tensor& true_divide_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor add(const at::Tensor& self, const at::Tensor& other, const at::Scalar& alpha) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> _batch_norm_impl_index_backward(
        int64_t impl_index, const at::Tensor& input, const at::Tensor& grad_output, const c10::optional<at::Tensor>& weight,
        const c10::optional<at::Tensor>& running_mean, const c10::optional<at::Tensor>& running_var, const c10::optional<at::Tensor>& save_mean,
        const c10::optional<at::Tensor>& save_var_transform, bool train, double eps, ::std::array<bool, 3> output_mask, const at::Tensor& reservedSpace) {
        OP_NOT_IMPL
    }
    static at::Tensor index_add(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& source, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor& any_out(const at::Tensor& self, int64_t dim, bool keepdim, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor reflection_pad1d_backward(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef padding) { OP_NOT_IMPL }
    static at::Tensor& atan_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor threshold(const at::Tensor& self, const at::Scalar& threshold, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor upsample_trilinear3d_backward(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners,
                                                    c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static at::Tensor& zero_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor npu_confusion_transpose(const at::Tensor& self, at::IntArrayRef perm, at::IntArrayRef shape, bool transpose_first) { OP_NOT_IMPL }
    static at::Tensor round(const at::Tensor& self, int64_t decimals) { OP_NOT_IMPL }
    static at::Tensor& _index_put_impl_(at::Tensor& self, const c10::List<c10::optional<at::Tensor>>& indices, const at::Tensor& values, bool accumulate,
                                        bool unsafe) {
        OP_NOT_IMPL
    }
    static at::Tensor _cdist_forward(const at::Tensor& x1, const at::Tensor& x2, double p, c10::optional<int64_t> compute_mode) { OP_NOT_IMPL }
    static at::Tensor& lerp_(at::Tensor& self, const at::Tensor& end, const at::Scalar& weight) { OP_NOT_IMPL }
    static at::Tensor le(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor baddbmm(const at::Tensor& self, const at::Tensor& batch1, const at::Tensor& batch2, const at::Scalar& beta, const at::Scalar& alpha) {
        OP_NOT_IMPL
    }
    static at::Tensor& rrelu_with_noise_(at::Tensor& self, const at::Tensor& noise, const at::Scalar& lower, const at::Scalar& upper, bool training,
                                         c10::optional<at::Generator> generator) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_fusion_attention_grad(
        const at::Tensor& query, const at::Tensor& key, const at::Tensor& value, const at::Tensor& dy, int64_t head_num, c10::string_view input_layout,
        const c10::optional<at::Tensor>& pse, const c10::optional<at::Tensor>& padding_mask, const c10::optional<at::Tensor>& atten_mask,
        const c10::optional<at::Tensor>& softmax_max, const c10::optional<at::Tensor>& softmax_sum, const c10::optional<at::Tensor>& softmax_in,
        const c10::optional<at::Tensor>& attention_in, double scale_value, double keep_prob, int64_t pre_tockens, int64_t next_tockens, int64_t inner_precise,
        int64_t seed, int64_t offset, int64_t numels, bool gen_mask_parallel, bool sync) {
        OP_NOT_IMPL
    }
    static at::Tensor hamming_window(int64_t window_length, bool periodic, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                     c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& round_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor addcdiv(const at::Tensor& self, const at::Tensor& tensor1, const at::Tensor& tensor2, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor& log_sigmoid_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor npu_rotated_iou(const at::Tensor& self, const at::Tensor& query_boxes, bool trans, int64_t mode, bool is_cross, double v_threshold,
                                      double e_threshold) {
        OP_NOT_IMPL
    }
    static at::Tensor rsqrt(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& multilabel_margin_loss_out(const at::Tensor& self, const at::Tensor& target, int64_t reduction, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor l1_loss(const at::Tensor& self, const at::Tensor& target, int64_t reduction) { OP_NOT_IMPL }
    static at::Tensor npu_fast_gelu_backward(const at::Tensor& grad, const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& lt_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& log1p_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& selu_(at::Tensor& self) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> lstm_cell(const at::Tensor& input, at::TensorList hx, const at::Tensor& w_ih, const at::Tensor& w_hh,
                                                          const c10::optional<at::Tensor>& b_ih, const c10::optional<at::Tensor>& b_hh) {
        OP_NOT_IMPL
    }
    static at::Tensor& ge_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor slow_conv3d_forward(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor>& bias,
                                          at::IntArrayRef stride, at::IntArrayRef padding) {
        OP_NOT_IMPL
    }
    static at::Tensor amin(const at::Tensor& self, at::IntArrayRef dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor log_sigmoid_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& buffer) { OP_NOT_IMPL }
    static at::Tensor erfc(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& random_(at::Tensor& self, c10::optional<at::Generator> generator) { OP_NOT_IMPL }
    static at::Tensor hardshrink(const at::Tensor& self, const at::Scalar& lambd) { OP_NOT_IMPL }
    static at::Tensor _log_softmax(const at::Tensor& self, int64_t dim, bool half_to_float) { OP_NOT_IMPL }
    static at::Tensor var(const at::Tensor& self, bool unbiased) { OP_NOT_IMPL }
    static at::Tensor index_select(const at::Tensor& self, at::Dimname dim, const at::Tensor& index) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> npu_min(const at::Tensor& self, at::Dimname dim, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor hardsigmoid_backward(const at::Tensor& grad_output, const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor leaky_relu(const at::Tensor& self, const at::Scalar& negative_slope) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> adaptive_max_pool2d(const at::Tensor& self, at::IntArrayRef output_size) { OP_NOT_IMPL }
    static at::Tensor& npu_reshape_out(const at::Tensor& self, at::IntArrayRef shape, bool can_refresh, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor kl_div(const at::Tensor& self, const at::Tensor& target, int64_t reduction, bool log_target) { OP_NOT_IMPL }
    static at::Tensor& log1p_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& mean_out(const at::Tensor& self, at::OptionalIntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor& ge_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor linalg_pinv(const at::Tensor& self, const c10::optional<at::Tensor>& atol, const c10::optional<at::Tensor>& rtol, bool hermitian) {
        OP_NOT_IMPL
    }
    static at::Tensor upsample_linear1d(const at::Tensor& self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales) { OP_NOT_IMPL }
    static at::Tensor pixel_shuffle(const at::Tensor& self, int64_t upscale_factor) { OP_NOT_IMPL }
    static at::Tensor& ge_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor channel_shuffle(const at::Tensor& self, int64_t groups) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> npu_giou_backward(const at::Tensor& grad, const at::Tensor& bboxes, const at::Tensor& gtboxes, bool trans,
                                                                  bool is_cross, int64_t mode) {
        OP_NOT_IMPL
    }
    static at::Tensor binary_cross_entropy_with_logits(const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight,
                                                       const c10::optional<at::Tensor>& pos_weight, int64_t reduction) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_conv2d_backward(const at::Tensor& input, const at::Tensor& grad_output,
                                                                                const at::Tensor& weight, at::IntArrayRef stride, at::IntArrayRef padding,
                                                                                at::IntArrayRef dilation, int64_t groups, ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor _dropout_with_byte_mask_backward(const at::Tensor& grad_output, const at::Tensor& mask, double p) { OP_NOT_IMPL }
    static at::Tensor& bitwise_xor_out(const at::Tensor& self, const at::Scalar& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor celu(const at::Tensor& self, const at::Scalar& alpha) { OP_NOT_IMPL }
    static at::Tensor reflection_pad1d(const at::Tensor& self, at::IntArrayRef padding) { OP_NOT_IMPL }
    static at::Tensor& scatter_out(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Scalar& value, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& silu_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::Tensor& grad_input) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_div(at::TensorList tensors, const at::Scalar& scalar) { OP_NOT_IMPL }
    static at::Tensor& max_pool3d_with_indices_backward_out(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef kernel_size,
                                                            at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode,
                                                            const at::Tensor& indices, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor __xor__(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& normal_out(const at::Tensor& mean, double std, c10::optional<at::Generator> generator, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& abs_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor logical_not(const at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& dot_out(const at::Tensor& self, const at::Tensor& tensor, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor blackman_window(int64_t window_length, bool periodic, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                                      c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor max_pool2d_with_indices_backward(const at::Tensor& grad_output, const at::Tensor& self, at::IntArrayRef kernel_size,
                                                       at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode,
                                                       const at::Tensor& indices) {
        OP_NOT_IMPL
    }
    static at::Tensor argsort(const at::Tensor& self, int64_t dim, bool descending) { OP_NOT_IMPL }
    static const at::Tensor& as_strided_(const at::Tensor& self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
        OP_NOT_IMPL
    }
    static at::Scalar _local_scalar_dense(const at::Tensor& self);
    static at::Tensor arange(const at::Scalar& start, const at::Scalar& end, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                             c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static at::Tensor& tan_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor std(const at::Tensor& self, at::DimnameList dim, c10::optional<int64_t> correction, bool keepdim) { OP_NOT_IMPL }
    static at::Tensor binary_cross_entropy_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target,
                                                    const c10::optional<at::Tensor>& weight, int64_t reduction) {
        OP_NOT_IMPL
    }
    static at::Tensor& upsample_nearest3d_out(const at::Tensor& self, at::IntArrayRef output_size, c10::optional<double> scales_d,
                                              c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor& out) {
        OP_NOT_IMPL
    }

    static int64_t get_storage_size(const at::Tensor& self);

    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> npu_fused_attention_score_fwd(const at::Tensor& query_layer, const at::Tensor& key_layer,
                                                                                          const at::Tensor& value_layer, const at::Tensor& attention_mask,
                                                                                          const at::Scalar& scale, double keep_prob, bool query_transpose,
                                                                                          bool key_transpose, bool bmm_score_transpose_a,
                                                                                          bool bmm_score_transpose_b, bool value_transpose, bool dx_transpose) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> _npu_dropout(const at::Tensor& self, double p) { OP_NOT_IMPL }
    static at::Tensor& renorm_out(const at::Tensor& self, const at::Scalar& p, int64_t dim, const at::Scalar& maxnorm, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& tanh_backward_out(const at::Tensor& grad_output, const at::Tensor& output, at::Tensor& grad_input) { OP_NOT_IMPL }
    static at::Tensor npu_yolo_boxes_encode(const at::Tensor& self, const at::Tensor& gt_bboxes, const at::Tensor& stride, bool performance_mode) {
        OP_NOT_IMPL
    }
    static at::Tensor index_fill(const at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Scalar& value) { OP_NOT_IMPL }
    static at::Tensor clamp_max(const at::Tensor& self, const at::Tensor& max) { OP_NOT_IMPL }
    static at::Tensor upsample_bilinear2d_backward(const at::Tensor& grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners,
                                                   c10::optional<double> scales_h, c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static at::Tensor& col2im_out(const at::Tensor& self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation,
                                  at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_multi_head_attention(
        const at::Tensor& query, const at::Tensor& key, const at::Tensor& value, const at::Tensor& query_weight, const at::Tensor& key_weight,
        const at::Tensor& value_weight, const at::Tensor& attn_mask, const at::Tensor& out_proj_weight, const c10::optional<at::Tensor>& query_bias,
        const c10::optional<at::Tensor>& key_bias, const c10::optional<at::Tensor>& value_bias, const c10::optional<at::Tensor>& out_proj_bias,
        const c10::optional<at::Tensor>& dropout_mask, int64_t attn_head_num, int64_t attn_dim_per_head, int64_t src_len, int64_t tgt_len, double dropout_prob,
        bool softmax_use_float) {
        OP_NOT_IMPL
    }
    static const at::Tensor& resize_(const at::Tensor& self, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) { OP_NOT_IMPL }
    static at::Tensor& asinh_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor logical_xor(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor> sort(const at::Tensor& self, at::Dimname dim, bool descending) { OP_NOT_IMPL }
    static at::Tensor floor_divide(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor cdist(const at::Tensor& x1, const at::Tensor& x2, double p, c10::optional<int64_t> compute_mode) { OP_NOT_IMPL }
    static at::Tensor _trilinear(const at::Tensor& i1, const at::Tensor& i2, const at::Tensor& i3, at::IntArrayRef expand1, at::IntArrayRef expand2,
                                 at::IntArrayRef expand3, at::IntArrayRef sumdim, int64_t unroll_dim) {
        OP_NOT_IMPL
    }
    static at::Tensor to(const at::Tensor& self, const at::Tensor& other, bool non_blocking, bool copy, c10::optional<at::MemoryFormat> memory_format) {
        OP_NOT_IMPL
    }
    static at::Tensor bitwise_or(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& lerp_out(const at::Tensor& self, const at::Tensor& end, const at::Tensor& weight, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor _adaptive_avg_pool3d(const at::Tensor& self, at::IntArrayRef output_size) { OP_NOT_IMPL }
    static at::Tensor& im2col_out(const at::Tensor& self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding,
                                  at::IntArrayRef stride, at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor npu_diou(const at::Tensor& self, const at::Tensor& gtboxes, bool trans, bool is_cross, int64_t mode) { OP_NOT_IMPL }
    static ::std::vector<at::Tensor> _foreach_sqrt(at::TensorList tensors) { OP_NOT_IMPL }
    static at::Tensor& sqrt_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& le_(at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor softmax(const at::Tensor& self, int64_t dim, c10::optional<at::ScalarType> dtype) { OP_NOT_IMPL }
    static at::Tensor zeros(at::IntArrayRef size, c10::optional<at::DimnameList> names, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout,
                            c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor&, at::Tensor&> max_out(const at::Tensor& self, int64_t dim, bool keepdim, at::Tensor& max, at::Tensor& max_values) {
        OP_NOT_IMPL
    }
    static at::Tensor& fmod_(at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor npu_rotated_box_encode(const at::Tensor& self, const at::Tensor& gt_bboxes, const at::Tensor& weight) { OP_NOT_IMPL }
    static at::Tensor nll_loss_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target,
                                        const c10::optional<at::Tensor>& weight, int64_t reduction, int64_t ignore_index, const at::Tensor& total_weight) {
        OP_NOT_IMPL
    }
    static at::Tensor& hardswish_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& floor_out(const at::Tensor& self, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor upsample_nearest3d(const at::Tensor& self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h,
                                         c10::optional<double> scales_w) {
        OP_NOT_IMPL
    }
    static const at::Tensor& _conv_depthwise2d_out(const at::Tensor& self, const at::Tensor& weight, at::IntArrayRef kernel_size,
                                                   const c10::optional<at::Tensor>& bias, at::IntArrayRef stride, at::IntArrayRef padding,
                                                   at::IntArrayRef dilation, const at::Tensor& out) {
        OP_NOT_IMPL
    }
    static at::Tensor lerp(const at::Tensor& self, const at::Tensor& end, const at::Scalar& weight) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> npu_gru_backward(
        const c10::optional<at::Tensor>& grady, const c10::optional<at::Tensor>& gradh, const at::Tensor& input, const at::Tensor& weight_input,
        const at::Tensor& weight_hidden, const at::Tensor& bias_input, const at::Tensor& bias_hidden, const at::Tensor& seq_length, const at::Tensor& hx,
        const at::Tensor& y_output, const at::Tensor& h_output, const at::Tensor& output_updata, const at::Tensor& output_reset, const at::Tensor& output_new,
        const at::Tensor& hidden_new) {
        OP_NOT_IMPL
    }
    static at::Tensor& index_add_(at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& source, const at::Scalar& alpha) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor&, at::Tensor&> log_sigmoid_forward_out(const at::Tensor& self, at::Tensor& output, at::Tensor& buffer) { OP_NOT_IMPL }
    static at::Tensor& npu_format_cast_(at::Tensor& self, const at::Tensor& src);
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, int64_t> _batch_norm_impl_index(
        const at::Tensor& input, const c10::optional<at::Tensor>& weight, const c10::optional<at::Tensor>& bias, const c10::optional<at::Tensor>& running_mean,
        const c10::optional<at::Tensor>& running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
        OP_NOT_IMPL
    }
    static at::Tensor& smooth_l1_loss_backward_out(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target, int64_t reduction,
                                                   double beta, at::Tensor& grad_input) {
        OP_NOT_IMPL
    }
    static at::Tensor fmod(const at::Tensor& self, const at::Scalar& other) { OP_NOT_IMPL }
    static at::Tensor& fmod_out(const at::Tensor& self, const at::Tensor& other, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& adaptive_avg_pool3d_out(const at::Tensor& self, at::IntArrayRef output_size, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& index_copy_(at::Tensor& self, int64_t dim, const at::Tensor& index, const at::Tensor& source) { OP_NOT_IMPL }
    static at::Tensor vdot(const at::Tensor& self, const at::Tensor& other) { OP_NOT_IMPL }
    static at::Tensor& tanh_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor& gather_out(const at::Tensor& self, int64_t dim, const at::Tensor& index, bool sparse_grad, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& clamp_min_out(const at::Tensor& self, const at::Tensor& min, at::Tensor& out) { OP_NOT_IMPL }
    static at::Tensor& fill_(at::Tensor& self, const at::Scalar& value) { OP_NOT_IMPL }
    static ::std::tuple<at::Tensor, at::Tensor, at::Tensor> native_batch_norm_backward(
        const at::Tensor& grad_out, const at::Tensor& input, const c10::optional<at::Tensor>& weight, const c10::optional<at::Tensor>& running_mean,
        const c10::optional<at::Tensor>& running_var, const c10::optional<at::Tensor>& save_mean, const c10::optional<at::Tensor>& save_invstd, bool train,
        double eps, ::std::array<bool, 3> output_mask) {
        OP_NOT_IMPL
    }
    static at::Tensor& erfinv_(at::Tensor& self) { OP_NOT_IMPL }
    static at::Tensor normal(double mean, double std, at::IntArrayRef size, c10::optional<at::Generator> generator, c10::optional<at::ScalarType> dtype,
                             c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
        OP_NOT_IMPL
    }
    static ::std::tuple<at::Tensor, at::Tensor> npu_random_choice_with_mask(const at::Tensor& x, int64_t count, int64_t seed, int64_t seed2) { OP_NOT_IMPL }
    static at::Tensor softplus(const at::Tensor& self, const at::Scalar& beta, const at::Scalar& threshold) { OP_NOT_IMPL }
};
}  // namespace at_npu::native
