- common_config:
    layout: NCHW

- diopiSoftmax:
    dtype: (float64)->float32

- diopiSoftmaxBackward:
    dtype: (float64)->float32

- diopiLogSoftmax:
    dtype: (float64)->float32

- diopiLogSoftmaxBackward:
    dtype: (float64)->float32

- diopiGelu:
    dtype: (float64)->float32

- diopiGeluBackward:
    dtype: (float64)->float32

- diopiAbs:
    dtype: (bool, uint8)->int16

- diopiAbsInp:
    dtype: (bool, uint8)->int16

- diopiReciprocal:
    dtype: (bool, uint8, int8, int16, int32, int64)->float32

- diopiReciprocalInp:
    dtype: (bool, uint8, int8, int16, int32, int64)->float32

- diopiConvolution2d:
    dtype: (float64)->float16

- diopiConvolution2dBackward:
    dtype: (float64)->float16

- diopiAdaptiveAvgPool2d:
    dtype: (float64)->float32

- diopiAdaptiveAvgPool2dBackward:
    dtype: (float64)->float32

# - diopiLtScalar:
#     dtype: (bool)->float32

# - diopiLtInpScalar:
#     dtype: (bool)->float32

# - diopiLt:
#     dtype: (bool)->float32

# - diopiLtInp:
#     dtype: (bool)->float32

# - diopiGtScalar:
#     dtype: (bool)->float32

# - diopiGtInpScalar:
#     dtype: (bool)->float32

# - diopiGt:
#     dtype: (bool)->float32

# - diopiGtInp:
#     dtype: (bool)->float32

# - diopiLeScalar:
#     dtype: (bool)->float32

# - diopiLeInpScalar:
#     dtype: (bool)->float32

# - diopiLe:
#     dtype: (bool)->float32

# - diopiLeInp:
#     dtype: (bool)->float32

# - diopiGeScalar:
#     dtype: (bool)->float32

# - diopiGeInpScalar:
#     dtype: (bool)->float32

# - diopiGe:
#     dtype: (bool)->float32

# - diopiGeInp:
#     dtype: (bool)->float32

# - diopiLogicalAnd:
#     dtype: (float64, float32, float16, int64, int32, int16, int8, uint8)->bool

# - diopiLogicalAndInp:
#     dtype: (float64, float32, float16, int64, int32, int16, int8, uint8)->bool

# - diopiLogicalOr:
#     dtype: (float64, float32, float16, int64, int32, int16, int8, uint8)->bool

# - diopiLogicalOrInp:
#     dtype: (float64, float32, float16, int64, int32, int16, int8, uint8)->bool

# - diopiLogicalNot:
#     dtype: (float64, float32, float16, int64, int32, int16, int8, uint8)->bool

# - diopiLogicalNotInp:
#     dtype: (float64, float32, float16, int64, int32, int16, int8, uint8)->bool

- diopiBatchNorm:
    dtype: (float64)->float32

- diopiBatchNormBackward:
    dtype: (float64)->float32

- diopiLinear:
    dtype: (float64)->float32

- diopiLinearBackward:
    dtype: (float64)->float32

- diopiAny:
    dtype: (float16, float32, float64, int16, int32, int64, uint8, int8)->bool

- diopiAll:
    dtype: (float16, float32, float64, int16, int32, int64, uint8, int8)->bool

- diopiNeg:
    dtype: (int8, int16, uint8, uint16, uint32, uint64)->int64, (float64)->float32, (complex32)->complex64

- diopiNegInp:
    dtype: (int8, int16, uint8, uint16, uint32, uint64)->int64, (float64)->float32, (complex32)->complex64

- diopiThreshold:
    dtype: (float64)->float32, (int16, int64)->int32

- diopiThresholdInp:
    dtype: (float64)->float32, (int16, int64)->int32

- diopiThresholdBackward:
    dtype: (float64)->float32, (int16, int64)->int32

- diopiMinimum:
    dtype: (uint8, bool, int16)->int32, (float64)->float32

- diopiHardtanh:
    dtype: (float64)->float32

- diopiHardtanhInp:
    dtype: (float64)->float32

- diopiHardtanhBackward:
    dtype: (float64)->float32

- diopiAdd:
    dtype: (float64)->float32, (bool, uint8, int8, uint16, int16, uint32, int32, uint64, int64)->int32

- diopiAddInp:
    dtype: (float64)->float32, (bool, uint8, int8, uint16, int16, uint32, int32, uint64, int64)->int32

- diopiAddInpScalar:
    dtype: (float64)->float32, (bool, uint8, int8, uint16, int16, uint32, int32, uint64, int64)->int32

- diopiMm:
    dtype: (float64)->float32

- diopiAddmm:
    dtype: (float64)->float32

- diopiAddcmul:
    dtype: (int16, uint16)->int32, (uint32, uint64)->int64, (float64)->float32

- diopiAddcmulInp:
    dtype: (int16, uint16)->int32, (uint32, uint64)->int64, (float64)->float32

- diopiAddcdiv:
    dtype: (int8, int16, int32, int64, uint16, uint32, uint64)->int64, (float64)->float32

- diopiAddcdivInp:
    dtype: (int8, int16, int32, int64, uint16, uint32, uint64)->int64, (float64)->float32

- diopiTopk:
    dtype: (float32)->float64

- diopiGroupNorm:
    dtype: (float64)->float32

- diopiSqrt:
    dtype: (int8, int16, int32, int64, uint8, uint16, uint32, uint64, bool)->float32

- diopiSqrtInp:
    dtype: (int8, int16, int32, int64, uint8, uint16, uint32, uint64, bool)->float32

- diopiLayerNorm:
    dtype: (float64)->float32

- diopiLayerNormBackward:
    dtype: (float64)->float32

- diopiNLLLoss:
    dtype: (float16)->float64

- diopiNLLLossBackward:
    dtype: (float16)->float64

- diopiMax:
    dtype: (float64)->float32, (int16, int32, uint8, int8, bool)->int64

- diopiMin:
    dtype: (float64)->float32, (int16, int32, uint8, int8, bool)->int64

- diopiMinAll:
    dtype: (float64)->float32, (int16, int8)->int32, (bool)->uint8

- diopiMaxAll:
    dtype: (float64)->float32, (int16, int8)->int32, (bool)->uint8

- diopiSilu:
    dtype: (float64)->float32

- diopiSiluInp:
    dtype: (float64)->float32

- diopiSiluBackward:
    dtype: (float64)->float32

- diopiUniformInp:
    dtype: (float64)->float32

- diopiExp:
    dtype: (bool, uint8, int8, int16, int32, int64)->float32

- diopiPow:
    dtype: (bool, uint8, int8, int16, int32, int64)->float32

- diopiPowInp:
    dtype: (bool, uint8, int8, int16, int32, int64)->float32

- diopiPowTensor:
    dtype: (bool, uint8, int8, int16, int32, int64)->float32

- diopiPowInpTensor:
    dtype: (bool, uint8, int8, int16, int32, int64)->float32

- diopiNorm:
    dtype: (bool, uint8, int8, int16, int32, int64, float64)->float32

- diopiRsqrt:
    dtype: (int8, uint8, int16, int32, int64, bool)->float32

- diopiEmbeddingBackward:
    dtype: (float64)->float32

- diopiDropout:
    dtype: (float64)->float32

- diopiDropoutInp:
    dtype: (float64)->float32

- diopiExpand:
    dtype: (uint8, int16)->int32, (float64)->float32

- diopiSort:
    dtype: (float64)->float32

- diopiScatter:
    dtype: (uint8,int8)->int32

- diopiScatterInp:
    dtype: (uint8,int8)->int32

- diopiScatterScalar:
    dtype: (uint8,int8)->int32

- diopiScatterInpScalar:
    dtype: (uint8,int8)->int32

- diopiRotaryEmbedding:
    dtype: (float64)->float32

- diopiCol2Im:
    # data type float64 of input [x] is not supported
    dtype: (float64)->float32

- diopiRemainderTensor:
    dtype: (bool, uint8, int8, int16, uint16)->int32, (float64)->float32

- diopiRemainderScalar:
    dtype: (bool, uint8, int8, int16, uint16)->int32, (float64)->float32

- diopiRemainder:
    dtype: (bool, uint8, int8, int16, uint16)->int32, (float64)->float32

- diopiHardswish:
    # data type DT_DOUBLE of input [x] is not supported
    dtype: (float64)->float32

- diopiHardswishInp:
    dtype: (float64)->float32

- diopiHardswishBackward:
    dtype: (float64)->float32

- diopiMatmul:
    dtype: (float64)->float32

- diopiAtan:
    dtype: (uint8, int8, int32, int16, int64, bool)->float32

- diopiAtanInp:
    dtype: (uint8, int8, int32, int16, int64, bool)->float32

- diopiNormalTensor:
    dtype: (float64)->float32

- diopiNormalScalarTensor:
    dtype: (float64)->float32

- diopiNormalTensorScalar:
    dtype: (float64)->float32

- diopiGatherBackward:
    dtype: (float64)->float32

- diopiBmm:
    dtype: (float64)->float32

- diopiIsNan:
    dtype: (uint8, int8, int32, int16, int64, bool)->float32