name: runs on sco

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    paths-ignore:
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".git*"
      - "CODE_OF_CONDUCT**"

concurrency:
  group: sco-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  DEEPLINK_PATH: '/mnt/cache/share/deeplinkci/github/${{ github.repository }}'
  ENV_PATH: '/mnt/cache/share/platform/env'
  BUILD_TEST1: build_test
  GEN_DATA: diopi_test/python/cache
  ALL_COVERAGE: ${{ (contains( github.ref, 'main') || startsWith(github.ref, 'refs/heads/v') || startsWith(github.ref, 'refs/heads/dev')) && 'ON' || 'OFF' }}
  REQUIRE_COVERAGE: ${{ vars.REQUIRE_COVERAGE != '' && vars.REQUIRE_COVERAGE || '10' }}

jobs:
  checkout_code:
    name: checkout code
    runs-on: tps-sco-ci
    steps:
      - name: Checkout Code
        uses: DeepLink-org/DIOPI/.github/actions/checkout-code@main

  Build-Nvidia:
    name: Build-Nvidia
    runs-on: tps-sco-ci
    needs: [checkout_code]
    steps:
      - name: build
        run: |
          set -e
          cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${BUILD_TEST1} && cp -R source ${BUILD_TEST1} && cd ${BUILD_TEST1}
          srun --job-name=${GITHUB_JOB} bash -c "export USE_COVERAGE=ON && cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1} \
          && source ${ENV_PATH}/pt2.0_diopi_nodeps \
          && cd impl && bash scripts/build_impl.sh torch" || ( cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${BUILD_TEST1} && exit 1 )

  lint:
    name: lint
    runs-on: tps-sco-ci
    needs: [checkout_code]
    steps:
      - name: lint
        run: |
          set -e
          cd ${DEEPLINK_PATH}/ && ls -al && find ${DEEPLINK_PATH}/ -maxdepth 1 -mmin +300 -type d |xargs rm -rf
          cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          srun --job-name=${GITHUB_JOB} bash -c "source ${ENV_PATH}/pt2.0_diopi_nodeps \
          && cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${GITHUB_JOB}/diopi_test && bash scripts/ci_script.sh py-lint \
          && bash scripts/ci_script.sh cpp-lint && cd ../impl && bash scripts/ci_script.sh cpp-lint" \
          && cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} \
          || ( cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )

  Gen-Data:
    name: Gen-Data
    runs-on: tps-sco-ci
    needs: [Build-Nvidia]
    steps:
      - name: gen-test-data
        run: |
          set -e
          srun --job-name=${GITHUB_JOB} bash -c "cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1}/diopi_test/python \
          && source ${ENV_PATH}/pt2.0_diopi_nodeps \
          && python main.py --mode gen_data" \
          || ( cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1} && git clean -xdf ${GEN_DATA} && exit 1 )

  Op-Test-Nvidia:
    name: Op-Test-Nvidia
    runs-on: tps-sco-ci
    needs: Gen-Data
    env:
      run_test: "coverage run -p"
    steps:
      - name: NHWC-32bit-test
        run: |
          set -e
          srun --job-name=${GITHUB_JOB} bash -c "export USE_COVERAGE=ON && cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1} \
          && source ${ENV_PATH}/pt2.0_diopi_nodeps && cd diopi_test/python && python main.py --mode gen_case --fname batch_norm --nhwc &&
          python main.py --mode gen_case --fname index_select --four_bytes && python main.py --mode gen_case --fname arange --four_bytes && ${run_test} main.py --mode run_test"
          export USE_COVERAGE=ON && source ${ENV_PATH}/pt2.0_diopi_nodeps
          bash /mnt/cache/share/platform/dep/sonar/coverage_DIOPI_nv.sh ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1} ${GITHUB_RUN_NUMBER} || echo "get coverage fail"
      - name: test
        run: |
          set -e
          srun --job-name=${GITHUB_JOB} bash -c "export CI=true && export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1}/impl/lib \
          && source ${ENV_PATH}/pt2.0_diopi_nodeps && cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1} \
          && cd diopi_test/python && python main.py --mode gen_case && python main.py --mode run_test"
      - name: increment coverage check
        if: ${{ contains( github.event_name, 'pull_request' ) && contains( github.base_ref, 'main' ) }}
        run: |
          set -e
          source ${ENV_PATH}/pt2.0_diopi_nodeps  && cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST1}
          bash scripts/increment_coverage.sh ${REQUIRE_COVERAGE}
