name: diopi ci
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev_v0.25
      - wgs/*
    if: 'contains(github.event.head_commit.message, "ci") || contains(github.event.head_commit.message, "CI")'
  pull_request:
    branches:
      - main
      - dev_v0.25

env:
  NFS_PATH: '/mnt/cache/share/parrotsci/github/cibuild/${{ github.repository }}'
  NFS_PATH_LUSTRE: '/mnt/lustre/share/parrotsci/github/cibuild/${{ github.repository }}'
  ENV_PATH: '/mnt/cache/share/platform/cienv'
  ENV_NAME: 'pt1.10v2'
  ENV_NAME_MMCV: 'pt1.11v1'
  GPU_REQUESTS: 1
  SLURM_PAR_SH1984: ${{ vars.SLURM_PAR_SH1984 }}
  SLURM_PAR_CAMB: ${{ vars.SLURM_PAR_CAMB }}
  CLUSTER_1984: SH1984
  CLUSTER_CAMB: CAMB
  BUILD_TEST1: build_test
  BUILD_TEST2: build_test_dy
  BUILD_TEST3: build_mmcv_ext
  GEN_DATA: DIOPI-TEST/python/data
  PYTORCH_COMMIT: c263bd43e8e8502d4726643bc6fd046f0130ac0e
  PYTORCH_BASE_DIR: '/mnt/lustre/share/parrotsci/github/cibuild/pytorchbase'
  CI_BUILD_FLAG: "ci_build_flag"

jobs:
  Rsync:
    name: Rsync code
    runs-on: tps-diopi-ci
    steps:
      - name: clone repo
        run: |
          cd ${GITHUB_WORKSPACE} && rm -rf DIOPI && git clone https://github.com/DeepLink-org/DIOPI.git && cd DIOPI
          if [ $GITHUB_EVENT_NAME == "pull_request" ]; then
          git checkout ${{ github.event.pull_request.head.sha }} && git merge --no-edit ${{ github.base_ref }} 
          else
          git checkout ${{ github.sha }}
          fi
          cd DIOPI-TEST/third_party && rm -rf mmcv_diopi && git clone https://github.com/DeepLink-org/mmcv_diopi.git
      - name: ci interruptible and support pr ci
        run: |
          cd ${GITHUB_WORKSPACE}/DIOPI && bash scripts/ci_interruptible.sh
        env:
          GITHUB_TOKEN: "${{ secrets.CI_TOKEN }}"
      - name: Rsync to Server
        run: |
          ssh ${CLUSTER_1984} "mkdir -p ${NFS_PATH}/${GITHUB_RUN_NUMBER}/source"
          rsync -a --delete ${GITHUB_WORKSPACE}/DIOPI/ ${CLUSTER_1984}:${NFS_PATH}/${GITHUB_RUN_NUMBER}/source/
          ssh ${CLUSTER_CAMB} "mkdir -p ${NFS_PATH}/${GITHUB_RUN_NUMBER}/source"
          rsync -a --delete ${GITHUB_WORKSPACE}/DIOPI/ ${CLUSTER_CAMB}:${NFS_PATH}/${GITHUB_RUN_NUMBER}/source/

  lint:
    name: lint
    runs-on: tps-diopi-ci
    needs: [Rsync]
    steps:
      - name: lint
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          cd ${NFS_PATH}/ && ls -al && find ${NFS_PATH}/ -maxdepth 1 -mmin +300 -type d |xargs rm -rf
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME}
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          export CI=true
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=10 bash -c 'cd DIOPI-TEST && bash scripts/ci_script.sh py-lint \
          && bash scripts/ci_script.sh cpp-lint && cd ../DIOPI-IMPL \ && bash scripts/ci_script.sh cpp-lint' \
          && cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} \
          || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Build-Nvidia:
    name: Build-Nvidia
    runs-on:  tps-diopi-ci
    needs: [Rsync]
    steps:
      - name: build
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME}
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${BUILD_TEST1} && cp -R source ${BUILD_TEST1} && cd ${BUILD_TEST1}
          export CI=true
          export DIOPI_BUILD_TESTRT=ON
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=10 bash -c 'cd DIOPI-IMPL && bash scripts/build_impl.sh torch' || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${BUILD_TEST1} && exit 1 )
          """
      - name: build-dyload
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME}
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${BUILD_TEST2} && cp -R source ${BUILD_TEST2} && cd ${BUILD_TEST2}
          export CI=true
          export DIOPI_BUILD_TESTRT=ON
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=10 bash -c 'cd DIOPI-IMPL && bash scripts/build_impl.sh torch_dyload' || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${BUILD_TEST2} && exit 1 )
          """

  Build-Camb:
    name: Build-Camb
    runs-on: tps-diopi-ci
    needs: [Rsync]
    steps:
      - name: Build
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/ && ls -al && find ${NFS_PATH}/ -maxdepth 1 -mmin +300 -type d |xargs rm -rf
          source /mnt/cache/share/platform/env/camb_ci_diopi_impl
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${BUILD_TEST1} && cp -R source ${BUILD_TEST1} && cd ${BUILD_TEST1}
          export CI=true
          export DIOPI_BUILD_TESTRT=ON
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=10 bash -c 'cd DIOPI-IMPL && bash scripts/build_impl.sh camb' || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${BUILD_TEST1} && exit 1 )
          """
      - name: clang-tidy
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          source /mnt/cache/share/platform/env/camb_ci_diopi_impl
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST1}
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=10 bash -c 'cd DIOPI-IMPL && bash scripts/ci_script.sh clang-tidy' || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${BUILD_TEST1} && exit 1 )
          """

  Build-Mmcv-Ext-Nvidia:
    name: Build-Mmcv-Ext-Nvidia
    runs-on: tps-diopi-ci
    needs: [Rsync]
    steps:
      - name: build
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME_MMCV}
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && rm -rf ${BUILD_TEST3} && cp -R source ${BUILD_TEST3} && cd ${BUILD_TEST3}
          export CI=true
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=10 ls && cd DIOPI-TEST && bash scripts/build_mmcv.sh mmcv_ext || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${BUILD_TEST3} && exit 1 )
          """

  Op-Test-Mmcv-Ext-Nvidia:
    name: Op-Test-Mmcv-Ext-Nvidia
    runs-on: tps-diopi-ci
    needs: [Build-Mmcv-Ext-Nvidia]
    steps:
      - name: test
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          export CI=true
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME_MMCV}
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST3}
          pip install -U pytest
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=40 --gres=gpu:${GPU_REQUESTS} ls && cd DIOPI-TEST && bash scripts/test_mmcv_ext.sh CUDA \
          && cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${BUILD_TEST3} || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${BUILD_TEST3} && exit 1 )
          """

  Gen-Data:
    name: Gen-Data
    runs-on: tps-diopi-ci
    needs: [Build-Nvidia]
    steps:
      - name: gen-test-data
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          export CI=true
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME}
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST1} && cd DIOPI-TEST/python && ls &&
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=10 --gres=gpu:${GPU_REQUESTS} bash -c 'python main.py --mode gen_data' \
          || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1} && git clean -xdf ${GEN_DATA} && exit 1 )
          """

  Op-Test-Nvidia:
    name: Op-Test-Nvidia
    runs-on: tps-diopi-ci
    needs: Gen-Data
    steps:
      - name: NHWC-32bit-test
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          export CI=true
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME} && cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST1}
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=10 --gres=gpu:${GPU_REQUESTS} bash -c 'cd DIOPI-TEST/python && python main.py --mode run_test --fname batch_norm --nhwc &&
          python main.py --mode run_test --fname index_select --four_bytes && python main.py --mode run_test --fname arange --four_bytes'
          """
      - name: dyload-test
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          export CI=true
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME} && cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST2}
          rm -rf ${GEN_DATA} && ln -s ${NFS_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1}/${GEN_DATA} ${GEN_DATA}
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${NFS_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST2}/DIOPI-IMPL/lib
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=10 --gres=gpu:${GPU_REQUESTS} bash -c 'cd DIOPI-TEST/python && python main.py --mode run_test'
          """

  Rt-Test-Nvidia:
    name: Rt-Test-Nvidia
    runs-on: tps-diopi-ci
    needs: Build-Nvidia
    steps:
      - name: test
        run: |
          ssh ${CLUSTER_1984} """
          set -e
          export CI=true
          source ${ENV_PATH}/github_bashrc && source /mnt/cache/share/platform/env/${ENV_NAME}
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST1}
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_SH1984} --time=10 --gres=gpu:${GPU_REQUESTS} bash -c 'cd DIOPI-TEST/python && python main.py --mode utest'
          """

  Op-Test-Camb:
    name: Op-Test-Camb
    runs-on: tps-diopi-ci
    needs: [Gen-Data, Build-Camb]
    steps:
      - name: test
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          export CI=true
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && ls
          rsync -a ${CLUSTER_1984}:${NFS_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1}/${GEN_DATA} ${NFS_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1}/DIOPI-TEST/python/
          source /mnt/cache/share/platform/env/camb_ci_diopi_impl && cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST1}
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=10 --gres=mlu:${GPU_REQUESTS} bash -c 'cd DIOPI-TEST/python && python main.py --mode run_test --impl_folder ${NFS_PATH_LUSTRE}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1}/DIOPI-IMPL/camb/' \
          && cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1} && git clean -xdf ${GEN_DATA} || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/${BUILD_TEST1} && git clean -xdf ${GEN_DATA} && exit 1 )
          """

  Rt-Test-Camb:
    name: Rt-Test-Camb
    runs-on: tps-diopi-ci
    needs: Build-Camb
    steps:
      - name: test
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          export CI=true
          source /mnt/cache/share/platform/env/camb_ci_diopi_impl && cd ${NFS_PATH}/${GITHUB_RUN_NUMBER} && cd ${BUILD_TEST1}
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=10 --gres=mlu:${GPU_REQUESTS} bash -c 'cd DIOPI-TEST/python && python main.py --mode utest' \
          """

  Rsync-Camb:
    name: Rsync code camb
    runs-on: tps-diopi-ci
    needs: [Rsync]
    steps:
      - name: clone repo
        run: |
          echo ${GITHUB_WORKSPACE}
          echo ${{ github.repository }}
          echo ${CLUSTER_CAMB}
          echo `pwd`
          mkdir -p ${GITHUB_WORKSPACE} 
          cd ${GITHUB_WORKSPACE} && rm -rf dipu && git clone https://github.com/DeepLink-org/dipu.git && cd dipu # latest

          cd ${GITHUB_WORKSPACE}/dipu/third_party && rm -rf DIOPI && git clone https://github.com/DeepLink-org/DIOPI.git && cd DIOPI
          if [ $GITHUB_EVENT_NAME == "pull_request" ]; then
          git checkout ${{ github.event.pull_request.head.sha }} && git merge --no-edit ${{ github.base_ref }} 
          else
          git checkout ${{ github.sha }}
          fi
      - name: ci interruptible and support pr ci
        run: |
          cd ${GITHUB_WORKSPACE}/dipu && bash scripts/ci_interruptible.sh
        env:
          GITHUB_TOKEN: "${{ secrets.CI_TOKEN }}"
      - name: Rsync to Server
        run: |
          echo ${GITHUB_WORKSPACE}
          echo ${{ github.repository }}
          echo ${CLUSTER_CAMB}
          echo `pwd`
          cd /home/autolink/rsync/sourcecode/pytorch && git checkout master && git pull \
          && git checkout ${PYTORCH_COMMIT} && git submodule update --init --recursive
          ssh ${CLUSTER_CAMB} "mkdir -p ${NFS_PATH}/${GITHUB_RUN_NUMBER}/source"
          rsync -a --delete ${GITHUB_WORKSPACE}/dipu/ ${CLUSTER_CAMB}:${NFS_PATH}/${GITHUB_RUN_NUMBER}/source/
          result=`ssh ${CLUSTER_CAMB} """
                  mkdir -p ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
                  cd ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
                  if [ ! -f ${CI_BUILD_FLAG} ]; then
                    touch ${CI_BUILD_FLAG}
                  fi
                  cat ${CI_BUILD_FLAG}
                  """`
          echo "result:${result}"
          if [ "${result}x" = "${PYTORCH_COMMIT}"x ]; then
            echo "pytorch:${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT} exist."
          else
            echo "pytorch not exist"
            exit 1
          fi

  # Build-Pytorch:
  #   name: Build pytorch
  #   needs: [Rsync]
  #   runs-on: github-poc-ci
  #   env:
  #     MLU_REQUESTS: 0
  #   steps:
  #     - name: Build pytorch
  #       run: |
  #         ssh ${CLUSTER_CAMB} """
  #         set -e
  #         cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/source
  #         source scripts/ci_camb_env.sh
  #         cd ${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
  #         echo "pwd: $(pwd)"
  #         if [ -f ${CI_BUILD_FLAG} ]; then
  #           echo "${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT} has been successfully compiled."
  #         else
  #           mkdir -p build && make clean
  #           export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
  #           BUILD_BINARY=0 USE_PRECOMPILED_HEADERS=1 BUILD_TEST=0
  #           srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=40 \
  #           --gres=mlu:${MLU_REQUESTS} python setup.py install --prefix=./install_path
  #           echo "${PYTORCH_COMMIT}" > ${CI_BUILD_FLAG}
  #         fi
  #         """

  Build-POC-Camb:
    name: Build dipu camb
    needs: [Rsync-Camb]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: Build dipu
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && cp -R source ${GITHUB_JOB}  && cd ${GITHUB_JOB}
          export PYTORCH_DIR=${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          source scripts/ci_camb_env.sh
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --time=40 \
          --gres=mlu:${MLU_REQUESTS} bash scripts/ci_camb_script.sh build_dipu \
          || ( cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${GITHUB_JOB} && exit 1 )
          """

  Test-One-Iter-Camb:
    name: test-one-iter-camb
    needs: [Build-POC-Camb]
    runs-on: github-poc-ci
    env:
      MLU_REQUESTS: 1
    steps:
      - name: clone-repos
        run: |
          cd ${GITHUB_WORKSPACE} && cd dipu
          bash scripts/ci_one_iter.sh clone
          rsync -a --include='mmagic/***' --include='mmocr/***' --include='mmpose/***' --include='mmdetection3d/***' --include='mmaction2/***' --include='mmsegmentation/***' --include='mmcv/***' --include='mmpretrain/***' --include='mmdetection/***' --include='mmengine/***' --include='SMART/***' --exclude='*' ./ ${CLUSTER_CAMB}:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/

      - name: run-one-iter-tools
        run: |
          ssh ${CLUSTER_CAMB} """
          set -e
          cd ${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb
          export PYTORCH_DIR=${PYTORCH_BASE_DIR}/${PYTORCH_COMMIT}
          echo 'pytorch dir: ${PYTORCH_DIR}'
          source scripts/ci_camb_env.sh
          echo 'python path : ${PYTHONPATH}'
          export PYTHONPATH=${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmagic:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmpretrain:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmaction2:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmocr:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmpose:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmsegmentation:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmdetection3d:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmdetection:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmengine:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/mmcv:${NFS_PATH}/${GITHUB_RUN_NUMBER}/Build-POC-Camb/SMART/tools/one_iter_tool/one_iter:$PYTHONPATH
          srun --job-name=${GITHUB_RUN_NUMBER}_${GITHUB_JOB} --partition=${SLURM_PAR_CAMB} --gres=mlu:${MLU_REQUESTS} sh scripts/ci_one_iter.sh build_camb
          pwd
          srun --job-name=${GITHUB_JOB} --partition=${SLURM_PAR_CAMB}  --gres=mlu:${MLU_REQUESTS} sh scripts/ci_camb_run_one_iter.sh && rm -rf one_iter_data || (rm -rf one_iter_data && exit 1)
          """